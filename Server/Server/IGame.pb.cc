// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IGame.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace IGameProto {

namespace {

const ::google::protobuf::Descriptor* MsgHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateRoleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateRoleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSelectRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSelectRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSelectRoleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSelectRoleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterSceneNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterSceneNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJumpSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJumpSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJumpSceneNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJumpSceneNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleIntoVisionNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleIntoVisionNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleOutofVisionNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleOutofVisionNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgActionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgActionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgActionNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgActionNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHeroAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeroAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTaskListNfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTaskListNfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAcceptTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAcceptTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAcceptTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAcceptTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCommitTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCommitTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCommitTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCommitTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDropTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDropTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDropTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDropTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTaskChangeNfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTaskChangeNfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGmCmdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGmCmdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGmCmdAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGmCmdAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Formation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Formation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSaveFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSaveFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSaveFormationAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSaveFormationAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFormationNty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFormationNty_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAttrChangeNfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAttrChangeNfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKillMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKillMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetBagItemsNfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetBagItemsNfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgItemsChangedNfy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgItemsChangedNfy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUseBagItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUseBagItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUseBagItemAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUseBagItemAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightSide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightSide_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMonsterAgainstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMonsterAgainstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMonsterAgainstAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMonsterAgainstAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvpAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvpAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvpCancelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvpCancelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvpNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvpNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoadFightResProgressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoadFightResProgressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoadFightResProgressNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoadFightResProgressNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFightStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFightStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFightStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFightStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFightEndReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFightEndReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFightEndNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFightEndNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DamageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DamageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAttackAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAttackAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAttackNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAttackNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoundStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoundStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoundEndReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoundEndReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBuildInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBuildInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetBuildCoppperReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetBuildCoppperReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetBuildCoppperAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetBuildCoppperAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpgradeInteriorBuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpgradeInteriorBuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpgradeInteriorBuildAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpgradeInteriorBuildAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInteriorTaskFinishedNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInteriorTaskFinishedNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDispatchTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDispatchTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDispatchTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDispatchTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRefreshTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRefreshTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRefreshTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRefreshTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpgradeTaskStarLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpgradeTaskStarLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpgradeTaskStarLevelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpgradeTaskStarLevelAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetInteriorRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetInteriorRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetInteriorRewardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetInteriorRewardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCompleteInteriorTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCompleteInteriorTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCompleteInteriorTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCompleteInteriorTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateArmyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateArmyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateArmyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateArmyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinArmyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinArmyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinArmyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinArmyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApproveJoinArmyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApproveJoinArmyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApproveJoinArmyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApproveJoinArmyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLeaveArmyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLeaveArmyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinCountryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinCountryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLeaveCountryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLeaveCountryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCountryAssignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCountryAssignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgArmyAssignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgArmyAssignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCountryInofNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCountryInofNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCallWarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCallWarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCallWarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCallWarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCallWarInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCallWarInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCallWarInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCallWarInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExchangeMoneyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExchangeMoneyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExchangeMoneyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExchangeMoneyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterCityVisionNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterCityVisionNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgOutofCityVisionNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgOutofCityVisionNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCityInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCityInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterCityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterCityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterCityAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterCityAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCountryBattleEndNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCountryBattleEndNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCountryBattleStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCountryBattleStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSystemHintNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSystemHintNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReconnectAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReconnectAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTriggerMonsterNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTriggerMonsterNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeRoleModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeRoleModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleAttrChangeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleAttrChangeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterId_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMonsterListNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMonsterListNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReleaseSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReleaseSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReleaseSkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReleaseSkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReleaseSkillNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReleaseSkillNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeModeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeModeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeModeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeModeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKillNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKillNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCancelPlayerKillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCancelPlayerKillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCancelPlayerKillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCancelPlayerKillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCancelPlayerKillNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCancelPlayerKillNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKillAnswerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKillAnswerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKillAnswerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKillAnswerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKillAnswerNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKillAnswerNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterFightAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterFightAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryAgainstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryAgainstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryAgainstAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryAgainstAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAreaIdNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAreaIdNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMonsterLanguageNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMonsterLanguageNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDeadNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDeadNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRiviveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRiviveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRiviveNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRiviveNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_PK_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OFFICER_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArmyOfficerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* COUNTRY_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CITY_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ROLE_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ROLE_ATTR_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TARGET_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_PKRESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RIVIVE_MODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_IGame_2eproto() {
  protobuf_AddDesc_IGame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IGame.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHeartBeat_descriptor_ = file->message_type(0);
  static const int MsgHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeartBeat, lastsendtime_),
  };
  MsgHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeartBeat_descriptor_,
      MsgHeartBeat::default_instance_,
      MsgHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeartBeat));
  MsgLoginReq_descriptor_ = file->message_type(1);
  static const int MsgLoginReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginReq, loginname_),
  };
  MsgLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginReq_descriptor_,
      MsgLoginReq::default_instance_,
      MsgLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginReq));
  RoleInfo_descriptor_ = file->message_type(2);
  static const int RoleInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, army_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, army_member_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, army_officer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, offices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, pkmode_),
  };
  RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfo_descriptor_,
      RoleInfo::default_instance_,
      RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfo));
  ServerInfo_descriptor_ = file->message_type(3);
  static const int ServerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, zonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, serverstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, roleslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, lastupdatetime_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  MsgLoginAck_descriptor_ = file->message_type(4);
  static const int MsgLoginAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginAck, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginAck, serverslist_),
  };
  MsgLoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginAck_descriptor_,
      MsgLoginAck::default_instance_,
      MsgLoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginAck));
  MsgCreateRoleReq_descriptor_ = file->message_type(5);
  static const int MsgCreateRoleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, role_),
  };
  MsgCreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateRoleReq_descriptor_,
      MsgCreateRoleReq::default_instance_,
      MsgCreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateRoleReq));
  MsgCreateRoleAck_descriptor_ = file->message_type(6);
  static const int MsgCreateRoleAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleAck, role_),
  };
  MsgCreateRoleAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateRoleAck_descriptor_,
      MsgCreateRoleAck::default_instance_,
      MsgCreateRoleAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateRoleAck));
  MsgSelectRoleReq_descriptor_ = file->message_type(7);
  static const int MsgSelectRoleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleReq, roleid_),
  };
  MsgSelectRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSelectRoleReq_descriptor_,
      MsgSelectRoleReq::default_instance_,
      MsgSelectRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSelectRoleReq));
  MsgSelectRoleAck_descriptor_ = file->message_type(8);
  static const int MsgSelectRoleAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleAck, role_),
  };
  MsgSelectRoleAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSelectRoleAck_descriptor_,
      MsgSelectRoleAck::default_instance_,
      MsgSelectRoleAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectRoleAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSelectRoleAck));
  MsgEnterSceneNtf_descriptor_ = file->message_type(9);
  static const int MsgEnterSceneNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneNtf, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneNtf, roleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneNtf, mapid_),
  };
  MsgEnterSceneNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterSceneNtf_descriptor_,
      MsgEnterSceneNtf::default_instance_,
      MsgEnterSceneNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterSceneNtf));
  MsgEnterSceneReq_descriptor_ = file->message_type(10);
  static const int MsgEnterSceneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneReq, sceneid_),
  };
  MsgEnterSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterSceneReq_descriptor_,
      MsgEnterSceneReq::default_instance_,
      MsgEnterSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterSceneReq));
  MsgJumpSceneReq_descriptor_ = file->message_type(11);
  static const int MsgJumpSceneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneReq, mapid_),
  };
  MsgJumpSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJumpSceneReq_descriptor_,
      MsgJumpSceneReq::default_instance_,
      MsgJumpSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJumpSceneReq));
  MsgJumpSceneNtf_descriptor_ = file->message_type(12);
  static const int MsgJumpSceneNtf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, cityid_),
  };
  MsgJumpSceneNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJumpSceneNtf_descriptor_,
      MsgJumpSceneNtf::default_instance_,
      MsgJumpSceneNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJumpSceneNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJumpSceneNtf));
  SceneRoleInfo_descriptor_ = file->message_type(13);
  static const int SceneRoleInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, to_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, to_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, rolemode_),
  };
  SceneRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRoleInfo_descriptor_,
      SceneRoleInfo::default_instance_,
      SceneRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRoleInfo));
  MsgRoleIntoVisionNtf_descriptor_ = file->message_type(14);
  static const int MsgRoleIntoVisionNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleIntoVisionNtf, roleslist_),
  };
  MsgRoleIntoVisionNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleIntoVisionNtf_descriptor_,
      MsgRoleIntoVisionNtf::default_instance_,
      MsgRoleIntoVisionNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleIntoVisionNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleIntoVisionNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleIntoVisionNtf));
  MsgRoleOutofVisionNtf_descriptor_ = file->message_type(15);
  static const int MsgRoleOutofVisionNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleOutofVisionNtf, roleid_),
  };
  MsgRoleOutofVisionNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleOutofVisionNtf_descriptor_,
      MsgRoleOutofVisionNtf::default_instance_,
      MsgRoleOutofVisionNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleOutofVisionNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleOutofVisionNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleOutofVisionNtf));
  Pos_descriptor_ = file->message_type(16);
  static const int Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, y_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
  MsgActionReq_descriptor_ = file->message_type(17);
  static const int MsgActionReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionReq, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionReq, poses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionReq, direction_),
  };
  MsgActionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgActionReq_descriptor_,
      MsgActionReq::default_instance_,
      MsgActionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgActionReq));
  MsgActionNtf_descriptor_ = file->message_type(18);
  static const int MsgActionNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionNtf, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionNtf, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionNtf, desposes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionNtf, direction_),
  };
  MsgActionNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgActionNtf_descriptor_,
      MsgActionNtf::default_instance_,
      MsgActionNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgActionNtf));
  HeroInfo_descriptor_ = file->message_type(19);
  static const int HeroInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, exp_),
  };
  HeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroInfo_descriptor_,
      HeroInfo::default_instance_,
      HeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroInfo));
  FightAttr_descriptor_ = file->message_type(20);
  static const int FightAttr_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, phy_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, phy_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, magic_defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, rage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, anti_crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, critdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, escape_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, break_parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, parry_anti_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, damage_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, damage_dec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, fighting_),
  };
  FightAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightAttr_descriptor_,
      FightAttr::default_instance_,
      FightAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightAttr));
  BaseAttr_descriptor_ = file->message_type(21);
  static const int BaseAttr_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, species_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, in_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, fight_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, break_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, destiny_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, unique_id_),
  };
  BaseAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseAttr_descriptor_,
      BaseAttr::default_instance_,
      BaseAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseAttr));
  MsgHeroAttr_descriptor_ = file->message_type(22);
  static const int MsgHeroAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeroAttr, hero_attrs_),
  };
  MsgHeroAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeroAttr_descriptor_,
      MsgHeroAttr::default_instance_,
      MsgHeroAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeroAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeroAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeroAttr));
  TaskState_descriptor_ = file->message_type(23);
  static const int TaskState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, accept_time_),
  };
  TaskState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskState_descriptor_,
      TaskState::default_instance_,
      TaskState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskState));
  MsgTaskListNfy_descriptor_ = file->message_type(24);
  static const int MsgTaskListNfy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskListNfy, task_list_),
  };
  MsgTaskListNfy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTaskListNfy_descriptor_,
      MsgTaskListNfy::default_instance_,
      MsgTaskListNfy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskListNfy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskListNfy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTaskListNfy));
  MsgAcceptTaskReq_descriptor_ = file->message_type(25);
  static const int MsgAcceptTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAcceptTaskReq, task_id_),
  };
  MsgAcceptTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAcceptTaskReq_descriptor_,
      MsgAcceptTaskReq::default_instance_,
      MsgAcceptTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAcceptTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAcceptTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAcceptTaskReq));
  MsgAcceptTaskAck_descriptor_ = file->message_type(26);
  static const int MsgAcceptTaskAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAcceptTaskAck, task_),
  };
  MsgAcceptTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAcceptTaskAck_descriptor_,
      MsgAcceptTaskAck::default_instance_,
      MsgAcceptTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAcceptTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAcceptTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAcceptTaskAck));
  MsgCommitTaskReq_descriptor_ = file->message_type(27);
  static const int MsgCommitTaskReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskReq, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskReq, param_),
  };
  MsgCommitTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCommitTaskReq_descriptor_,
      MsgCommitTaskReq::default_instance_,
      MsgCommitTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCommitTaskReq));
  MsgCommitTaskAck_descriptor_ = file->message_type(28);
  static const int MsgCommitTaskAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskAck, task_),
  };
  MsgCommitTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCommitTaskAck_descriptor_,
      MsgCommitTaskAck::default_instance_,
      MsgCommitTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommitTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCommitTaskAck));
  MsgDropTaskReq_descriptor_ = file->message_type(29);
  static const int MsgDropTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDropTaskReq, task_id_),
  };
  MsgDropTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDropTaskReq_descriptor_,
      MsgDropTaskReq::default_instance_,
      MsgDropTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDropTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDropTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDropTaskReq));
  MsgDropTaskAck_descriptor_ = file->message_type(30);
  static const int MsgDropTaskAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDropTaskAck, task_),
  };
  MsgDropTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDropTaskAck_descriptor_,
      MsgDropTaskAck::default_instance_,
      MsgDropTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDropTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDropTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDropTaskAck));
  MsgTaskChangeNfy_descriptor_ = file->message_type(31);
  static const int MsgTaskChangeNfy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskChangeNfy, task_changed_),
  };
  MsgTaskChangeNfy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTaskChangeNfy_descriptor_,
      MsgTaskChangeNfy::default_instance_,
      MsgTaskChangeNfy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskChangeNfy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskChangeNfy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTaskChangeNfy));
  MsgGmCmdReq_descriptor_ = file->message_type(32);
  static const int MsgGmCmdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGmCmdReq, cmd_),
  };
  MsgGmCmdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGmCmdReq_descriptor_,
      MsgGmCmdReq::default_instance_,
      MsgGmCmdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGmCmdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGmCmdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGmCmdReq));
  MsgGmCmdAck_descriptor_ = file->message_type(33);
  static const int MsgGmCmdAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGmCmdAck, param_),
  };
  MsgGmCmdAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGmCmdAck_descriptor_,
      MsgGmCmdAck::default_instance_,
      MsgGmCmdAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGmCmdAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGmCmdAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGmCmdAck));
  FormPair_descriptor_ = file->message_type(34);
  static const int FormPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormPair, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormPair, uniqueid_),
  };
  FormPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormPair_descriptor_,
      FormPair::default_instance_,
      FormPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormPair));
  Formation_descriptor_ = file->message_type(35);
  static const int Formation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, formid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, form_),
  };
  Formation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Formation_descriptor_,
      Formation::default_instance_,
      Formation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Formation));
  MsgSaveFormation_descriptor_ = file->message_type(36);
  static const int MsgSaveFormation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormation, form_),
  };
  MsgSaveFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSaveFormation_descriptor_,
      MsgSaveFormation::default_instance_,
      MsgSaveFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSaveFormation));
  MsgSaveFormationAck_descriptor_ = file->message_type(37);
  static const int MsgSaveFormationAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormationAck, formid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormationAck, status_),
  };
  MsgSaveFormationAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSaveFormationAck_descriptor_,
      MsgSaveFormationAck::default_instance_,
      MsgSaveFormationAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormationAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveFormationAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSaveFormationAck));
  MsgFormationNty_descriptor_ = file->message_type(38);
  static const int MsgFormationNty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormationNty, currentformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormationNty, forms_),
  };
  MsgFormationNty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFormationNty_descriptor_,
      MsgFormationNty::default_instance_,
      MsgFormationNty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormationNty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormationNty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFormationNty));
  MsgAttrChangeNfy_descriptor_ = file->message_type(39);
  static const int MsgAttrChangeNfy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttrChangeNfy, attr_),
  };
  MsgAttrChangeNfy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAttrChangeNfy_descriptor_,
      MsgAttrChangeNfy::default_instance_,
      MsgAttrChangeNfy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttrChangeNfy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttrChangeNfy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAttrChangeNfy));
  MonsterUnit_descriptor_ = file->message_type(40);
  static const int MonsterUnit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterUnit, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterUnit, count_),
  };
  MonsterUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterUnit_descriptor_,
      MonsterUnit::default_instance_,
      MonsterUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterUnit));
  MsgKillMonster_descriptor_ = file->message_type(41);
  static const int MsgKillMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKillMonster, killed_monsters_),
  };
  MsgKillMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKillMonster_descriptor_,
      MsgKillMonster::default_instance_,
      MsgKillMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKillMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKillMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKillMonster));
  ItemBaseInfo_descriptor_ = file->message_type(42);
  static const int ItemBaseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseInfo, is_wear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseInfo, unique_id_),
  };
  ItemBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBaseInfo_descriptor_,
      ItemBaseInfo::default_instance_,
      ItemBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBaseInfo));
  ItemExtraInfo_descriptor_ = file->message_type(43);
  static const int ItemExtraInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemExtraInfo, fighting_),
  };
  ItemExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemExtraInfo_descriptor_,
      ItemExtraInfo::default_instance_,
      ItemExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemExtraInfo));
  ItemInfo_descriptor_ = file->message_type(44);
  static const int ItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, extra_info_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  MsgGetBagItemsNfy_descriptor_ = file->message_type(45);
  static const int MsgGetBagItemsNfy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBagItemsNfy, items_),
  };
  MsgGetBagItemsNfy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetBagItemsNfy_descriptor_,
      MsgGetBagItemsNfy::default_instance_,
      MsgGetBagItemsNfy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBagItemsNfy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBagItemsNfy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetBagItemsNfy));
  MsgItemsChangedNfy_descriptor_ = file->message_type(46);
  static const int MsgItemsChangedNfy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemsChangedNfy, items_),
  };
  MsgItemsChangedNfy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgItemsChangedNfy_descriptor_,
      MsgItemsChangedNfy::default_instance_,
      MsgItemsChangedNfy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemsChangedNfy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemsChangedNfy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgItemsChangedNfy));
  MsgUseBagItemReq_descriptor_ = file->message_type(47);
  static const int MsgUseBagItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemReq, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemReq, count_),
  };
  MsgUseBagItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUseBagItemReq_descriptor_,
      MsgUseBagItemReq::default_instance_,
      MsgUseBagItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUseBagItemReq));
  MsgUseBagItemAck_descriptor_ = file->message_type(48);
  static const int MsgUseBagItemAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemAck, status_),
  };
  MsgUseBagItemAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUseBagItemAck_descriptor_,
      MsgUseBagItemAck::default_instance_,
      MsgUseBagItemAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseBagItemAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUseBagItemAck));
  FightSide_descriptor_ = file->message_type(49);
  static const int FightSide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSide, hero_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSide, forms_),
  };
  FightSide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightSide_descriptor_,
      FightSide::default_instance_,
      FightSide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightSide));
  MsgMonsterAgainstReq_descriptor_ = file->message_type(50);
  static const int MsgMonsterAgainstReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstReq, againstformid_),
  };
  MsgMonsterAgainstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMonsterAgainstReq_descriptor_,
      MsgMonsterAgainstReq::default_instance_,
      MsgMonsterAgainstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMonsterAgainstReq));
  MsgMonsterAgainstAck_descriptor_ = file->message_type(51);
  static const int MsgMonsterAgainstAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstAck, againstformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstAck, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstAck, enemyside_),
  };
  MsgMonsterAgainstAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMonsterAgainstAck_descriptor_,
      MsgMonsterAgainstAck::default_instance_,
      MsgMonsterAgainstAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterAgainstAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMonsterAgainstAck));
  MsgPvpReq_descriptor_ = file->message_type(52);
  static const int MsgPvpReq_offsets_[1] = {
  };
  MsgPvpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvpReq_descriptor_,
      MsgPvpReq::default_instance_,
      MsgPvpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvpReq));
  MsgPvpAck_descriptor_ = file->message_type(53);
  static const int MsgPvpAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpAck, status_),
  };
  MsgPvpAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvpAck_descriptor_,
      MsgPvpAck::default_instance_,
      MsgPvpAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvpAck));
  MsgPvpCancelReq_descriptor_ = file->message_type(54);
  static const int MsgPvpCancelReq_offsets_[1] = {
  };
  MsgPvpCancelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvpCancelReq_descriptor_,
      MsgPvpCancelReq::default_instance_,
      MsgPvpCancelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpCancelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpCancelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvpCancelReq));
  MsgPvpNtf_descriptor_ = file->message_type(55);
  static const int MsgPvpNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpNtf, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpNtf, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpNtf, enemyside_),
  };
  MsgPvpNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvpNtf_descriptor_,
      MsgPvpNtf::default_instance_,
      MsgPvpNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvpNtf));
  MsgLoadFightResProgressReq_descriptor_ = file->message_type(56);
  static const int MsgLoadFightResProgressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressReq, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressReq, progress_),
  };
  MsgLoadFightResProgressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoadFightResProgressReq_descriptor_,
      MsgLoadFightResProgressReq::default_instance_,
      MsgLoadFightResProgressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoadFightResProgressReq));
  MsgLoadFightResProgressNtf_descriptor_ = file->message_type(57);
  static const int MsgLoadFightResProgressNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressNtf, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressNtf, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressNtf, progress_),
  };
  MsgLoadFightResProgressNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoadFightResProgressNtf_descriptor_,
      MsgLoadFightResProgressNtf::default_instance_,
      MsgLoadFightResProgressNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadFightResProgressNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoadFightResProgressNtf));
  MsgFightStartReq_descriptor_ = file->message_type(58);
  static const int MsgFightStartReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightStartReq, fightid_),
  };
  MsgFightStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFightStartReq_descriptor_,
      MsgFightStartReq::default_instance_,
      MsgFightStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFightStartReq));
  MsgFightStartNtf_descriptor_ = file->message_type(59);
  static const int MsgFightStartNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightStartNtf, fightid_),
  };
  MsgFightStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFightStartNtf_descriptor_,
      MsgFightStartNtf::default_instance_,
      MsgFightStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFightStartNtf));
  MsgFightEndReq_descriptor_ = file->message_type(60);
  static const int MsgFightEndReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndReq, fightid_),
  };
  MsgFightEndReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFightEndReq_descriptor_,
      MsgFightEndReq::default_instance_,
      MsgFightEndReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFightEndReq));
  MsgFightEndNtf_descriptor_ = file->message_type(61);
  static const int MsgFightEndNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndNtf, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndNtf, result_),
  };
  MsgFightEndNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFightEndNtf_descriptor_,
      MsgFightEndNtf::default_instance_,
      MsgFightEndNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightEndNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFightEndNtf));
  SkillInfo_descriptor_ = file->message_type(62);
  static const int SkillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, src_hero_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, posids_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  DamageInfo_descriptor_ = file->message_type(63);
  static const int DamageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageInfo, src_hero_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageInfo, damageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageInfo, posids_),
  };
  DamageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DamageInfo_descriptor_,
      DamageInfo::default_instance_,
      DamageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DamageInfo));
  BuffInfo_descriptor_ = file->message_type(64);
  static const int BuffInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, src_hero_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, posids_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  AttackInfo_descriptor_ = file->message_type(65);
  static const int AttackInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackInfo, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackInfo, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackInfo, damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackInfo, buffs_),
  };
  AttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackInfo_descriptor_,
      AttackInfo::default_instance_,
      AttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackInfo));
  MsgAttackReq_descriptor_ = file->message_type(66);
  static const int MsgAttackReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackReq, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackReq, attackinfo_),
  };
  MsgAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAttackReq_descriptor_,
      MsgAttackReq::default_instance_,
      MsgAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAttackReq));
  MsgAttackAck_descriptor_ = file->message_type(67);
  static const int MsgAttackAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackAck, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackAck, status_),
  };
  MsgAttackAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAttackAck_descriptor_,
      MsgAttackAck::default_instance_,
      MsgAttackAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAttackAck));
  MsgAttackNtf_descriptor_ = file->message_type(68);
  static const int MsgAttackNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackNtf, attackinfo_),
  };
  MsgAttackNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAttackNtf_descriptor_,
      MsgAttackNtf::default_instance_,
      MsgAttackNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAttackNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAttackNtf));
  MsgRoundStartReq_descriptor_ = file->message_type(69);
  static const int MsgRoundStartReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoundStartReq, fightid_),
  };
  MsgRoundStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoundStartReq_descriptor_,
      MsgRoundStartReq::default_instance_,
      MsgRoundStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoundStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoundStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoundStartReq));
  MsgRoundEndReq_descriptor_ = file->message_type(70);
  static const int MsgRoundEndReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoundEndReq, fightid_),
  };
  MsgRoundEndReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoundEndReq_descriptor_,
      MsgRoundEndReq::default_instance_,
      MsgRoundEndReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoundEndReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoundEndReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoundEndReq));
  MsgBuildInfoNtf_descriptor_ = file->message_type(71);
  static const int MsgBuildInfoNtf_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, copperlefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, tasklefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, isstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, heroids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, lefttimes_),
  };
  MsgBuildInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBuildInfoNtf_descriptor_,
      MsgBuildInfoNtf::default_instance_,
      MsgBuildInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBuildInfoNtf));
  MsgGetBuildCoppperReq_descriptor_ = file->message_type(72);
  static const int MsgGetBuildCoppperReq_offsets_[1] = {
  };
  MsgGetBuildCoppperReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetBuildCoppperReq_descriptor_,
      MsgGetBuildCoppperReq::default_instance_,
      MsgGetBuildCoppperReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBuildCoppperReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBuildCoppperReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetBuildCoppperReq));
  MsgGetBuildCoppperAck_descriptor_ = file->message_type(73);
  static const int MsgGetBuildCoppperAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBuildCoppperAck, count_),
  };
  MsgGetBuildCoppperAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetBuildCoppperAck_descriptor_,
      MsgGetBuildCoppperAck::default_instance_,
      MsgGetBuildCoppperAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBuildCoppperAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetBuildCoppperAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetBuildCoppperAck));
  MsgUpgradeInteriorBuildReq_descriptor_ = file->message_type(74);
  static const int MsgUpgradeInteriorBuildReq_offsets_[1] = {
  };
  MsgUpgradeInteriorBuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpgradeInteriorBuildReq_descriptor_,
      MsgUpgradeInteriorBuildReq::default_instance_,
      MsgUpgradeInteriorBuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeInteriorBuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeInteriorBuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpgradeInteriorBuildReq));
  MsgUpgradeInteriorBuildAck_descriptor_ = file->message_type(75);
  static const int MsgUpgradeInteriorBuildAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeInteriorBuildAck, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeInteriorBuildAck, status_),
  };
  MsgUpgradeInteriorBuildAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpgradeInteriorBuildAck_descriptor_,
      MsgUpgradeInteriorBuildAck::default_instance_,
      MsgUpgradeInteriorBuildAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeInteriorBuildAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeInteriorBuildAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpgradeInteriorBuildAck));
  MsgInteriorTaskFinishedNtf_descriptor_ = file->message_type(76);
  static const int MsgInteriorTaskFinishedNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInteriorTaskFinishedNtf, taskid_),
  };
  MsgInteriorTaskFinishedNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInteriorTaskFinishedNtf_descriptor_,
      MsgInteriorTaskFinishedNtf::default_instance_,
      MsgInteriorTaskFinishedNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInteriorTaskFinishedNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInteriorTaskFinishedNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInteriorTaskFinishedNtf));
  MsgDispatchTaskReq_descriptor_ = file->message_type(77);
  static const int MsgDispatchTaskReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskReq, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskReq, task_star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskReq, heroids_),
  };
  MsgDispatchTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDispatchTaskReq_descriptor_,
      MsgDispatchTaskReq::default_instance_,
      MsgDispatchTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDispatchTaskReq));
  MsgDispatchTaskAck_descriptor_ = file->message_type(78);
  static const int MsgDispatchTaskAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskAck, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskAck, task_star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskAck, heroids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskAck, status_),
  };
  MsgDispatchTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDispatchTaskAck_descriptor_,
      MsgDispatchTaskAck::default_instance_,
      MsgDispatchTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatchTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDispatchTaskAck));
  MsgRefreshTaskReq_descriptor_ = file->message_type(79);
  static const int MsgRefreshTaskReq_offsets_[1] = {
  };
  MsgRefreshTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRefreshTaskReq_descriptor_,
      MsgRefreshTaskReq::default_instance_,
      MsgRefreshTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRefreshTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRefreshTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRefreshTaskReq));
  MsgRefreshTaskAck_descriptor_ = file->message_type(80);
  static const int MsgRefreshTaskAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRefreshTaskAck, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRefreshTaskAck, taskstarlevel_),
  };
  MsgRefreshTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRefreshTaskAck_descriptor_,
      MsgRefreshTaskAck::default_instance_,
      MsgRefreshTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRefreshTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRefreshTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRefreshTaskAck));
  MsgUpgradeTaskStarLevelReq_descriptor_ = file->message_type(81);
  static const int MsgUpgradeTaskStarLevelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeTaskStarLevelReq, starlevel_),
  };
  MsgUpgradeTaskStarLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpgradeTaskStarLevelReq_descriptor_,
      MsgUpgradeTaskStarLevelReq::default_instance_,
      MsgUpgradeTaskStarLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeTaskStarLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeTaskStarLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpgradeTaskStarLevelReq));
  MsgUpgradeTaskStarLevelAck_descriptor_ = file->message_type(82);
  static const int MsgUpgradeTaskStarLevelAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeTaskStarLevelAck, starlevel_),
  };
  MsgUpgradeTaskStarLevelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpgradeTaskStarLevelAck_descriptor_,
      MsgUpgradeTaskStarLevelAck::default_instance_,
      MsgUpgradeTaskStarLevelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeTaskStarLevelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeTaskStarLevelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpgradeTaskStarLevelAck));
  MsgGetInteriorRewardReq_descriptor_ = file->message_type(83);
  static const int MsgGetInteriorRewardReq_offsets_[1] = {
  };
  MsgGetInteriorRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetInteriorRewardReq_descriptor_,
      MsgGetInteriorRewardReq::default_instance_,
      MsgGetInteriorRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetInteriorRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetInteriorRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetInteriorRewardReq));
  MsgGetInteriorRewardAck_descriptor_ = file->message_type(84);
  static const int MsgGetInteriorRewardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetInteriorRewardAck, status_),
  };
  MsgGetInteriorRewardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetInteriorRewardAck_descriptor_,
      MsgGetInteriorRewardAck::default_instance_,
      MsgGetInteriorRewardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetInteriorRewardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetInteriorRewardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetInteriorRewardAck));
  MsgCompleteInteriorTaskReq_descriptor_ = file->message_type(85);
  static const int MsgCompleteInteriorTaskReq_offsets_[1] = {
  };
  MsgCompleteInteriorTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCompleteInteriorTaskReq_descriptor_,
      MsgCompleteInteriorTaskReq::default_instance_,
      MsgCompleteInteriorTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteInteriorTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteInteriorTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCompleteInteriorTaskReq));
  MsgCompleteInteriorTaskAck_descriptor_ = file->message_type(86);
  static const int MsgCompleteInteriorTaskAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteInteriorTaskAck, status_),
  };
  MsgCompleteInteriorTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCompleteInteriorTaskAck_descriptor_,
      MsgCompleteInteriorTaskAck::default_instance_,
      MsgCompleteInteriorTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteInteriorTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteInteriorTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCompleteInteriorTaskAck));
  MsgCreateArmyReq_descriptor_ = file->message_type(87);
  static const int MsgCreateArmyReq_offsets_[1] = {
  };
  MsgCreateArmyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateArmyReq_descriptor_,
      MsgCreateArmyReq::default_instance_,
      MsgCreateArmyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateArmyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateArmyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateArmyReq));
  MsgCreateArmyAck_descriptor_ = file->message_type(88);
  static const int MsgCreateArmyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateArmyAck, id_),
  };
  MsgCreateArmyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateArmyAck_descriptor_,
      MsgCreateArmyAck::default_instance_,
      MsgCreateArmyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateArmyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateArmyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateArmyAck));
  MsgJoinArmyReq_descriptor_ = file->message_type(89);
  static const int MsgJoinArmyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyReq, id_),
  };
  MsgJoinArmyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinArmyReq_descriptor_,
      MsgJoinArmyReq::default_instance_,
      MsgJoinArmyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinArmyReq));
  MsgJoinArmyAck_descriptor_ = file->message_type(90);
  static const int MsgJoinArmyAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyAck, status_),
  };
  MsgJoinArmyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinArmyAck_descriptor_,
      MsgJoinArmyAck::default_instance_,
      MsgJoinArmyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinArmyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinArmyAck));
  MsgApproveJoinArmyReq_descriptor_ = file->message_type(91);
  static const int MsgApproveJoinArmyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApproveJoinArmyReq, rolename_),
  };
  MsgApproveJoinArmyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApproveJoinArmyReq_descriptor_,
      MsgApproveJoinArmyReq::default_instance_,
      MsgApproveJoinArmyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApproveJoinArmyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApproveJoinArmyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApproveJoinArmyReq));
  MsgApproveJoinArmyAck_descriptor_ = file->message_type(92);
  static const int MsgApproveJoinArmyAck_offsets_[1] = {
  };
  MsgApproveJoinArmyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApproveJoinArmyAck_descriptor_,
      MsgApproveJoinArmyAck::default_instance_,
      MsgApproveJoinArmyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApproveJoinArmyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApproveJoinArmyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApproveJoinArmyAck));
  MsgLeaveArmyReq_descriptor_ = file->message_type(93);
  static const int MsgLeaveArmyReq_offsets_[1] = {
  };
  MsgLeaveArmyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLeaveArmyReq_descriptor_,
      MsgLeaveArmyReq::default_instance_,
      MsgLeaveArmyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveArmyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveArmyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLeaveArmyReq));
  MsgJoinCountryReq_descriptor_ = file->message_type(94);
  static const int MsgJoinCountryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinCountryReq, id_),
  };
  MsgJoinCountryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinCountryReq_descriptor_,
      MsgJoinCountryReq::default_instance_,
      MsgJoinCountryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinCountryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinCountryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinCountryReq));
  MsgLeaveCountryReq_descriptor_ = file->message_type(95);
  static const int MsgLeaveCountryReq_offsets_[1] = {
  };
  MsgLeaveCountryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLeaveCountryReq_descriptor_,
      MsgLeaveCountryReq::default_instance_,
      MsgLeaveCountryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveCountryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveCountryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLeaveCountryReq));
  MsgCountryAssignReq_descriptor_ = file->message_type(96);
  static const int MsgCountryAssignReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryAssignReq, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryAssignReq, office_),
  };
  MsgCountryAssignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCountryAssignReq_descriptor_,
      MsgCountryAssignReq::default_instance_,
      MsgCountryAssignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryAssignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryAssignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCountryAssignReq));
  MsgArmyAssignReq_descriptor_ = file->message_type(97);
  static const int MsgArmyAssignReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArmyAssignReq, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArmyAssignReq, office_),
  };
  MsgArmyAssignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgArmyAssignReq_descriptor_,
      MsgArmyAssignReq::default_instance_,
      MsgArmyAssignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArmyAssignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgArmyAssignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgArmyAssignReq));
  officer_descriptor_ = file->message_type(98);
  static const int officer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer, officetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer, rolename_),
  };
  officer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_descriptor_,
      officer::default_instance_,
      officer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer));
  ArmyInfo_descriptor_ = file->message_type(99);
  static const int ArmyInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, newbies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, appliers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, officers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, general_),
  };
  ArmyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmyInfo_descriptor_,
      ArmyInfo::default_instance_,
      ArmyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmyInfo));
  CountryInfo_descriptor_ = file->message_type(100);
  static const int CountryInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, armies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, enemies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, officers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, kingname_),
  };
  CountryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryInfo_descriptor_,
      CountryInfo::default_instance_,
      CountryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryInfo));
  MsgCountryInofNtf_descriptor_ = file->message_type(101);
  static const int MsgCountryInofNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryInofNtf, countries_),
  };
  MsgCountryInofNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCountryInofNtf_descriptor_,
      MsgCountryInofNtf::default_instance_,
      MsgCountryInofNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryInofNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryInofNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCountryInofNtf));
  MsgCallWarReq_descriptor_ = file->message_type(102);
  static const int MsgCallWarReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarReq, countryid_),
  };
  MsgCallWarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCallWarReq_descriptor_,
      MsgCallWarReq::default_instance_,
      MsgCallWarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCallWarReq));
  MsgCallWarAck_descriptor_ = file->message_type(103);
  static const int MsgCallWarAck_offsets_[1] = {
  };
  MsgCallWarAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCallWarAck_descriptor_,
      MsgCallWarAck::default_instance_,
      MsgCallWarAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCallWarAck));
  CallWarInfo_descriptor_ = file->message_type(104);
  static const int CallWarInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallWarInfo, active_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallWarInfo, passive_id_),
  };
  CallWarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallWarInfo_descriptor_,
      CallWarInfo::default_instance_,
      CallWarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallWarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallWarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallWarInfo));
  MsgCallWarInfoReq_descriptor_ = file->message_type(105);
  static const int MsgCallWarInfoReq_offsets_[1] = {
  };
  MsgCallWarInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCallWarInfoReq_descriptor_,
      MsgCallWarInfoReq::default_instance_,
      MsgCallWarInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCallWarInfoReq));
  MsgCallWarInfoAck_descriptor_ = file->message_type(106);
  static const int MsgCallWarInfoAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarInfoAck, call_war_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarInfoAck, timeleft_),
  };
  MsgCallWarInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCallWarInfoAck_descriptor_,
      MsgCallWarInfoAck::default_instance_,
      MsgCallWarInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallWarInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCallWarInfoAck));
  MsgExchangeMoneyReq_descriptor_ = file->message_type(107);
  static const int MsgExchangeMoneyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyReq, sourcemoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyReq, sourcemoneycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyReq, destmoneytype_),
  };
  MsgExchangeMoneyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExchangeMoneyReq_descriptor_,
      MsgExchangeMoneyReq::default_instance_,
      MsgExchangeMoneyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExchangeMoneyReq));
  MsgExchangeMoneyAck_descriptor_ = file->message_type(108);
  static const int MsgExchangeMoneyAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, totalgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, totalsilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, totalcopper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, changedgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, changedsilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, changedcopper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, status_),
  };
  MsgExchangeMoneyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExchangeMoneyAck_descriptor_,
      MsgExchangeMoneyAck::default_instance_,
      MsgExchangeMoneyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExchangeMoneyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExchangeMoneyAck));
  HpInfo_descriptor_ = file->message_type(109);
  static const int HpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HpInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HpInfo, hp_),
  };
  HpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HpInfo_descriptor_,
      HpInfo::default_instance_,
      HpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HpInfo));
  CityInfo_descriptor_ = file->message_type(110);
  static const int CityInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, isself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, hp_),
  };
  CityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityInfo_descriptor_,
      CityInfo::default_instance_,
      CityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityInfo));
  MsgEnterCityVisionNtf_descriptor_ = file->message_type(111);
  static const int MsgEnterCityVisionNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityVisionNtf, city_),
  };
  MsgEnterCityVisionNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterCityVisionNtf_descriptor_,
      MsgEnterCityVisionNtf::default_instance_,
      MsgEnterCityVisionNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityVisionNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityVisionNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterCityVisionNtf));
  MsgOutofCityVisionNtf_descriptor_ = file->message_type(112);
  static const int MsgOutofCityVisionNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutofCityVisionNtf, cityid_),
  };
  MsgOutofCityVisionNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgOutofCityVisionNtf_descriptor_,
      MsgOutofCityVisionNtf::default_instance_,
      MsgOutofCityVisionNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutofCityVisionNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutofCityVisionNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgOutofCityVisionNtf));
  MsgCityInfoNtf_descriptor_ = file->message_type(113);
  static const int MsgCityInfoNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCityInfoNtf, city_),
  };
  MsgCityInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCityInfoNtf_descriptor_,
      MsgCityInfoNtf::default_instance_,
      MsgCityInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCityInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCityInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCityInfoNtf));
  MsgEnterCityReq_descriptor_ = file->message_type(114);
  static const int MsgEnterCityReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityReq, cityid_),
  };
  MsgEnterCityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterCityReq_descriptor_,
      MsgEnterCityReq::default_instance_,
      MsgEnterCityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterCityReq));
  MsgEnterCityAck_descriptor_ = file->message_type(115);
  static const int MsgEnterCityAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityAck, cityid_),
  };
  MsgEnterCityAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterCityAck_descriptor_,
      MsgEnterCityAck::default_instance_,
      MsgEnterCityAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterCityAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterCityAck));
  MsgCountryBattleEndNtf_descriptor_ = file->message_type(116);
  static const int MsgCountryBattleEndNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryBattleEndNtf, msg_),
  };
  MsgCountryBattleEndNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCountryBattleEndNtf_descriptor_,
      MsgCountryBattleEndNtf::default_instance_,
      MsgCountryBattleEndNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryBattleEndNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryBattleEndNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCountryBattleEndNtf));
  MsgCountryBattleStartNtf_descriptor_ = file->message_type(117);
  static const int MsgCountryBattleStartNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryBattleStartNtf, msg_),
  };
  MsgCountryBattleStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCountryBattleStartNtf_descriptor_,
      MsgCountryBattleStartNtf::default_instance_,
      MsgCountryBattleStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryBattleStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCountryBattleStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCountryBattleStartNtf));
  MsgSystemHintNtf_descriptor_ = file->message_type(118);
  static const int MsgSystemHintNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemHintNtf, proir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemHintNtf, notice_language_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemHintNtf, showpostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemHintNtf, parameters_),
  };
  MsgSystemHintNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSystemHintNtf_descriptor_,
      MsgSystemHintNtf::default_instance_,
      MsgSystemHintNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemHintNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemHintNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSystemHintNtf));
  MsgReconnectReq_descriptor_ = file->message_type(119);
  static const int MsgReconnectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReconnectReq, roleid_),
  };
  MsgReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReconnectReq_descriptor_,
      MsgReconnectReq::default_instance_,
      MsgReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReconnectReq));
  MsgReconnectAck_descriptor_ = file->message_type(120);
  static const int MsgReconnectAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReconnectAck, status_),
  };
  MsgReconnectAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReconnectAck_descriptor_,
      MsgReconnectAck::default_instance_,
      MsgReconnectAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReconnectAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReconnectAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReconnectAck));
  MsgTransReq_descriptor_ = file->message_type(121);
  static const int MsgTransReq_offsets_[1] = {
  };
  MsgTransReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransReq_descriptor_,
      MsgTransReq::default_instance_,
      MsgTransReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransReq));
  MsgTransAck_descriptor_ = file->message_type(122);
  static const int MsgTransAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransAck, status_),
  };
  MsgTransAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransAck_descriptor_,
      MsgTransAck::default_instance_,
      MsgTransAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransAck));
  MsgTriggerMonsterNtf_descriptor_ = file->message_type(123);
  static const int MsgTriggerMonsterNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerMonsterNtf, againstformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerMonsterNtf, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerMonsterNtf, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerMonsterNtf, enemyside_),
  };
  MsgTriggerMonsterNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTriggerMonsterNtf_descriptor_,
      MsgTriggerMonsterNtf::default_instance_,
      MsgTriggerMonsterNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerMonsterNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerMonsterNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTriggerMonsterNtf));
  MsgChangeRoleModeReq_descriptor_ = file->message_type(124);
  static const int MsgChangeRoleModeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeRoleModeReq, rolemode_),
  };
  MsgChangeRoleModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeRoleModeReq_descriptor_,
      MsgChangeRoleModeReq::default_instance_,
      MsgChangeRoleModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeRoleModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeRoleModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeRoleModeReq));
  RoleAttr_descriptor_ = file->message_type(125);
  static const int RoleAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttr, attrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttr, attrval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttr, roleid_),
  };
  RoleAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleAttr_descriptor_,
      RoleAttr::default_instance_,
      RoleAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleAttr));
  MsgRoleAttrChangeNtf_descriptor_ = file->message_type(126);
  static const int MsgRoleAttrChangeNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleAttrChangeNtf, attrs_),
  };
  MsgRoleAttrChangeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleAttrChangeNtf_descriptor_,
      MsgRoleAttrChangeNtf::default_instance_,
      MsgRoleAttrChangeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleAttrChangeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleAttrChangeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleAttrChangeNtf));
  MonsterId_descriptor_ = file->message_type(127);
  static const int MonsterId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterId, creatureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterId, npcid_),
  };
  MonsterId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterId_descriptor_,
      MonsterId::default_instance_,
      MonsterId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterId));
  MsgMonsterListNtf_descriptor_ = file->message_type(128);
  static const int MsgMonsterListNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterListNtf, monsterarray_),
  };
  MsgMonsterListNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMonsterListNtf_descriptor_,
      MsgMonsterListNtf::default_instance_,
      MsgMonsterListNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterListNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterListNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMonsterListNtf));
  MsgReleaseSkillReq_descriptor_ = file->message_type(129);
  static const int MsgReleaseSkillReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, target_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, target_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, target_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, param_),
  };
  MsgReleaseSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReleaseSkillReq_descriptor_,
      MsgReleaseSkillReq::default_instance_,
      MsgReleaseSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReleaseSkillReq));
  MsgReleaseSkillAck_descriptor_ = file->message_type(130);
  static const int MsgReleaseSkillAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillAck, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillAck, result_),
  };
  MsgReleaseSkillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReleaseSkillAck_descriptor_,
      MsgReleaseSkillAck::default_instance_,
      MsgReleaseSkillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReleaseSkillAck));
  MsgReleaseSkillNtf_descriptor_ = file->message_type(131);
  static const int MsgReleaseSkillNtf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, releaser_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, target_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, target_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, target_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, param_),
  };
  MsgReleaseSkillNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReleaseSkillNtf_descriptor_,
      MsgReleaseSkillNtf::default_instance_,
      MsgReleaseSkillNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReleaseSkillNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReleaseSkillNtf));
  MsgChangeModeReq_descriptor_ = file->message_type(132);
  static const int MsgChangeModeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeReq, mode_),
  };
  MsgChangeModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeModeReq_descriptor_,
      MsgChangeModeReq::default_instance_,
      MsgChangeModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeModeReq));
  MsgChangeModeAck_descriptor_ = file->message_type(133);
  static const int MsgChangeModeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeAck, result_),
  };
  MsgChangeModeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeModeAck_descriptor_,
      MsgChangeModeAck::default_instance_,
      MsgChangeModeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeModeAck));
  MsgChangeModeNtf_descriptor_ = file->message_type(134);
  static const int MsgChangeModeNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeNtf, mode_),
  };
  MsgChangeModeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeModeNtf_descriptor_,
      MsgChangeModeNtf::default_instance_,
      MsgChangeModeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeModeNtf));
  MsgPlayerKillReq_descriptor_ = file->message_type(135);
  static const int MsgPlayerKillReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillReq, mode_),
  };
  MsgPlayerKillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKillReq_descriptor_,
      MsgPlayerKillReq::default_instance_,
      MsgPlayerKillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKillReq));
  MsgPlayerKillAck_descriptor_ = file->message_type(136);
  static const int MsgPlayerKillAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAck, result_),
  };
  MsgPlayerKillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKillAck_descriptor_,
      MsgPlayerKillAck::default_instance_,
      MsgPlayerKillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKillAck));
  MsgPlayerKillNtf_descriptor_ = file->message_type(137);
  static const int MsgPlayerKillNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillNtf, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillNtf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillNtf, mode_),
  };
  MsgPlayerKillNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKillNtf_descriptor_,
      MsgPlayerKillNtf::default_instance_,
      MsgPlayerKillNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKillNtf));
  MsgCancelPlayerKillReq_descriptor_ = file->message_type(138);
  static const int MsgCancelPlayerKillReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillReq, mode_),
  };
  MsgCancelPlayerKillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCancelPlayerKillReq_descriptor_,
      MsgCancelPlayerKillReq::default_instance_,
      MsgCancelPlayerKillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCancelPlayerKillReq));
  MsgCancelPlayerKillAck_descriptor_ = file->message_type(139);
  static const int MsgCancelPlayerKillAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillAck, result_),
  };
  MsgCancelPlayerKillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCancelPlayerKillAck_descriptor_,
      MsgCancelPlayerKillAck::default_instance_,
      MsgCancelPlayerKillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCancelPlayerKillAck));
  MsgCancelPlayerKillNtf_descriptor_ = file->message_type(140);
  static const int MsgCancelPlayerKillNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillNtf, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillNtf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillNtf, mode_),
  };
  MsgCancelPlayerKillNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCancelPlayerKillNtf_descriptor_,
      MsgCancelPlayerKillNtf::default_instance_,
      MsgCancelPlayerKillNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelPlayerKillNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCancelPlayerKillNtf));
  MsgPlayerKillAnswerReq_descriptor_ = file->message_type(141);
  static const int MsgPlayerKillAnswerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerReq, answer_type_),
  };
  MsgPlayerKillAnswerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKillAnswerReq_descriptor_,
      MsgPlayerKillAnswerReq::default_instance_,
      MsgPlayerKillAnswerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKillAnswerReq));
  MsgPlayerKillAnswerAck_descriptor_ = file->message_type(142);
  static const int MsgPlayerKillAnswerAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerAck, result_),
  };
  MsgPlayerKillAnswerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKillAnswerAck_descriptor_,
      MsgPlayerKillAnswerAck::default_instance_,
      MsgPlayerKillAnswerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKillAnswerAck));
  MsgPlayerKillAnswerNtf_descriptor_ = file->message_type(143);
  static const int MsgPlayerKillAnswerNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerNtf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerNtf, answer_type_),
  };
  MsgPlayerKillAnswerNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKillAnswerNtf_descriptor_,
      MsgPlayerKillAnswerNtf::default_instance_,
      MsgPlayerKillAnswerNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKillAnswerNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKillAnswerNtf));
  MsgEnterFightReq_descriptor_ = file->message_type(144);
  static const int MsgEnterFightReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightReq, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightReq, mode_),
  };
  MsgEnterFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterFightReq_descriptor_,
      MsgEnterFightReq::default_instance_,
      MsgEnterFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterFightReq));
  MsgEnterFightAck_descriptor_ = file->message_type(145);
  static const int MsgEnterFightAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightAck, result_),
  };
  MsgEnterFightAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterFightAck_descriptor_,
      MsgEnterFightAck::default_instance_,
      MsgEnterFightAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterFightAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterFightAck));
  MsgQueryAgainstReq_descriptor_ = file->message_type(146);
  static const int MsgQueryAgainstReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstReq, creatureid_),
  };
  MsgQueryAgainstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryAgainstReq_descriptor_,
      MsgQueryAgainstReq::default_instance_,
      MsgQueryAgainstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryAgainstReq));
  MsgQueryAgainstAck_descriptor_ = file->message_type(147);
  static const int MsgQueryAgainstAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstAck, againstformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstAck, enemyside_),
  };
  MsgQueryAgainstAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryAgainstAck_descriptor_,
      MsgQueryAgainstAck::default_instance_,
      MsgQueryAgainstAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryAgainstAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryAgainstAck));
  MsgAreaIdNtf_descriptor_ = file->message_type(148);
  static const int MsgAreaIdNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAreaIdNtf, areaid_),
  };
  MsgAreaIdNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAreaIdNtf_descriptor_,
      MsgAreaIdNtf::default_instance_,
      MsgAreaIdNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAreaIdNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAreaIdNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAreaIdNtf));
  MsgMonsterLanguageNtf_descriptor_ = file->message_type(149);
  static const int MsgMonsterLanguageNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterLanguageNtf, creatureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterLanguageNtf, proir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterLanguageNtf, notice_language_id_),
  };
  MsgMonsterLanguageNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMonsterLanguageNtf_descriptor_,
      MsgMonsterLanguageNtf::default_instance_,
      MsgMonsterLanguageNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterLanguageNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMonsterLanguageNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMonsterLanguageNtf));
  MsgDeadNtf_descriptor_ = file->message_type(150);
  static const int MsgDeadNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeadNtf, roleid_),
  };
  MsgDeadNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDeadNtf_descriptor_,
      MsgDeadNtf::default_instance_,
      MsgDeadNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeadNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeadNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDeadNtf));
  MsgRiviveReq_descriptor_ = file->message_type(151);
  static const int MsgRiviveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveReq, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveReq, country_id_),
  };
  MsgRiviveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRiviveReq_descriptor_,
      MsgRiviveReq::default_instance_,
      MsgRiviveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRiviveReq));
  MsgRiviveNtf_descriptor_ = file->message_type(152);
  static const int MsgRiviveNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveNtf, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveNtf, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveNtf, y_),
  };
  MsgRiviveNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRiviveNtf_descriptor_,
      MsgRiviveNtf::default_instance_,
      MsgRiviveNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRiviveNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRiviveNtf));
  ServerState_descriptor_ = file->enum_type(0);
  EM_PK_MODE_descriptor_ = file->enum_type(1);
  ActionType_descriptor_ = file->enum_type(2);
  OFFICER_TYPE_descriptor_ = file->enum_type(3);
  ArmyOfficerType_descriptor_ = file->enum_type(4);
  COUNTRY_STATE_descriptor_ = file->enum_type(5);
  MONEY_TYPE_descriptor_ = file->enum_type(6);
  CITY_STATE_descriptor_ = file->enum_type(7);
  ROLE_MODE_descriptor_ = file->enum_type(8);
  ROLE_ATTR_TYPE_descriptor_ = file->enum_type(9);
  TARGET_TYPE_descriptor_ = file->enum_type(10);
  EM_PKRESULT_descriptor_ = file->enum_type(11);
  RIVIVE_MODE_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IGame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeartBeat_descriptor_, &MsgHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginReq_descriptor_, &MsgLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfo_descriptor_, &RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginAck_descriptor_, &MsgLoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateRoleReq_descriptor_, &MsgCreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateRoleAck_descriptor_, &MsgCreateRoleAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSelectRoleReq_descriptor_, &MsgSelectRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSelectRoleAck_descriptor_, &MsgSelectRoleAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterSceneNtf_descriptor_, &MsgEnterSceneNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterSceneReq_descriptor_, &MsgEnterSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJumpSceneReq_descriptor_, &MsgJumpSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJumpSceneNtf_descriptor_, &MsgJumpSceneNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRoleInfo_descriptor_, &SceneRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleIntoVisionNtf_descriptor_, &MsgRoleIntoVisionNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleOutofVisionNtf_descriptor_, &MsgRoleOutofVisionNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgActionReq_descriptor_, &MsgActionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgActionNtf_descriptor_, &MsgActionNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroInfo_descriptor_, &HeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightAttr_descriptor_, &FightAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseAttr_descriptor_, &BaseAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeroAttr_descriptor_, &MsgHeroAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskState_descriptor_, &TaskState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTaskListNfy_descriptor_, &MsgTaskListNfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAcceptTaskReq_descriptor_, &MsgAcceptTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAcceptTaskAck_descriptor_, &MsgAcceptTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCommitTaskReq_descriptor_, &MsgCommitTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCommitTaskAck_descriptor_, &MsgCommitTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDropTaskReq_descriptor_, &MsgDropTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDropTaskAck_descriptor_, &MsgDropTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTaskChangeNfy_descriptor_, &MsgTaskChangeNfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGmCmdReq_descriptor_, &MsgGmCmdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGmCmdAck_descriptor_, &MsgGmCmdAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormPair_descriptor_, &FormPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Formation_descriptor_, &Formation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSaveFormation_descriptor_, &MsgSaveFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSaveFormationAck_descriptor_, &MsgSaveFormationAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFormationNty_descriptor_, &MsgFormationNty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAttrChangeNfy_descriptor_, &MsgAttrChangeNfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterUnit_descriptor_, &MonsterUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKillMonster_descriptor_, &MsgKillMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBaseInfo_descriptor_, &ItemBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemExtraInfo_descriptor_, &ItemExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetBagItemsNfy_descriptor_, &MsgGetBagItemsNfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgItemsChangedNfy_descriptor_, &MsgItemsChangedNfy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUseBagItemReq_descriptor_, &MsgUseBagItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUseBagItemAck_descriptor_, &MsgUseBagItemAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightSide_descriptor_, &FightSide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMonsterAgainstReq_descriptor_, &MsgMonsterAgainstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMonsterAgainstAck_descriptor_, &MsgMonsterAgainstAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvpReq_descriptor_, &MsgPvpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvpAck_descriptor_, &MsgPvpAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvpCancelReq_descriptor_, &MsgPvpCancelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvpNtf_descriptor_, &MsgPvpNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoadFightResProgressReq_descriptor_, &MsgLoadFightResProgressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoadFightResProgressNtf_descriptor_, &MsgLoadFightResProgressNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFightStartReq_descriptor_, &MsgFightStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFightStartNtf_descriptor_, &MsgFightStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFightEndReq_descriptor_, &MsgFightEndReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFightEndNtf_descriptor_, &MsgFightEndNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DamageInfo_descriptor_, &DamageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackInfo_descriptor_, &AttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAttackReq_descriptor_, &MsgAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAttackAck_descriptor_, &MsgAttackAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAttackNtf_descriptor_, &MsgAttackNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoundStartReq_descriptor_, &MsgRoundStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoundEndReq_descriptor_, &MsgRoundEndReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBuildInfoNtf_descriptor_, &MsgBuildInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetBuildCoppperReq_descriptor_, &MsgGetBuildCoppperReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetBuildCoppperAck_descriptor_, &MsgGetBuildCoppperAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpgradeInteriorBuildReq_descriptor_, &MsgUpgradeInteriorBuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpgradeInteriorBuildAck_descriptor_, &MsgUpgradeInteriorBuildAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInteriorTaskFinishedNtf_descriptor_, &MsgInteriorTaskFinishedNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDispatchTaskReq_descriptor_, &MsgDispatchTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDispatchTaskAck_descriptor_, &MsgDispatchTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRefreshTaskReq_descriptor_, &MsgRefreshTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRefreshTaskAck_descriptor_, &MsgRefreshTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpgradeTaskStarLevelReq_descriptor_, &MsgUpgradeTaskStarLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpgradeTaskStarLevelAck_descriptor_, &MsgUpgradeTaskStarLevelAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetInteriorRewardReq_descriptor_, &MsgGetInteriorRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetInteriorRewardAck_descriptor_, &MsgGetInteriorRewardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCompleteInteriorTaskReq_descriptor_, &MsgCompleteInteriorTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCompleteInteriorTaskAck_descriptor_, &MsgCompleteInteriorTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateArmyReq_descriptor_, &MsgCreateArmyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateArmyAck_descriptor_, &MsgCreateArmyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinArmyReq_descriptor_, &MsgJoinArmyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinArmyAck_descriptor_, &MsgJoinArmyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApproveJoinArmyReq_descriptor_, &MsgApproveJoinArmyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApproveJoinArmyAck_descriptor_, &MsgApproveJoinArmyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLeaveArmyReq_descriptor_, &MsgLeaveArmyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinCountryReq_descriptor_, &MsgJoinCountryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLeaveCountryReq_descriptor_, &MsgLeaveCountryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCountryAssignReq_descriptor_, &MsgCountryAssignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgArmyAssignReq_descriptor_, &MsgArmyAssignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_descriptor_, &officer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmyInfo_descriptor_, &ArmyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryInfo_descriptor_, &CountryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCountryInofNtf_descriptor_, &MsgCountryInofNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCallWarReq_descriptor_, &MsgCallWarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCallWarAck_descriptor_, &MsgCallWarAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallWarInfo_descriptor_, &CallWarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCallWarInfoReq_descriptor_, &MsgCallWarInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCallWarInfoAck_descriptor_, &MsgCallWarInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExchangeMoneyReq_descriptor_, &MsgExchangeMoneyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExchangeMoneyAck_descriptor_, &MsgExchangeMoneyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HpInfo_descriptor_, &HpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityInfo_descriptor_, &CityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterCityVisionNtf_descriptor_, &MsgEnterCityVisionNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgOutofCityVisionNtf_descriptor_, &MsgOutofCityVisionNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCityInfoNtf_descriptor_, &MsgCityInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterCityReq_descriptor_, &MsgEnterCityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterCityAck_descriptor_, &MsgEnterCityAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCountryBattleEndNtf_descriptor_, &MsgCountryBattleEndNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCountryBattleStartNtf_descriptor_, &MsgCountryBattleStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSystemHintNtf_descriptor_, &MsgSystemHintNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReconnectReq_descriptor_, &MsgReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReconnectAck_descriptor_, &MsgReconnectAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransReq_descriptor_, &MsgTransReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransAck_descriptor_, &MsgTransAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTriggerMonsterNtf_descriptor_, &MsgTriggerMonsterNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeRoleModeReq_descriptor_, &MsgChangeRoleModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleAttr_descriptor_, &RoleAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleAttrChangeNtf_descriptor_, &MsgRoleAttrChangeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterId_descriptor_, &MonsterId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMonsterListNtf_descriptor_, &MsgMonsterListNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReleaseSkillReq_descriptor_, &MsgReleaseSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReleaseSkillAck_descriptor_, &MsgReleaseSkillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReleaseSkillNtf_descriptor_, &MsgReleaseSkillNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeModeReq_descriptor_, &MsgChangeModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeModeAck_descriptor_, &MsgChangeModeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeModeNtf_descriptor_, &MsgChangeModeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKillReq_descriptor_, &MsgPlayerKillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKillAck_descriptor_, &MsgPlayerKillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKillNtf_descriptor_, &MsgPlayerKillNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCancelPlayerKillReq_descriptor_, &MsgCancelPlayerKillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCancelPlayerKillAck_descriptor_, &MsgCancelPlayerKillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCancelPlayerKillNtf_descriptor_, &MsgCancelPlayerKillNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKillAnswerReq_descriptor_, &MsgPlayerKillAnswerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKillAnswerAck_descriptor_, &MsgPlayerKillAnswerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKillAnswerNtf_descriptor_, &MsgPlayerKillAnswerNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterFightReq_descriptor_, &MsgEnterFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterFightAck_descriptor_, &MsgEnterFightAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryAgainstReq_descriptor_, &MsgQueryAgainstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryAgainstAck_descriptor_, &MsgQueryAgainstAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAreaIdNtf_descriptor_, &MsgAreaIdNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMonsterLanguageNtf_descriptor_, &MsgMonsterLanguageNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDeadNtf_descriptor_, &MsgDeadNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRiviveReq_descriptor_, &MsgRiviveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRiviveNtf_descriptor_, &MsgRiviveNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IGame_2eproto() {
  delete MsgHeartBeat::default_instance_;
  delete MsgHeartBeat_reflection_;
  delete MsgLoginReq::default_instance_;
  delete MsgLoginReq_reflection_;
  delete RoleInfo::default_instance_;
  delete RoleInfo_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete MsgLoginAck::default_instance_;
  delete MsgLoginAck_reflection_;
  delete MsgCreateRoleReq::default_instance_;
  delete MsgCreateRoleReq_reflection_;
  delete MsgCreateRoleAck::default_instance_;
  delete MsgCreateRoleAck_reflection_;
  delete MsgSelectRoleReq::default_instance_;
  delete MsgSelectRoleReq_reflection_;
  delete MsgSelectRoleAck::default_instance_;
  delete MsgSelectRoleAck_reflection_;
  delete MsgEnterSceneNtf::default_instance_;
  delete MsgEnterSceneNtf_reflection_;
  delete MsgEnterSceneReq::default_instance_;
  delete MsgEnterSceneReq_reflection_;
  delete MsgJumpSceneReq::default_instance_;
  delete MsgJumpSceneReq_reflection_;
  delete MsgJumpSceneNtf::default_instance_;
  delete MsgJumpSceneNtf_reflection_;
  delete SceneRoleInfo::default_instance_;
  delete SceneRoleInfo_reflection_;
  delete MsgRoleIntoVisionNtf::default_instance_;
  delete MsgRoleIntoVisionNtf_reflection_;
  delete MsgRoleOutofVisionNtf::default_instance_;
  delete MsgRoleOutofVisionNtf_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
  delete MsgActionReq::default_instance_;
  delete MsgActionReq_reflection_;
  delete MsgActionNtf::default_instance_;
  delete MsgActionNtf_reflection_;
  delete HeroInfo::default_instance_;
  delete HeroInfo_reflection_;
  delete FightAttr::default_instance_;
  delete FightAttr_reflection_;
  delete BaseAttr::default_instance_;
  delete BaseAttr_reflection_;
  delete MsgHeroAttr::default_instance_;
  delete MsgHeroAttr_reflection_;
  delete TaskState::default_instance_;
  delete TaskState_reflection_;
  delete MsgTaskListNfy::default_instance_;
  delete MsgTaskListNfy_reflection_;
  delete MsgAcceptTaskReq::default_instance_;
  delete MsgAcceptTaskReq_reflection_;
  delete MsgAcceptTaskAck::default_instance_;
  delete MsgAcceptTaskAck_reflection_;
  delete MsgCommitTaskReq::default_instance_;
  delete MsgCommitTaskReq_reflection_;
  delete MsgCommitTaskAck::default_instance_;
  delete MsgCommitTaskAck_reflection_;
  delete MsgDropTaskReq::default_instance_;
  delete MsgDropTaskReq_reflection_;
  delete MsgDropTaskAck::default_instance_;
  delete MsgDropTaskAck_reflection_;
  delete MsgTaskChangeNfy::default_instance_;
  delete MsgTaskChangeNfy_reflection_;
  delete MsgGmCmdReq::default_instance_;
  delete MsgGmCmdReq_reflection_;
  delete MsgGmCmdAck::default_instance_;
  delete MsgGmCmdAck_reflection_;
  delete FormPair::default_instance_;
  delete FormPair_reflection_;
  delete Formation::default_instance_;
  delete Formation_reflection_;
  delete MsgSaveFormation::default_instance_;
  delete MsgSaveFormation_reflection_;
  delete MsgSaveFormationAck::default_instance_;
  delete MsgSaveFormationAck_reflection_;
  delete MsgFormationNty::default_instance_;
  delete MsgFormationNty_reflection_;
  delete MsgAttrChangeNfy::default_instance_;
  delete MsgAttrChangeNfy_reflection_;
  delete MonsterUnit::default_instance_;
  delete MonsterUnit_reflection_;
  delete MsgKillMonster::default_instance_;
  delete MsgKillMonster_reflection_;
  delete ItemBaseInfo::default_instance_;
  delete ItemBaseInfo_reflection_;
  delete ItemExtraInfo::default_instance_;
  delete ItemExtraInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete MsgGetBagItemsNfy::default_instance_;
  delete MsgGetBagItemsNfy_reflection_;
  delete MsgItemsChangedNfy::default_instance_;
  delete MsgItemsChangedNfy_reflection_;
  delete MsgUseBagItemReq::default_instance_;
  delete MsgUseBagItemReq_reflection_;
  delete MsgUseBagItemAck::default_instance_;
  delete MsgUseBagItemAck_reflection_;
  delete FightSide::default_instance_;
  delete FightSide_reflection_;
  delete MsgMonsterAgainstReq::default_instance_;
  delete MsgMonsterAgainstReq_reflection_;
  delete MsgMonsterAgainstAck::default_instance_;
  delete MsgMonsterAgainstAck_reflection_;
  delete MsgPvpReq::default_instance_;
  delete MsgPvpReq_reflection_;
  delete MsgPvpAck::default_instance_;
  delete MsgPvpAck_reflection_;
  delete MsgPvpCancelReq::default_instance_;
  delete MsgPvpCancelReq_reflection_;
  delete MsgPvpNtf::default_instance_;
  delete MsgPvpNtf_reflection_;
  delete MsgLoadFightResProgressReq::default_instance_;
  delete MsgLoadFightResProgressReq_reflection_;
  delete MsgLoadFightResProgressNtf::default_instance_;
  delete MsgLoadFightResProgressNtf_reflection_;
  delete MsgFightStartReq::default_instance_;
  delete MsgFightStartReq_reflection_;
  delete MsgFightStartNtf::default_instance_;
  delete MsgFightStartNtf_reflection_;
  delete MsgFightEndReq::default_instance_;
  delete MsgFightEndReq_reflection_;
  delete MsgFightEndNtf::default_instance_;
  delete MsgFightEndNtf_reflection_;
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete DamageInfo::default_instance_;
  delete DamageInfo_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete AttackInfo::default_instance_;
  delete AttackInfo_reflection_;
  delete MsgAttackReq::default_instance_;
  delete MsgAttackReq_reflection_;
  delete MsgAttackAck::default_instance_;
  delete MsgAttackAck_reflection_;
  delete MsgAttackNtf::default_instance_;
  delete MsgAttackNtf_reflection_;
  delete MsgRoundStartReq::default_instance_;
  delete MsgRoundStartReq_reflection_;
  delete MsgRoundEndReq::default_instance_;
  delete MsgRoundEndReq_reflection_;
  delete MsgBuildInfoNtf::default_instance_;
  delete MsgBuildInfoNtf_reflection_;
  delete MsgGetBuildCoppperReq::default_instance_;
  delete MsgGetBuildCoppperReq_reflection_;
  delete MsgGetBuildCoppperAck::default_instance_;
  delete MsgGetBuildCoppperAck_reflection_;
  delete MsgUpgradeInteriorBuildReq::default_instance_;
  delete MsgUpgradeInteriorBuildReq_reflection_;
  delete MsgUpgradeInteriorBuildAck::default_instance_;
  delete MsgUpgradeInteriorBuildAck_reflection_;
  delete MsgInteriorTaskFinishedNtf::default_instance_;
  delete MsgInteriorTaskFinishedNtf_reflection_;
  delete MsgDispatchTaskReq::default_instance_;
  delete MsgDispatchTaskReq_reflection_;
  delete MsgDispatchTaskAck::default_instance_;
  delete MsgDispatchTaskAck_reflection_;
  delete MsgRefreshTaskReq::default_instance_;
  delete MsgRefreshTaskReq_reflection_;
  delete MsgRefreshTaskAck::default_instance_;
  delete MsgRefreshTaskAck_reflection_;
  delete MsgUpgradeTaskStarLevelReq::default_instance_;
  delete MsgUpgradeTaskStarLevelReq_reflection_;
  delete MsgUpgradeTaskStarLevelAck::default_instance_;
  delete MsgUpgradeTaskStarLevelAck_reflection_;
  delete MsgGetInteriorRewardReq::default_instance_;
  delete MsgGetInteriorRewardReq_reflection_;
  delete MsgGetInteriorRewardAck::default_instance_;
  delete MsgGetInteriorRewardAck_reflection_;
  delete MsgCompleteInteriorTaskReq::default_instance_;
  delete MsgCompleteInteriorTaskReq_reflection_;
  delete MsgCompleteInteriorTaskAck::default_instance_;
  delete MsgCompleteInteriorTaskAck_reflection_;
  delete MsgCreateArmyReq::default_instance_;
  delete MsgCreateArmyReq_reflection_;
  delete MsgCreateArmyAck::default_instance_;
  delete MsgCreateArmyAck_reflection_;
  delete MsgJoinArmyReq::default_instance_;
  delete MsgJoinArmyReq_reflection_;
  delete MsgJoinArmyAck::default_instance_;
  delete MsgJoinArmyAck_reflection_;
  delete MsgApproveJoinArmyReq::default_instance_;
  delete MsgApproveJoinArmyReq_reflection_;
  delete MsgApproveJoinArmyAck::default_instance_;
  delete MsgApproveJoinArmyAck_reflection_;
  delete MsgLeaveArmyReq::default_instance_;
  delete MsgLeaveArmyReq_reflection_;
  delete MsgJoinCountryReq::default_instance_;
  delete MsgJoinCountryReq_reflection_;
  delete MsgLeaveCountryReq::default_instance_;
  delete MsgLeaveCountryReq_reflection_;
  delete MsgCountryAssignReq::default_instance_;
  delete MsgCountryAssignReq_reflection_;
  delete MsgArmyAssignReq::default_instance_;
  delete MsgArmyAssignReq_reflection_;
  delete officer::default_instance_;
  delete officer_reflection_;
  delete ArmyInfo::default_instance_;
  delete ArmyInfo_reflection_;
  delete CountryInfo::default_instance_;
  delete CountryInfo_reflection_;
  delete MsgCountryInofNtf::default_instance_;
  delete MsgCountryInofNtf_reflection_;
  delete MsgCallWarReq::default_instance_;
  delete MsgCallWarReq_reflection_;
  delete MsgCallWarAck::default_instance_;
  delete MsgCallWarAck_reflection_;
  delete CallWarInfo::default_instance_;
  delete CallWarInfo_reflection_;
  delete MsgCallWarInfoReq::default_instance_;
  delete MsgCallWarInfoReq_reflection_;
  delete MsgCallWarInfoAck::default_instance_;
  delete MsgCallWarInfoAck_reflection_;
  delete MsgExchangeMoneyReq::default_instance_;
  delete MsgExchangeMoneyReq_reflection_;
  delete MsgExchangeMoneyAck::default_instance_;
  delete MsgExchangeMoneyAck_reflection_;
  delete HpInfo::default_instance_;
  delete HpInfo_reflection_;
  delete CityInfo::default_instance_;
  delete CityInfo_reflection_;
  delete MsgEnterCityVisionNtf::default_instance_;
  delete MsgEnterCityVisionNtf_reflection_;
  delete MsgOutofCityVisionNtf::default_instance_;
  delete MsgOutofCityVisionNtf_reflection_;
  delete MsgCityInfoNtf::default_instance_;
  delete MsgCityInfoNtf_reflection_;
  delete MsgEnterCityReq::default_instance_;
  delete MsgEnterCityReq_reflection_;
  delete MsgEnterCityAck::default_instance_;
  delete MsgEnterCityAck_reflection_;
  delete MsgCountryBattleEndNtf::default_instance_;
  delete MsgCountryBattleEndNtf_reflection_;
  delete MsgCountryBattleStartNtf::default_instance_;
  delete MsgCountryBattleStartNtf_reflection_;
  delete MsgSystemHintNtf::default_instance_;
  delete MsgSystemHintNtf_reflection_;
  delete MsgReconnectReq::default_instance_;
  delete MsgReconnectReq_reflection_;
  delete MsgReconnectAck::default_instance_;
  delete MsgReconnectAck_reflection_;
  delete MsgTransReq::default_instance_;
  delete MsgTransReq_reflection_;
  delete MsgTransAck::default_instance_;
  delete MsgTransAck_reflection_;
  delete MsgTriggerMonsterNtf::default_instance_;
  delete MsgTriggerMonsterNtf_reflection_;
  delete MsgChangeRoleModeReq::default_instance_;
  delete MsgChangeRoleModeReq_reflection_;
  delete RoleAttr::default_instance_;
  delete RoleAttr_reflection_;
  delete MsgRoleAttrChangeNtf::default_instance_;
  delete MsgRoleAttrChangeNtf_reflection_;
  delete MonsterId::default_instance_;
  delete MonsterId_reflection_;
  delete MsgMonsterListNtf::default_instance_;
  delete MsgMonsterListNtf_reflection_;
  delete MsgReleaseSkillReq::default_instance_;
  delete MsgReleaseSkillReq_reflection_;
  delete MsgReleaseSkillAck::default_instance_;
  delete MsgReleaseSkillAck_reflection_;
  delete MsgReleaseSkillNtf::default_instance_;
  delete MsgReleaseSkillNtf_reflection_;
  delete MsgChangeModeReq::default_instance_;
  delete MsgChangeModeReq_reflection_;
  delete MsgChangeModeAck::default_instance_;
  delete MsgChangeModeAck_reflection_;
  delete MsgChangeModeNtf::default_instance_;
  delete MsgChangeModeNtf_reflection_;
  delete MsgPlayerKillReq::default_instance_;
  delete MsgPlayerKillReq_reflection_;
  delete MsgPlayerKillAck::default_instance_;
  delete MsgPlayerKillAck_reflection_;
  delete MsgPlayerKillNtf::default_instance_;
  delete MsgPlayerKillNtf_reflection_;
  delete MsgCancelPlayerKillReq::default_instance_;
  delete MsgCancelPlayerKillReq_reflection_;
  delete MsgCancelPlayerKillAck::default_instance_;
  delete MsgCancelPlayerKillAck_reflection_;
  delete MsgCancelPlayerKillNtf::default_instance_;
  delete MsgCancelPlayerKillNtf_reflection_;
  delete MsgPlayerKillAnswerReq::default_instance_;
  delete MsgPlayerKillAnswerReq_reflection_;
  delete MsgPlayerKillAnswerAck::default_instance_;
  delete MsgPlayerKillAnswerAck_reflection_;
  delete MsgPlayerKillAnswerNtf::default_instance_;
  delete MsgPlayerKillAnswerNtf_reflection_;
  delete MsgEnterFightReq::default_instance_;
  delete MsgEnterFightReq_reflection_;
  delete MsgEnterFightAck::default_instance_;
  delete MsgEnterFightAck_reflection_;
  delete MsgQueryAgainstReq::default_instance_;
  delete MsgQueryAgainstReq_reflection_;
  delete MsgQueryAgainstAck::default_instance_;
  delete MsgQueryAgainstAck_reflection_;
  delete MsgAreaIdNtf::default_instance_;
  delete MsgAreaIdNtf_reflection_;
  delete MsgMonsterLanguageNtf::default_instance_;
  delete MsgMonsterLanguageNtf_reflection_;
  delete MsgDeadNtf::default_instance_;
  delete MsgDeadNtf_reflection_;
  delete MsgRiviveReq::default_instance_;
  delete MsgRiviveReq_reflection_;
  delete MsgRiviveNtf::default_instance_;
  delete MsgRiviveNtf_reflection_;
}

void protobuf_AddDesc_IGame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013IGame.proto\022\nIGameProto\"$\n\014MsgHeartBea"
    "t\022\024\n\014lastSendTime\030\001 \001(\002\" \n\013MsgLoginReq\022\021"
    "\n\tloginName\030\001 \002(\t\"\235\002\n\010RoleInfo\022\016\n\006roleId"
    "\030\001 \002(\r\022\020\n\010roleName\030\002 \002(\t\022\020\n\010roleType\030\003 \002"
    "(\005\022\r\n\005speed\030\004 \002(\r\022\r\n\005level\030\005 \001(\r\022\014\n\004gold"
    "\030\006 \001(\004\022\016\n\006silver\030\007 \001(\004\022\016\n\006copper\030\010 \001(\004\022\022"
    "\n\ncountry_id\030\t \001(\r\022\017\n\007army_id\030\n \001(\r\022\030\n\020a"
    "rmy_member_type\030\013 \001(\r\022\031\n\021army_officer_ty"
    "pe\030\014 \001(\r\022\017\n\007offices\030\r \003(\r\022&\n\006pkmode\030\016 \001("
    "\0162\026.IGameProto.EM_PK_MODE\"\267\001\n\nServerInfo"
    "\022\020\n\010zoneName\030\001 \002(\t\022\016\n\006zoneId\030\002 \002(\r\022,\n\013se"
    "rverState\030\003 \002(\0162\027.IGameProto.ServerState"
    "\022\n\n\002ip\030\004 \002(\t\022\014\n\004port\030\005 \002(\005\022\'\n\trolesList\030"
    "\006 \003(\0132\024.IGameProto.RoleInfo\022\026\n\016lastUpdat"
    "eTime\030c \001(\004\"J\n\013MsgLoginAck\022\016\n\006userId\030\001 \002"
    "(\r\022+\n\013serversList\030\002 \003(\0132\026.IGameProto.Ser"
    "verInfo\"F\n\020MsgCreateRoleReq\022\016\n\006userId\030\001 "
    "\002(\r\022\"\n\004role\030\002 \002(\0132\024.IGameProto.RoleInfo\""
    "6\n\020MsgCreateRoleAck\022\"\n\004role\030\001 \002(\0132\024.IGam"
    "eProto.RoleInfo\"2\n\020MsgSelectRoleReq\022\016\n\006u"
    "serId\030\001 \002(\r\022\016\n\006roleId\030\002 \002(\r\"6\n\020MsgSelect"
    "RoleAck\022\"\n\004role\030\001 \002(\0132\024.IGameProto.RoleI"
    "nfo\"_\n\020MsgEnterSceneNtf\022\017\n\007sceneId\030\001 \002(\r"
    "\022+\n\010roleInfo\030\002 \002(\0132\031.IGameProto.SceneRol"
    "eInfo\022\r\n\005mapId\030\003 \001(\r\"#\n\020MsgEnterSceneReq"
    "\022\017\n\007sceneId\030\001 \001(\r\" \n\017MsgJumpSceneReq\022\r\n\005"
    "mapId\030\001 \002(\r\"W\n\017MsgJumpSceneNtf\022\r\n\005mapId\030"
    "\001 \002(\r\022\017\n\007sceneId\030\002 \002(\r\022\t\n\001X\030\003 \001(\002\022\t\n\001Y\030\004"
    " \001(\002\022\016\n\006cityId\030\005 \001(\r\"\306\001\n\rSceneRoleInfo\022\""
    "\n\004role\030\001 \002(\0132\024.IGameProto.RoleInfo\022\t\n\001X\030"
    "\002 \002(\002\022\t\n\001Y\030\003 \002(\002\022\021\n\tdirection\030\004 \002(\002\022*\n\na"
    "ctionType\030\005 \002(\0162\026.IGameProto.ActionType\022"
    "\014\n\004to_x\030\006 \001(\002\022\014\n\004to_y\030\007 \001(\002\022\016\n\006cityId\030\010 "
    "\001(\r\022\020\n\010roleMode\030\t \001(\r\"D\n\024MsgRoleIntoVisi"
    "onNtf\022,\n\trolesList\030\001 \003(\0132\031.IGameProto.Sc"
    "eneRoleInfo\"\'\n\025MsgRoleOutofVisionNtf\022\016\n\006"
    "roleId\030\001 \003(\r\"\033\n\003Pos\022\t\n\001X\030\001 \002(\002\022\t\n\001Y\030\002 \002("
    "\002\"m\n\014MsgActionReq\022*\n\nactionType\030\001 \002(\0162\026."
    "IGameProto.ActionType\022\036\n\005poses\030\002 \003(\0132\017.I"
    "GameProto.Pos\022\021\n\tdirection\030\003 \002(\002\"\200\001\n\014Msg"
    "ActionNtf\022\016\n\006roleId\030\001 \002(\r\022*\n\nactionType\030"
    "\002 \002(\0162\026.IGameProto.ActionType\022!\n\010desPose"
    "s\030\003 \003(\0132\017.IGameProto.Pos\022\021\n\tdirection\030\004 "
    "\002(\002\"C\n\010HeroInfo\022\n\n\002id\030\001 \002(\004\022\017\n\007data_id\030\002"
    " \001(\005\022\r\n\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\"\320\002\n\tFig"
    "htAttr\022\n\n\002hp\030\001 \001(\005\022\022\n\nphy_attack\030\002 \001(\005\022\023"
    "\n\013phy_defence\030\003 \001(\005\022\024\n\014magic_attack\030\004 \001("
    "\005\022\025\n\rmagic_defense\030\005 \001(\005\022\014\n\004rage\030\006 \001(\005\022\014"
    "\n\004crit\030\007 \001(\005\022\021\n\tanti_crit\030\010 \001(\005\022\022\n\ncritd"
    "amage\030\t \001(\005\022\020\n\010hit_rate\030\n \001(\005\022\023\n\013escape_"
    "rate\030\013 \001(\005\022\023\n\013break_parry\030\014 \001(\005\022\r\n\005parry"
    "\030\r \001(\005\022\031\n\021parry_anti_damage\030\016 \001(\005\022\022\n\ndam"
    "age_inc\030\017 \001(\005\022\022\n\ndamage_dec\030\020 \001(\005\022\020\n\010fig"
    "hting\030\021 \001(\003\"\214\002\n\010BaseAttr\022\014\n\004type\030\001 \001(\r\022\n"
    "\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005level\030\004 \001(\r\022"
    "\013\n\003exp\030\005 \001(\004\022\017\n\007species\030\006 \001(\r\022\017\n\007quality"
    "\030\007 \001(\r\022\017\n\007in_form\030\010 \001(\r\022\016\n\006equips\030\t \003(\t\022"
    ")\n\nfight_attr\030\n \001(\0132\025.IGameProto.FightAt"
    "tr\022\017\n\007country\030\013 \001(\r\022\023\n\013break_level\030\014 \001(\r"
    "\022\025\n\rdestiny_level\030\r \001(\r\022\021\n\tunique_id\030\016 \001"
    "(\004\"7\n\013MsgHeroAttr\022(\n\nhero_attrs\030\001 \003(\0132\024."
    "IGameProto.BaseAttr\"M\n\tTaskState\022\n\n\002id\030\001"
    " \001(\r\022\020\n\010progress\030\002 \001(\t\022\r\n\005state\030\003 \001(\r\022\023\n"
    "\013accept_time\030\004 \001(\r\":\n\016MsgTaskListNfy\022(\n\t"
    "task_list\030\001 \003(\0132\025.IGameProto.TaskState\"#"
    "\n\020MsgAcceptTaskReq\022\017\n\007task_id\030\001 \002(\r\"7\n\020M"
    "sgAcceptTaskAck\022#\n\004task\030\001 \002(\0132\025.IGamePro"
    "to.TaskState\"2\n\020MsgCommitTaskReq\022\017\n\007task"
    "_id\030\001 \002(\r\022\r\n\005param\030\002 \003(\004\"7\n\020MsgCommitTas"
    "kAck\022#\n\004task\030\001 \002(\0132\025.IGameProto.TaskStat"
    "e\"!\n\016MsgDropTaskReq\022\017\n\007task_id\030\001 \002(\r\"5\n\016"
    "MsgDropTaskAck\022#\n\004task\030\001 \002(\0132\025.IGameProt"
    "o.TaskState\"?\n\020MsgTaskChangeNfy\022+\n\014task_"
    "changed\030\001 \003(\0132\025.IGameProto.TaskState\"\032\n\013"
    "MsgGmCmdReq\022\013\n\003cmd\030\001 \001(\t\"\034\n\013MsgGmCmdAck\022"
    "\r\n\005param\030\002 \001(\t\")\n\010FormPair\022\013\n\003pos\030\001 \001(\r\022"
    "\020\n\010uniqueId\030\002 \001(\004\"?\n\tFormation\022\016\n\006formId"
    "\030\001 \001(\r\022\"\n\004form\030\002 \003(\0132\024.IGameProto.FormPa"
    "ir\"7\n\020MsgSaveFormation\022#\n\004form\030\001 \001(\0132\025.I"
    "GameProto.Formation\"5\n\023MsgSaveFormationA"
    "ck\022\016\n\006formId\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\"N\n\017Ms"
    "gFormationNty\022\025\n\rcurrentFormId\030\001 \001(\r\022$\n\005"
    "forms\030\002 \003(\0132\025.IGameProto.Formation\"6\n\020Ms"
    "gAttrChangeNfy\022\"\n\004attr\030\001 \001(\0132\024.IGameProt"
    "o.BaseAttr\"0\n\013MonsterUnit\022\022\n\nmonster_id\030"
    "\001 \001(\r\022\r\n\005count\030\002 \001(\r\"B\n\016MsgKillMonster\0220"
    "\n\017killed_monsters\030\001 \003(\0132\027.IGameProto.Mon"
    "sterUnit\"M\n\014ItemBaseInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005"
    "count\030\002 \001(\r\022\017\n\007is_wear\030\003 \001(\r\022\021\n\tunique_i"
    "d\030\004 \001(\004\"!\n\rItemExtraInfo\022\020\n\010fighting\030\001 \001"
    "(\r\"f\n\010ItemInfo\022+\n\tbase_info\030\001 \001(\0132\030.IGam"
    "eProto.ItemBaseInfo\022-\n\nextra_info\030\002 \001(\0132"
    "\031.IGameProto.ItemExtraInfo\"8\n\021MsgGetBagI"
    "temsNfy\022#\n\005items\030\001 \003(\0132\024.IGameProto.Item"
    "Info\"9\n\022MsgItemsChangedNfy\022#\n\005items\030\001 \003("
    "\0132\024.IGameProto.ItemInfo\"4\n\020MsgUseBagItem"
    "Req\022\021\n\tunique_id\030\001 \001(\004\022\r\n\005count\030\002 \001(\r\"\"\n"
    "\020MsgUseBagItemAck\022\016\n\006status\030\001 \001(\r\"Z\n\tFig"
    "htSide\022(\n\nhero_attrs\030\001 \003(\0132\024.IGameProto."
    "BaseAttr\022#\n\005forms\030\002 \003(\0132\024.IGameProto.For"
    "mPair\"-\n\024MsgMonsterAgainstReq\022\025\n\ragainst"
    "FormId\030\001 \002(\r\"x\n\024MsgMonsterAgainstAck\022\025\n\r"
    "againstFormId\030\001 \002(\r\022\016\n\006status\030\002 \002(\005\022\017\n\007f"
    "ightId\030\003 \002(\004\022(\n\tenemySide\030\004 \002(\0132\025.IGameP"
    "roto.FightSide\"\013\n\tMsgPvpReq\"\033\n\tMsgPvpAck"
    "\022\016\n\006status\030\001 \002(\005\"\021\n\017MsgPvpCancelReq\"V\n\tM"
    "sgPvpNtf\022\016\n\006status\030\001 \002(\005\022\017\n\007fightId\030\002 \002("
    "\004\022(\n\tenemySide\030\003 \002(\0132\025.IGameProto.FightS"
    "ide\"?\n\032MsgLoadFightResProgressReq\022\017\n\007fig"
    "htId\030\001 \002(\004\022\020\n\010progress\030\002 \002(\005\"O\n\032MsgLoadF"
    "ightResProgressNtf\022\017\n\007fightId\030\001 \002(\004\022\016\n\006r"
    "oleId\030\002 \002(\r\022\020\n\010progress\030\003 \002(\005\"#\n\020MsgFigh"
    "tStartReq\022\017\n\007fightId\030\001 \002(\004\"#\n\020MsgFightSt"
    "artNtf\022\017\n\007fightId\030\001 \002(\004\"!\n\016MsgFightEndRe"
    "q\022\017\n\007fightId\030\001 \002(\004\"1\n\016MsgFightEndNtf\022\017\n\007"
    "fightId\030\001 \002(\004\022\016\n\006result\030\002 \002(\r\"H\n\tSkillIn"
    "fo\022\032\n\022src_hero_unique_id\030\001 \001(\004\022\017\n\007skillI"
    "d\030\002 \002(\r\022\016\n\006posIds\030\003 \003(\r\"J\n\nDamageInfo\022\032\n"
    "\022src_hero_unique_id\030\001 \001(\004\022\020\n\010damageId\030\002 "
    "\002(\r\022\016\n\006posIds\030\003 \003(\r\"F\n\010BuffInfo\022\032\n\022src_h"
    "ero_unique_id\030\001 \001(\004\022\016\n\006buffId\030\002 \002(\r\022\016\n\006p"
    "osIds\030\003 \003(\r\"\223\001\n\nAttackInfo\022\020\n\010attackId\030\001"
    " \002(\r\022%\n\006skills\030\002 \002(\0132\025.IGameProto.SkillI"
    "nfo\022\'\n\007damages\030\003 \003(\0132\026.IGameProto.Damage"
    "Info\022#\n\005buffs\030\004 \003(\0132\024.IGameProto.BuffInf"
    "o\"K\n\014MsgAttackReq\022\017\n\007fightId\030\001 \002(\004\022*\n\nat"
    "tackInfo\030\002 \002(\0132\026.IGameProto.AttackInfo\"0"
    "\n\014MsgAttackAck\022\020\n\010attackId\030\001 \002(\r\022\016\n\006stat"
    "us\030\002 \002(\r\":\n\014MsgAttackNtf\022*\n\nattackInfo\030\001"
    " \002(\0132\026.IGameProto.AttackInfo\"#\n\020MsgRound"
    "StartReq\022\017\n\007fightId\030\001 \002(\004\"!\n\016MsgRoundEnd"
    "Req\022\017\n\007fightId\030\001 \002(\004\"\266\001\n\017MsgBuildInfoNtf"
    "\022\026\n\016copperLeftTime\030\001 \001(\r\022\016\n\006copper\030\002 \001(\r"
    "\022\016\n\006taskId\030\003 \001(\r\022\024\n\014taskLeftTime\030\004 \001(\r\022\017"
    "\n\007isStart\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\021\n\tstarLe"
    "vel\030\007 \001(\r\022\017\n\007heroIds\030\010 \003(\r\022\021\n\tleftTimes\030"
    "\t \001(\r\"\027\n\025MsgGetBuildCoppperReq\"&\n\025MsgGet"
    "BuildCoppperAck\022\r\n\005count\030\001 \001(\r\"\034\n\032MsgUpg"
    "radeInteriorBuildReq\";\n\032MsgUpgradeInteri"
    "orBuildAck\022\r\n\005level\030\001 \001(\r\022\016\n\006status\030\002 \001("
    "\r\",\n\032MsgInteriorTaskFinishedNtf\022\016\n\006taskI"
    "d\030\001 \001(\r\"N\n\022MsgDispatchTaskReq\022\016\n\006taskId\030"
    "\001 \001(\r\022\027\n\017task_star_level\030\002 \001(\r\022\017\n\007heroId"
    "s\030\003 \003(\r\"^\n\022MsgDispatchTaskAck\022\016\n\006taskId\030"
    "\001 \001(\r\022\027\n\017task_star_level\030\002 \001(\r\022\017\n\007heroId"
    "s\030\003 \003(\r\022\016\n\006status\030\004 \001(\r\"\023\n\021MsgRefreshTas"
    "kReq\":\n\021MsgRefreshTaskAck\022\016\n\006taskId\030\001 \001("
    "\r\022\025\n\rtaskStarLevel\030\002 \001(\r\"/\n\032MsgUpgradeTa"
    "skStarLevelReq\022\021\n\tstarLevel\030\001 \001(\r\"/\n\032Msg"
    "UpgradeTaskStarLevelAck\022\021\n\tstarLevel\030\001 \001"
    "(\r\"\031\n\027MsgGetInteriorRewardReq\")\n\027MsgGetI"
    "nteriorRewardAck\022\016\n\006status\030\001 \001(\r\"\034\n\032MsgC"
    "ompleteInteriorTaskReq\",\n\032MsgCompleteInt"
    "eriorTaskAck\022\016\n\006status\030\001 \001(\r\"\022\n\020MsgCreat"
    "eArmyReq\"\036\n\020MsgCreateArmyAck\022\n\n\002id\030\001 \001(\r"
    "\"\034\n\016MsgJoinArmyReq\022\n\n\002id\030\001 \001(\r\",\n\016MsgJoi"
    "nArmyAck\022\n\n\002id\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\")\n\025"
    "MsgApproveJoinArmyReq\022\020\n\010roleName\030\001 \001(\t\""
    "\027\n\025MsgApproveJoinArmyAck\"\021\n\017MsgLeaveArmy"
    "Req\"\037\n\021MsgJoinCountryReq\022\n\n\002id\030\001 \001(\r\"\024\n\022"
    "MsgLeaveCountryReq\"Q\n\023MsgCountryAssignRe"
    "q\022\020\n\010roleName\030\001 \001(\t\022(\n\006office\030\002 \001(\0162\030.IG"
    "ameProto.OFFICER_TYPE\"Q\n\020MsgArmyAssignRe"
    "q\022\020\n\010roleName\030\001 \001(\t\022+\n\006office\030\002 \001(\0162\033.IG"
    "ameProto.ArmyOfficerType\"/\n\007officer\022\022\n\no"
    "fficeType\030\001 \001(\r\022\020\n\010roleName\030\002 \001(\t\"\277\001\n\010Ar"
    "myInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\r\n\005mon"
    "ey\030\003 \001(\r\022\017\n\007members\030\004 \003(\t\022\017\n\007newbies\030\005 \003"
    "(\t\022\020\n\010appliers\030\006 \003(\t\022\014\n\004city\030\007 \001(\r\022\017\n\007co"
    "untry\030\010 \001(\r\022%\n\010officers\030\t \003(\0132\023.IGamePro"
    "to.officer\022\017\n\007general\030\n \001(\t\"\244\002\n\013CountryI"
    "nfo\022\n\n\002id\030\001 \001(\r\022$\n\006armies\030\003 \003(\0132\024.IGameP"
    "roto.ArmyInfo\022\r\n\005money\030\004 \001(\r\022\022\n\npopulari"
    "ty\030\005 \001(\r\022(\n\005state\030\006 \001(\0162\031.IGameProto.COU"
    "NTRY_STATE\022\016\n\006cities\030\007 \003(\r\022\017\n\007friends\030\010 "
    "\003(\r\022\017\n\007enemies\030\t \003(\r\022\r\n\005power\030\n \001(\r\022\016\n\006n"
    "otice\030\013 \001(\t\022\014\n\004name\030\014 \001(\t\022%\n\010officers\030\r "
    "\003(\0132\023.IGameProto.officer\022\020\n\010kingName\030\016 \001"
    "(\t\"?\n\021MsgCountryInofNtf\022*\n\tcountries\030\001 \003"
    "(\0132\027.IGameProto.CountryInfo\"\"\n\rMsgCallWa"
    "rReq\022\021\n\tcountryId\030\001 \001(\r\"\017\n\rMsgCallWarAck"
    "\"4\n\013CallWarInfo\022\021\n\tactive_id\030\001 \001(\r\022\022\n\npa"
    "ssive_id\030\002 \001(\r\"\023\n\021MsgCallWarInfoReq\"U\n\021M"
    "sgCallWarInfoAck\022.\n\rcall_war_info\030\001 \003(\0132"
    "\027.IGameProto.CallWarInfo\022\020\n\010timeLeft\030\002 \001"
    "(\r\"_\n\023MsgExchangeMoneyReq\022\027\n\017sourceMoney"
    "Type\030\001 \001(\r\022\030\n\020sourceMoneyCount\030\002 \001(\004\022\025\n\r"
    "destMoneyType\030\003 \001(\r\"\245\001\n\023MsgExchangeMoney"
    "Ack\022\021\n\ttotalGold\030\001 \001(\004\022\023\n\013totalSilver\030\002 "
    "\001(\004\022\023\n\013totalCopper\030\003 \001(\004\022\023\n\013changedGold\030"
    "\004 \001(\003\022\025\n\rchangedSilver\030\005 \001(\003\022\025\n\rchangedC"
    "opper\030\006 \001(\003\022\016\n\006status\030\007 \001(\r\" \n\006HpInfo\022\n\n"
    "\002id\030\001 \001(\r\022\n\n\002hp\030\002 \001(\r\"m\n\010CityInfo\022\n\n\002id\030"
    "\001 \001(\r\022\016\n\006isSelf\030\002 \001(\r\022%\n\005state\030\003 \001(\0162\026.I"
    "GameProto.CITY_STATE\022\036\n\002hp\030\004 \003(\0132\022.IGame"
    "Proto.HpInfo\";\n\025MsgEnterCityVisionNtf\022\"\n"
    "\004city\030\001 \001(\0132\024.IGameProto.CityInfo\"\'\n\025Msg"
    "OutofCityVisionNtf\022\016\n\006cityId\030\001 \001(\r\"4\n\016Ms"
    "gCityInfoNtf\022\"\n\004city\030\001 \001(\0132\024.IGameProto."
    "CityInfo\"!\n\017MsgEnterCityReq\022\016\n\006cityId\030\001 "
    "\001(\r\"!\n\017MsgEnterCityAck\022\016\n\006cityId\030\001 \001(\r\"%"
    "\n\026MsgCountryBattleEndNtf\022\013\n\003msg\030\001 \001(\t\"\'\n"
    "\030MsgCountryBattleStartNtf\022\013\n\003msg\030\001 \001(\t\"f"
    "\n\020MsgSystemHintNtf\022\r\n\005proir\030\001 \001(\005\022\032\n\022not"
    "ice_language_id\030\002 \001(\t\022\023\n\013showPostion\030\003 \001"
    "(\005\022\022\n\nparameters\030\004 \003(\t\"!\n\017MsgReconnectRe"
    "q\022\016\n\006roleId\030\001 \002(\r\"!\n\017MsgReconnectAck\022\016\n\006"
    "status\030\001 \001(\r\"\r\n\013MsgTransReq\"\035\n\013MsgTransA"
    "ck\022\016\n\006status\030\001 \001(\r\"x\n\024MsgTriggerMonsterN"
    "tf\022\025\n\ragainstFormId\030\001 \002(\r\022\016\n\006status\030\002 \002("
    "\005\022\017\n\007fightId\030\003 \002(\004\022(\n\tenemySide\030\004 \002(\0132\025."
    "IGameProto.FightSide\"?\n\024MsgChangeRoleMod"
    "eReq\022\'\n\010roleMode\030\001 \001(\0162\025.IGameProto.ROLE"
    "_MODE\"Y\n\010RoleAttr\022,\n\010attrType\030\001 \001(\0162\032.IG"
    "ameProto.ROLE_ATTR_TYPE\022\017\n\007attrVal\030\002 \001(\r"
    "\022\016\n\006roleId\030\003 \001(\r\";\n\024MsgRoleAttrChangeNtf"
    "\022#\n\005attrs\030\001 \003(\0132\024.IGameProto.RoleAttr\".\n"
    "\tMonsterId\022\022\n\ncreatureId\030\001 \001(\r\022\r\n\005NpcId\030"
    "\002 \001(\r\"@\n\021MsgMonsterListNtf\022+\n\014monsterArr"
    "ay\030\001 \003(\0132\025.IGameProto.MonsterId\"\241\001\n\022MsgR"
    "eleaseSkillReq\022\017\n\007skillId\030\001 \001(\r\022\024\n\014targe"
    "t_pos_x\030\002 \001(\002\022\024\n\014target_pos_y\030\003 \001(\002\022\021\n\tt"
    "arget_id\030\004 \001(\r\022,\n\013target_type\030\005 \001(\0162\027.IG"
    "ameProto.TARGET_TYPE\022\r\n\005param\030\006 \001(\r\"5\n\022M"
    "sgReleaseSkillAck\022\017\n\007skillId\030\001 \001(\r\022\016\n\006re"
    "sult\030\002 \001(\r\"\273\001\n\022MsgReleaseSkillNtf\022\017\n\007ski"
    "llId\030\001 \001(\r\022\030\n\020releaser_role_id\030\002 \001(\r\022\024\n\014"
    "target_pos_x\030\003 \001(\002\022\024\n\014target_pos_y\030\004 \001(\002"
    "\022\021\n\ttarget_id\030\005 \001(\r\022,\n\013target_type\030\006 \001(\016"
    "2\027.IGameProto.TARGET_TYPE\022\r\n\005param\030\007 \001(\r"
    "\"8\n\020MsgChangeModeReq\022$\n\004mode\030\001 \001(\0162\026.IGa"
    "meProto.EM_PK_MODE\"\"\n\020MsgChangeModeAck\022\016"
    "\n\006result\030\001 \001(\r\"8\n\020MsgChangeModeNtf\022$\n\004mo"
    "de\030\001 \001(\0162\026.IGameProto.EM_PK_MODE\"H\n\020MsgP"
    "layerKillReq\022\016\n\006roleId\030\001 \001(\r\022$\n\004mode\030\002 \001"
    "(\0162\026.IGameProto.EM_PK_MODE\"\"\n\020MsgPlayerK"
    "illAck\022\016\n\006result\030\001 \001(\r\"V\n\020MsgPlayerKillN"
    "tf\022\016\n\006roleId\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022$\n\004mode"
    "\030\003 \001(\0162\026.IGameProto.EM_PK_MODE\"\\\n\026MsgCan"
    "celPlayerKillReq\022\016\n\006roleId\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\t\022$\n\004mode\030\003 \001(\0162\026.IGameProto.EM_PK_"
    "MODE\"(\n\026MsgCancelPlayerKillAck\022\016\n\006result"
    "\030\001 \001(\r\"\\\n\026MsgCancelPlayerKillNtf\022\016\n\006role"
    "Id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022$\n\004mode\030\003 \001(\0162\026.I"
    "GameProto.EM_PK_MODE\"=\n\026MsgPlayerKillAns"
    "werReq\022\016\n\006roleId\030\001 \001(\r\022\023\n\013answer_type\030\002 "
    "\001(\r\"(\n\026MsgPlayerKillAnswerAck\022\016\n\006result\030"
    "\001 \001(\r\";\n\026MsgPlayerKillAnswerNtf\022\014\n\004name\030"
    "\001 \001(\t\022\023\n\013answer_type\030\002 \001(\r\"H\n\020MsgEnterFi"
    "ghtReq\022\016\n\006roleId\030\001 \001(\r\022$\n\004mode\030\002 \001(\0162\026.I"
    "GameProto.EM_PK_MODE\"\"\n\020MsgEnterFightAck"
    "\022\016\n\006result\030\001 \001(\r\"(\n\022MsgQueryAgainstReq\022\022"
    "\n\ncreatureId\030\001 \001(\r\"U\n\022MsgQueryAgainstAck"
    "\022\025\n\ragainstFormId\030\001 \001(\r\022(\n\tenemySide\030\002 \001"
    "(\0132\025.IGameProto.FightSide\"\036\n\014MsgAreaIdNt"
    "f\022\016\n\006areaId\030\001 \001(\r\"V\n\025MsgMonsterLanguageN"
    "tf\022\022\n\ncreatureId\030\003 \001(\005\022\r\n\005proir\030\001 \001(\005\022\032\n"
    "\022notice_language_id\030\002 \001(\t\"\034\n\nMsgDeadNtf\022"
    "\016\n\006roleId\030\001 \001(\r\"I\n\014MsgRiviveReq\022%\n\004mode\030"
    "\001 \001(\0162\027.IGameProto.RIVIVE_MODE\022\022\n\ncountr"
    "y_id\030\002 \001(\r\"4\n\014MsgRiviveNtf\022\016\n\006roleId\030\001 \001"
    "(\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002*B\n\013ServerState\022"
    "\014\n\010NOT_INIT\020\000\022\n\n\006NORMAL\020\001\022\010\n\004BUSY\020\002\022\017\n\013M"
    "AINTAINING\020\003*I\n\nEM_PK_MODE\022\014\n\010PK_PEACE\020\001"
    "\022\020\n\014PK_SLAUGHTER\020\002\022\013\n\007PK_ARMY\020\003\022\016\n\nPK_CO"
    "UNTRY\020\004*8\n\nActionType\022\n\n\006UNINIT\020\000\022\010\n\004MOV"
    "E\020\001\022\010\n\004WALK\020\002\022\n\n\006ATTACK\020\003*\250\002\n\014OFFICER_TY"
    "PE\022\025\n\021OFFICER_TYPE_NONE\020\000\022\025\n\021OFFICER_TYP"
    "E_KING\020\001\022\030\n\024OFFICER_TYPE_GENERAL\020\002\022\037\n\033OF"
    "FICER_TYPE_PRIME_MINISTER\020\003\022&\n\"OFFICER_T"
    "YPE_AGILE_CAVALRY_GENERAL\020\004\022\"\n\036OFFICER_T"
    "YPE_CHIEF_SECRETARIAT\020\005\022$\n OFFICER_TYPE_"
    "CHIEF_CAPITAL_GUARD\020\006\022\035\n\031OFFICER_TYPE_LE"
    "FT_GENERAL\020\007\022\036\n\032OFFICER_TYPE_RIGHT_GENER"
    "AL\020\010*\214\001\n\017ArmyOfficerType\022\032\n\026ARMY_OFFICER"
    "_TYPE_NONE\020\000\022\035\n\031ARMY_OFFICER_TYPE_GENERA"
    "L\020\001\022\"\n\036ARMY_OFFICER_TYPE_VICE_GENERAL\020\002\022"
    "\032\n\026ARMY_OFFICER_TYPE_ELIT\020\003*`\n\rCOUNTRY_S"
    "TATE\022\030\n\024COUNTRY_STATE_LOCKED\020\000\022\032\n\026COUNTR"
    "Y_STATE_UNLOCKED\020\001\022\031\n\025COUNTRY_STATE_SYST"
    "ERM\020\002*O\n\nMONEY_TYPE\022\023\n\017MONEY_TYPE_GOLD\020\001"
    "\022\025\n\021MONEY_TYPE_SILVER\020\002\022\025\n\021MONEY_TYPE_CO"
    "PPER\020\003*s\n\nCITY_STATE\022\031\n\025CITY_STATE_INVIN"
    "CIBLE\020\001\022\030\n\024CITY_STATE_DESTROYED\020\002\022\027\n\023CIT"
    "Y_STATE_ATTACKER\020\003\022\027\n\023CITY_STATE_ATTACKE"
    "E\020\004*^\n\tROLE_MODE\022\022\n\016ROLE_MODE_USER\020\001\022\025\n\021"
    "ROLE_MODE_VEHICHE\020\002\022\022\n\016ROLE_MODE_BIRD\020\003\022"
    "\022\n\016ROLE_MODE_RIDE\020\004*i\n\016ROLE_ATTR_TYPE\022\034\n"
    "\030ROLE_ATTR_TYPE_ROLE_MODE\020\001\022\032\n\026ROLE_ATTR"
    "_TYPE_PK_MODE\020\002\022\035\n\031ROLE_ATTR_TYPE_RIDE_S"
    "PEED\020\003*O\n\013TARGET_TYPE\022\024\n\020TARGET_TYPE_ROL"
    "E\020\001\022\024\n\020TARGET_TYPE_CITY\020\002\022\024\n\020TARGET_TYPE"
    "_BOSS\020\003*\225\001\n\013EM_PKRESULT\022\021\n\rPKRESULT_SUCC"
    "\020\000\022\025\n\021PKRESULT_INBATTLE\020\001\022\031\n\025PKRESULT_IN"
    "SAFETYZONE\020\002\022\024\n\020PKRESULT_NOPROPS\020\003\022\025\n\021PK"
    "RESULT_NOTARGET\020\004\022\024\n\020PKRESULT_ERRMODE\020\005*"
    "[\n\013RIVIVE_MODE\022\027\n\023RIVIVE_MODE_NO_MOVE\020\001\022"
    "\032\n\026RIVIVE_MODE_RIVIVE_POS\020\002\022\027\n\023RIVIVE_MO"
    "DE_REVENGE\020\003", 11932);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IGame.proto", &protobuf_RegisterTypes);
  MsgHeartBeat::default_instance_ = new MsgHeartBeat();
  MsgLoginReq::default_instance_ = new MsgLoginReq();
  RoleInfo::default_instance_ = new RoleInfo();
  ServerInfo::default_instance_ = new ServerInfo();
  MsgLoginAck::default_instance_ = new MsgLoginAck();
  MsgCreateRoleReq::default_instance_ = new MsgCreateRoleReq();
  MsgCreateRoleAck::default_instance_ = new MsgCreateRoleAck();
  MsgSelectRoleReq::default_instance_ = new MsgSelectRoleReq();
  MsgSelectRoleAck::default_instance_ = new MsgSelectRoleAck();
  MsgEnterSceneNtf::default_instance_ = new MsgEnterSceneNtf();
  MsgEnterSceneReq::default_instance_ = new MsgEnterSceneReq();
  MsgJumpSceneReq::default_instance_ = new MsgJumpSceneReq();
  MsgJumpSceneNtf::default_instance_ = new MsgJumpSceneNtf();
  SceneRoleInfo::default_instance_ = new SceneRoleInfo();
  MsgRoleIntoVisionNtf::default_instance_ = new MsgRoleIntoVisionNtf();
  MsgRoleOutofVisionNtf::default_instance_ = new MsgRoleOutofVisionNtf();
  Pos::default_instance_ = new Pos();
  MsgActionReq::default_instance_ = new MsgActionReq();
  MsgActionNtf::default_instance_ = new MsgActionNtf();
  HeroInfo::default_instance_ = new HeroInfo();
  FightAttr::default_instance_ = new FightAttr();
  BaseAttr::default_instance_ = new BaseAttr();
  MsgHeroAttr::default_instance_ = new MsgHeroAttr();
  TaskState::default_instance_ = new TaskState();
  MsgTaskListNfy::default_instance_ = new MsgTaskListNfy();
  MsgAcceptTaskReq::default_instance_ = new MsgAcceptTaskReq();
  MsgAcceptTaskAck::default_instance_ = new MsgAcceptTaskAck();
  MsgCommitTaskReq::default_instance_ = new MsgCommitTaskReq();
  MsgCommitTaskAck::default_instance_ = new MsgCommitTaskAck();
  MsgDropTaskReq::default_instance_ = new MsgDropTaskReq();
  MsgDropTaskAck::default_instance_ = new MsgDropTaskAck();
  MsgTaskChangeNfy::default_instance_ = new MsgTaskChangeNfy();
  MsgGmCmdReq::default_instance_ = new MsgGmCmdReq();
  MsgGmCmdAck::default_instance_ = new MsgGmCmdAck();
  FormPair::default_instance_ = new FormPair();
  Formation::default_instance_ = new Formation();
  MsgSaveFormation::default_instance_ = new MsgSaveFormation();
  MsgSaveFormationAck::default_instance_ = new MsgSaveFormationAck();
  MsgFormationNty::default_instance_ = new MsgFormationNty();
  MsgAttrChangeNfy::default_instance_ = new MsgAttrChangeNfy();
  MonsterUnit::default_instance_ = new MonsterUnit();
  MsgKillMonster::default_instance_ = new MsgKillMonster();
  ItemBaseInfo::default_instance_ = new ItemBaseInfo();
  ItemExtraInfo::default_instance_ = new ItemExtraInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  MsgGetBagItemsNfy::default_instance_ = new MsgGetBagItemsNfy();
  MsgItemsChangedNfy::default_instance_ = new MsgItemsChangedNfy();
  MsgUseBagItemReq::default_instance_ = new MsgUseBagItemReq();
  MsgUseBagItemAck::default_instance_ = new MsgUseBagItemAck();
  FightSide::default_instance_ = new FightSide();
  MsgMonsterAgainstReq::default_instance_ = new MsgMonsterAgainstReq();
  MsgMonsterAgainstAck::default_instance_ = new MsgMonsterAgainstAck();
  MsgPvpReq::default_instance_ = new MsgPvpReq();
  MsgPvpAck::default_instance_ = new MsgPvpAck();
  MsgPvpCancelReq::default_instance_ = new MsgPvpCancelReq();
  MsgPvpNtf::default_instance_ = new MsgPvpNtf();
  MsgLoadFightResProgressReq::default_instance_ = new MsgLoadFightResProgressReq();
  MsgLoadFightResProgressNtf::default_instance_ = new MsgLoadFightResProgressNtf();
  MsgFightStartReq::default_instance_ = new MsgFightStartReq();
  MsgFightStartNtf::default_instance_ = new MsgFightStartNtf();
  MsgFightEndReq::default_instance_ = new MsgFightEndReq();
  MsgFightEndNtf::default_instance_ = new MsgFightEndNtf();
  SkillInfo::default_instance_ = new SkillInfo();
  DamageInfo::default_instance_ = new DamageInfo();
  BuffInfo::default_instance_ = new BuffInfo();
  AttackInfo::default_instance_ = new AttackInfo();
  MsgAttackReq::default_instance_ = new MsgAttackReq();
  MsgAttackAck::default_instance_ = new MsgAttackAck();
  MsgAttackNtf::default_instance_ = new MsgAttackNtf();
  MsgRoundStartReq::default_instance_ = new MsgRoundStartReq();
  MsgRoundEndReq::default_instance_ = new MsgRoundEndReq();
  MsgBuildInfoNtf::default_instance_ = new MsgBuildInfoNtf();
  MsgGetBuildCoppperReq::default_instance_ = new MsgGetBuildCoppperReq();
  MsgGetBuildCoppperAck::default_instance_ = new MsgGetBuildCoppperAck();
  MsgUpgradeInteriorBuildReq::default_instance_ = new MsgUpgradeInteriorBuildReq();
  MsgUpgradeInteriorBuildAck::default_instance_ = new MsgUpgradeInteriorBuildAck();
  MsgInteriorTaskFinishedNtf::default_instance_ = new MsgInteriorTaskFinishedNtf();
  MsgDispatchTaskReq::default_instance_ = new MsgDispatchTaskReq();
  MsgDispatchTaskAck::default_instance_ = new MsgDispatchTaskAck();
  MsgRefreshTaskReq::default_instance_ = new MsgRefreshTaskReq();
  MsgRefreshTaskAck::default_instance_ = new MsgRefreshTaskAck();
  MsgUpgradeTaskStarLevelReq::default_instance_ = new MsgUpgradeTaskStarLevelReq();
  MsgUpgradeTaskStarLevelAck::default_instance_ = new MsgUpgradeTaskStarLevelAck();
  MsgGetInteriorRewardReq::default_instance_ = new MsgGetInteriorRewardReq();
  MsgGetInteriorRewardAck::default_instance_ = new MsgGetInteriorRewardAck();
  MsgCompleteInteriorTaskReq::default_instance_ = new MsgCompleteInteriorTaskReq();
  MsgCompleteInteriorTaskAck::default_instance_ = new MsgCompleteInteriorTaskAck();
  MsgCreateArmyReq::default_instance_ = new MsgCreateArmyReq();
  MsgCreateArmyAck::default_instance_ = new MsgCreateArmyAck();
  MsgJoinArmyReq::default_instance_ = new MsgJoinArmyReq();
  MsgJoinArmyAck::default_instance_ = new MsgJoinArmyAck();
  MsgApproveJoinArmyReq::default_instance_ = new MsgApproveJoinArmyReq();
  MsgApproveJoinArmyAck::default_instance_ = new MsgApproveJoinArmyAck();
  MsgLeaveArmyReq::default_instance_ = new MsgLeaveArmyReq();
  MsgJoinCountryReq::default_instance_ = new MsgJoinCountryReq();
  MsgLeaveCountryReq::default_instance_ = new MsgLeaveCountryReq();
  MsgCountryAssignReq::default_instance_ = new MsgCountryAssignReq();
  MsgArmyAssignReq::default_instance_ = new MsgArmyAssignReq();
  officer::default_instance_ = new officer();
  ArmyInfo::default_instance_ = new ArmyInfo();
  CountryInfo::default_instance_ = new CountryInfo();
  MsgCountryInofNtf::default_instance_ = new MsgCountryInofNtf();
  MsgCallWarReq::default_instance_ = new MsgCallWarReq();
  MsgCallWarAck::default_instance_ = new MsgCallWarAck();
  CallWarInfo::default_instance_ = new CallWarInfo();
  MsgCallWarInfoReq::default_instance_ = new MsgCallWarInfoReq();
  MsgCallWarInfoAck::default_instance_ = new MsgCallWarInfoAck();
  MsgExchangeMoneyReq::default_instance_ = new MsgExchangeMoneyReq();
  MsgExchangeMoneyAck::default_instance_ = new MsgExchangeMoneyAck();
  HpInfo::default_instance_ = new HpInfo();
  CityInfo::default_instance_ = new CityInfo();
  MsgEnterCityVisionNtf::default_instance_ = new MsgEnterCityVisionNtf();
  MsgOutofCityVisionNtf::default_instance_ = new MsgOutofCityVisionNtf();
  MsgCityInfoNtf::default_instance_ = new MsgCityInfoNtf();
  MsgEnterCityReq::default_instance_ = new MsgEnterCityReq();
  MsgEnterCityAck::default_instance_ = new MsgEnterCityAck();
  MsgCountryBattleEndNtf::default_instance_ = new MsgCountryBattleEndNtf();
  MsgCountryBattleStartNtf::default_instance_ = new MsgCountryBattleStartNtf();
  MsgSystemHintNtf::default_instance_ = new MsgSystemHintNtf();
  MsgReconnectReq::default_instance_ = new MsgReconnectReq();
  MsgReconnectAck::default_instance_ = new MsgReconnectAck();
  MsgTransReq::default_instance_ = new MsgTransReq();
  MsgTransAck::default_instance_ = new MsgTransAck();
  MsgTriggerMonsterNtf::default_instance_ = new MsgTriggerMonsterNtf();
  MsgChangeRoleModeReq::default_instance_ = new MsgChangeRoleModeReq();
  RoleAttr::default_instance_ = new RoleAttr();
  MsgRoleAttrChangeNtf::default_instance_ = new MsgRoleAttrChangeNtf();
  MonsterId::default_instance_ = new MonsterId();
  MsgMonsterListNtf::default_instance_ = new MsgMonsterListNtf();
  MsgReleaseSkillReq::default_instance_ = new MsgReleaseSkillReq();
  MsgReleaseSkillAck::default_instance_ = new MsgReleaseSkillAck();
  MsgReleaseSkillNtf::default_instance_ = new MsgReleaseSkillNtf();
  MsgChangeModeReq::default_instance_ = new MsgChangeModeReq();
  MsgChangeModeAck::default_instance_ = new MsgChangeModeAck();
  MsgChangeModeNtf::default_instance_ = new MsgChangeModeNtf();
  MsgPlayerKillReq::default_instance_ = new MsgPlayerKillReq();
  MsgPlayerKillAck::default_instance_ = new MsgPlayerKillAck();
  MsgPlayerKillNtf::default_instance_ = new MsgPlayerKillNtf();
  MsgCancelPlayerKillReq::default_instance_ = new MsgCancelPlayerKillReq();
  MsgCancelPlayerKillAck::default_instance_ = new MsgCancelPlayerKillAck();
  MsgCancelPlayerKillNtf::default_instance_ = new MsgCancelPlayerKillNtf();
  MsgPlayerKillAnswerReq::default_instance_ = new MsgPlayerKillAnswerReq();
  MsgPlayerKillAnswerAck::default_instance_ = new MsgPlayerKillAnswerAck();
  MsgPlayerKillAnswerNtf::default_instance_ = new MsgPlayerKillAnswerNtf();
  MsgEnterFightReq::default_instance_ = new MsgEnterFightReq();
  MsgEnterFightAck::default_instance_ = new MsgEnterFightAck();
  MsgQueryAgainstReq::default_instance_ = new MsgQueryAgainstReq();
  MsgQueryAgainstAck::default_instance_ = new MsgQueryAgainstAck();
  MsgAreaIdNtf::default_instance_ = new MsgAreaIdNtf();
  MsgMonsterLanguageNtf::default_instance_ = new MsgMonsterLanguageNtf();
  MsgDeadNtf::default_instance_ = new MsgDeadNtf();
  MsgRiviveReq::default_instance_ = new MsgRiviveReq();
  MsgRiviveNtf::default_instance_ = new MsgRiviveNtf();
  MsgHeartBeat::default_instance_->InitAsDefaultInstance();
  MsgLoginReq::default_instance_->InitAsDefaultInstance();
  RoleInfo::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  MsgLoginAck::default_instance_->InitAsDefaultInstance();
  MsgCreateRoleReq::default_instance_->InitAsDefaultInstance();
  MsgCreateRoleAck::default_instance_->InitAsDefaultInstance();
  MsgSelectRoleReq::default_instance_->InitAsDefaultInstance();
  MsgSelectRoleAck::default_instance_->InitAsDefaultInstance();
  MsgEnterSceneNtf::default_instance_->InitAsDefaultInstance();
  MsgEnterSceneReq::default_instance_->InitAsDefaultInstance();
  MsgJumpSceneReq::default_instance_->InitAsDefaultInstance();
  MsgJumpSceneNtf::default_instance_->InitAsDefaultInstance();
  SceneRoleInfo::default_instance_->InitAsDefaultInstance();
  MsgRoleIntoVisionNtf::default_instance_->InitAsDefaultInstance();
  MsgRoleOutofVisionNtf::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  MsgActionReq::default_instance_->InitAsDefaultInstance();
  MsgActionNtf::default_instance_->InitAsDefaultInstance();
  HeroInfo::default_instance_->InitAsDefaultInstance();
  FightAttr::default_instance_->InitAsDefaultInstance();
  BaseAttr::default_instance_->InitAsDefaultInstance();
  MsgHeroAttr::default_instance_->InitAsDefaultInstance();
  TaskState::default_instance_->InitAsDefaultInstance();
  MsgTaskListNfy::default_instance_->InitAsDefaultInstance();
  MsgAcceptTaskReq::default_instance_->InitAsDefaultInstance();
  MsgAcceptTaskAck::default_instance_->InitAsDefaultInstance();
  MsgCommitTaskReq::default_instance_->InitAsDefaultInstance();
  MsgCommitTaskAck::default_instance_->InitAsDefaultInstance();
  MsgDropTaskReq::default_instance_->InitAsDefaultInstance();
  MsgDropTaskAck::default_instance_->InitAsDefaultInstance();
  MsgTaskChangeNfy::default_instance_->InitAsDefaultInstance();
  MsgGmCmdReq::default_instance_->InitAsDefaultInstance();
  MsgGmCmdAck::default_instance_->InitAsDefaultInstance();
  FormPair::default_instance_->InitAsDefaultInstance();
  Formation::default_instance_->InitAsDefaultInstance();
  MsgSaveFormation::default_instance_->InitAsDefaultInstance();
  MsgSaveFormationAck::default_instance_->InitAsDefaultInstance();
  MsgFormationNty::default_instance_->InitAsDefaultInstance();
  MsgAttrChangeNfy::default_instance_->InitAsDefaultInstance();
  MonsterUnit::default_instance_->InitAsDefaultInstance();
  MsgKillMonster::default_instance_->InitAsDefaultInstance();
  ItemBaseInfo::default_instance_->InitAsDefaultInstance();
  ItemExtraInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  MsgGetBagItemsNfy::default_instance_->InitAsDefaultInstance();
  MsgItemsChangedNfy::default_instance_->InitAsDefaultInstance();
  MsgUseBagItemReq::default_instance_->InitAsDefaultInstance();
  MsgUseBagItemAck::default_instance_->InitAsDefaultInstance();
  FightSide::default_instance_->InitAsDefaultInstance();
  MsgMonsterAgainstReq::default_instance_->InitAsDefaultInstance();
  MsgMonsterAgainstAck::default_instance_->InitAsDefaultInstance();
  MsgPvpReq::default_instance_->InitAsDefaultInstance();
  MsgPvpAck::default_instance_->InitAsDefaultInstance();
  MsgPvpCancelReq::default_instance_->InitAsDefaultInstance();
  MsgPvpNtf::default_instance_->InitAsDefaultInstance();
  MsgLoadFightResProgressReq::default_instance_->InitAsDefaultInstance();
  MsgLoadFightResProgressNtf::default_instance_->InitAsDefaultInstance();
  MsgFightStartReq::default_instance_->InitAsDefaultInstance();
  MsgFightStartNtf::default_instance_->InitAsDefaultInstance();
  MsgFightEndReq::default_instance_->InitAsDefaultInstance();
  MsgFightEndNtf::default_instance_->InitAsDefaultInstance();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  DamageInfo::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  AttackInfo::default_instance_->InitAsDefaultInstance();
  MsgAttackReq::default_instance_->InitAsDefaultInstance();
  MsgAttackAck::default_instance_->InitAsDefaultInstance();
  MsgAttackNtf::default_instance_->InitAsDefaultInstance();
  MsgRoundStartReq::default_instance_->InitAsDefaultInstance();
  MsgRoundEndReq::default_instance_->InitAsDefaultInstance();
  MsgBuildInfoNtf::default_instance_->InitAsDefaultInstance();
  MsgGetBuildCoppperReq::default_instance_->InitAsDefaultInstance();
  MsgGetBuildCoppperAck::default_instance_->InitAsDefaultInstance();
  MsgUpgradeInteriorBuildReq::default_instance_->InitAsDefaultInstance();
  MsgUpgradeInteriorBuildAck::default_instance_->InitAsDefaultInstance();
  MsgInteriorTaskFinishedNtf::default_instance_->InitAsDefaultInstance();
  MsgDispatchTaskReq::default_instance_->InitAsDefaultInstance();
  MsgDispatchTaskAck::default_instance_->InitAsDefaultInstance();
  MsgRefreshTaskReq::default_instance_->InitAsDefaultInstance();
  MsgRefreshTaskAck::default_instance_->InitAsDefaultInstance();
  MsgUpgradeTaskStarLevelReq::default_instance_->InitAsDefaultInstance();
  MsgUpgradeTaskStarLevelAck::default_instance_->InitAsDefaultInstance();
  MsgGetInteriorRewardReq::default_instance_->InitAsDefaultInstance();
  MsgGetInteriorRewardAck::default_instance_->InitAsDefaultInstance();
  MsgCompleteInteriorTaskReq::default_instance_->InitAsDefaultInstance();
  MsgCompleteInteriorTaskAck::default_instance_->InitAsDefaultInstance();
  MsgCreateArmyReq::default_instance_->InitAsDefaultInstance();
  MsgCreateArmyAck::default_instance_->InitAsDefaultInstance();
  MsgJoinArmyReq::default_instance_->InitAsDefaultInstance();
  MsgJoinArmyAck::default_instance_->InitAsDefaultInstance();
  MsgApproveJoinArmyReq::default_instance_->InitAsDefaultInstance();
  MsgApproveJoinArmyAck::default_instance_->InitAsDefaultInstance();
  MsgLeaveArmyReq::default_instance_->InitAsDefaultInstance();
  MsgJoinCountryReq::default_instance_->InitAsDefaultInstance();
  MsgLeaveCountryReq::default_instance_->InitAsDefaultInstance();
  MsgCountryAssignReq::default_instance_->InitAsDefaultInstance();
  MsgArmyAssignReq::default_instance_->InitAsDefaultInstance();
  officer::default_instance_->InitAsDefaultInstance();
  ArmyInfo::default_instance_->InitAsDefaultInstance();
  CountryInfo::default_instance_->InitAsDefaultInstance();
  MsgCountryInofNtf::default_instance_->InitAsDefaultInstance();
  MsgCallWarReq::default_instance_->InitAsDefaultInstance();
  MsgCallWarAck::default_instance_->InitAsDefaultInstance();
  CallWarInfo::default_instance_->InitAsDefaultInstance();
  MsgCallWarInfoReq::default_instance_->InitAsDefaultInstance();
  MsgCallWarInfoAck::default_instance_->InitAsDefaultInstance();
  MsgExchangeMoneyReq::default_instance_->InitAsDefaultInstance();
  MsgExchangeMoneyAck::default_instance_->InitAsDefaultInstance();
  HpInfo::default_instance_->InitAsDefaultInstance();
  CityInfo::default_instance_->InitAsDefaultInstance();
  MsgEnterCityVisionNtf::default_instance_->InitAsDefaultInstance();
  MsgOutofCityVisionNtf::default_instance_->InitAsDefaultInstance();
  MsgCityInfoNtf::default_instance_->InitAsDefaultInstance();
  MsgEnterCityReq::default_instance_->InitAsDefaultInstance();
  MsgEnterCityAck::default_instance_->InitAsDefaultInstance();
  MsgCountryBattleEndNtf::default_instance_->InitAsDefaultInstance();
  MsgCountryBattleStartNtf::default_instance_->InitAsDefaultInstance();
  MsgSystemHintNtf::default_instance_->InitAsDefaultInstance();
  MsgReconnectReq::default_instance_->InitAsDefaultInstance();
  MsgReconnectAck::default_instance_->InitAsDefaultInstance();
  MsgTransReq::default_instance_->InitAsDefaultInstance();
  MsgTransAck::default_instance_->InitAsDefaultInstance();
  MsgTriggerMonsterNtf::default_instance_->InitAsDefaultInstance();
  MsgChangeRoleModeReq::default_instance_->InitAsDefaultInstance();
  RoleAttr::default_instance_->InitAsDefaultInstance();
  MsgRoleAttrChangeNtf::default_instance_->InitAsDefaultInstance();
  MonsterId::default_instance_->InitAsDefaultInstance();
  MsgMonsterListNtf::default_instance_->InitAsDefaultInstance();
  MsgReleaseSkillReq::default_instance_->InitAsDefaultInstance();
  MsgReleaseSkillAck::default_instance_->InitAsDefaultInstance();
  MsgReleaseSkillNtf::default_instance_->InitAsDefaultInstance();
  MsgChangeModeReq::default_instance_->InitAsDefaultInstance();
  MsgChangeModeAck::default_instance_->InitAsDefaultInstance();
  MsgChangeModeNtf::default_instance_->InitAsDefaultInstance();
  MsgPlayerKillReq::default_instance_->InitAsDefaultInstance();
  MsgPlayerKillAck::default_instance_->InitAsDefaultInstance();
  MsgPlayerKillNtf::default_instance_->InitAsDefaultInstance();
  MsgCancelPlayerKillReq::default_instance_->InitAsDefaultInstance();
  MsgCancelPlayerKillAck::default_instance_->InitAsDefaultInstance();
  MsgCancelPlayerKillNtf::default_instance_->InitAsDefaultInstance();
  MsgPlayerKillAnswerReq::default_instance_->InitAsDefaultInstance();
  MsgPlayerKillAnswerAck::default_instance_->InitAsDefaultInstance();
  MsgPlayerKillAnswerNtf::default_instance_->InitAsDefaultInstance();
  MsgEnterFightReq::default_instance_->InitAsDefaultInstance();
  MsgEnterFightAck::default_instance_->InitAsDefaultInstance();
  MsgQueryAgainstReq::default_instance_->InitAsDefaultInstance();
  MsgQueryAgainstAck::default_instance_->InitAsDefaultInstance();
  MsgAreaIdNtf::default_instance_->InitAsDefaultInstance();
  MsgMonsterLanguageNtf::default_instance_->InitAsDefaultInstance();
  MsgDeadNtf::default_instance_->InitAsDefaultInstance();
  MsgRiviveReq::default_instance_->InitAsDefaultInstance();
  MsgRiviveNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IGame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IGame_2eproto {
  StaticDescriptorInitializer_IGame_2eproto() {
    protobuf_AddDesc_IGame_2eproto();
  }
} static_descriptor_initializer_IGame_2eproto_;

const ::google::protobuf::EnumDescriptor* ServerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerState_descriptor_;
}
bool ServerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_PK_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_PK_MODE_descriptor_;
}
bool EM_PK_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionType_descriptor_;
}
bool ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OFFICER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFFICER_TYPE_descriptor_;
}
bool OFFICER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArmyOfficerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmyOfficerType_descriptor_;
}
bool ArmyOfficerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* COUNTRY_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COUNTRY_STATE_descriptor_;
}
bool COUNTRY_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MONEY_TYPE_descriptor_;
}
bool MONEY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CITY_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CITY_STATE_descriptor_;
}
bool CITY_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ROLE_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROLE_MODE_descriptor_;
}
bool ROLE_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ROLE_ATTR_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROLE_ATTR_TYPE_descriptor_;
}
bool ROLE_ATTR_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TARGET_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TARGET_TYPE_descriptor_;
}
bool TARGET_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_PKRESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_PKRESULT_descriptor_;
}
bool EM_PKRESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RIVIVE_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RIVIVE_MODE_descriptor_;
}
bool RIVIVE_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHeartBeat::kLastSendTimeFieldNumber;
#endif  // !_MSC_VER

MsgHeartBeat::MsgHeartBeat() {
  SharedCtor();
}

void MsgHeartBeat::InitAsDefaultInstance() {
}

MsgHeartBeat::MsgHeartBeat(const MsgHeartBeat& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  lastsendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeartBeat::~MsgHeartBeat() {
  SharedDtor();
}

void MsgHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeartBeat_descriptor_;
}

const MsgHeartBeat& MsgHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgHeartBeat* MsgHeartBeat::default_instance_ = NULL;

MsgHeartBeat* MsgHeartBeat::New() const {
  return new MsgHeartBeat;
}

void MsgHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastsendtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lastSendTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &lastsendtime_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgHeartBeat::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional float lastSendTime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lastsendtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float lastSendTime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lastsendtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHeartBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lastSendTime = 1;
    if (has_lastsendtime()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeartBeat::MergeFrom(const MsgHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lastsendtime(from.lastsendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeartBeat::CopyFrom(const MsgHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeartBeat::IsInitialized() const {
  
  return true;
}

void MsgHeartBeat::Swap(MsgHeartBeat* other) {
  if (other != this) {
    std::swap(lastsendtime_, other->lastsendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeartBeat_descriptor_;
  metadata.reflection = MsgHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgLoginReq::_default_loginname_;
#ifndef _MSC_VER
const int MsgLoginReq::kLoginNameFieldNumber;
#endif  // !_MSC_VER

MsgLoginReq::MsgLoginReq() {
  SharedCtor();
}

void MsgLoginReq::InitAsDefaultInstance() {
}

MsgLoginReq::MsgLoginReq(const MsgLoginReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginReq::SharedCtor() {
  _cached_size_ = 0;
  loginname_ = const_cast< ::std::string*>(&_default_loginname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginReq::~MsgLoginReq() {
  SharedDtor();
}

void MsgLoginReq::SharedDtor() {
  if (loginname_ != &_default_loginname_) {
    delete loginname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginReq_descriptor_;
}

const MsgLoginReq& MsgLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgLoginReq* MsgLoginReq::default_instance_ = NULL;

MsgLoginReq* MsgLoginReq::New() const {
  return new MsgLoginReq;
}

void MsgLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (loginname_ != &_default_loginname_) {
        loginname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string loginName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_loginname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->loginname().data(), this->loginname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLoginReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string loginName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->loginname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string loginName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginname().data(), this->loginname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loginname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string loginName = 1;
    if (has_loginname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginReq::MergeFrom(const MsgLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_loginname(from.loginname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginReq::CopyFrom(const MsgLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgLoginReq::Swap(MsgLoginReq* other) {
  if (other != this) {
    std::swap(loginname_, other->loginname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginReq_descriptor_;
  metadata.reflection = MsgLoginReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RoleInfo::_default_rolename_;
#ifndef _MSC_VER
const int RoleInfo::kRoleIdFieldNumber;
const int RoleInfo::kRoleNameFieldNumber;
const int RoleInfo::kRoleTypeFieldNumber;
const int RoleInfo::kSpeedFieldNumber;
const int RoleInfo::kLevelFieldNumber;
const int RoleInfo::kGoldFieldNumber;
const int RoleInfo::kSilverFieldNumber;
const int RoleInfo::kCopperFieldNumber;
const int RoleInfo::kCountryIdFieldNumber;
const int RoleInfo::kArmyIdFieldNumber;
const int RoleInfo::kArmyMemberTypeFieldNumber;
const int RoleInfo::kArmyOfficerTypeFieldNumber;
const int RoleInfo::kOfficesFieldNumber;
const int RoleInfo::kPkmodeFieldNumber;
#endif  // !_MSC_VER

RoleInfo::RoleInfo() {
  SharedCtor();
}

void RoleInfo::InitAsDefaultInstance() {
}

RoleInfo::RoleInfo(const RoleInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  roletype_ = 0;
  speed_ = 0u;
  level_ = 0u;
  gold_ = GOOGLE_ULONGLONG(0);
  silver_ = GOOGLE_ULONGLONG(0);
  copper_ = GOOGLE_ULONGLONG(0);
  country_id_ = 0u;
  army_id_ = 0u;
  army_member_type_ = 0u;
  army_officer_type_ = 0u;
  pkmode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfo::~RoleInfo() {
  SharedDtor();
}

void RoleInfo::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfo_descriptor_;
}

const RoleInfo& RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

RoleInfo* RoleInfo::default_instance_ = NULL;

RoleInfo* RoleInfo::New() const {
  return new RoleInfo;
}

void RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    roletype_ = 0;
    speed_ = 0u;
    level_ = 0u;
    gold_ = GOOGLE_ULONGLONG(0);
    silver_ = GOOGLE_ULONGLONG(0);
    copper_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    country_id_ = 0u;
    army_id_ = 0u;
    army_member_type_ = 0u;
    army_officer_type_ = 0u;
    pkmode_ = 1;
  }
  offices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_roleName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rolename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rolename().data(), this->rolename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_roleType;
        break;
      }
      
      // required int32 roleType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &roletype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }
      
      // required uint32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_speed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &speed_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }
      
      // optional uint64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gold:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &gold_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_silver;
        break;
      }
      
      // optional uint64 silver = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_silver:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &silver_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_copper;
        break;
      }
      
      // optional uint64 copper = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_copper:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &copper_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_country_id;
        break;
      }
      
      // optional uint32 country_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_country_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &country_id_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_army_id;
        break;
      }
      
      // optional uint32 army_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_army_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &army_id_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_army_member_type;
        break;
      }
      
      // optional uint32 army_member_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_army_member_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &army_member_type_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_army_officer_type;
        break;
      }
      
      // optional uint32 army_officer_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_army_officer_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &army_officer_type_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_offices;
        break;
      }
      
      // repeated uint32 offices = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_offices:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_offices(value);
        if (input->ExpectTag(104)) goto parse_offices;
        if (input->ExpectTag(112)) goto parse_pkmode;
        break;
      }
      
      // optional .IGameProto.EM_PK_MODE pkmode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pkmode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_pkmode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(14, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RoleInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // required string roleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  // required int32 roleType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roletype(), output);
  }
  
  // required uint32 speed = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }
  
  // optional uint32 level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint64 gold = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gold(), output);
  }
  
  // optional uint64 silver = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->silver(), output);
  }
  
  // optional uint64 copper = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->copper(), output);
  }
  
  // optional uint32 country_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->country_id(), output);
  }
  
  // optional uint32 army_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->army_id(), output);
  }
  
  // optional uint32 army_member_type = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->army_member_type(), output);
  }
  
  // optional uint32 army_officer_type = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->army_officer_type(), output);
  }
  
  // repeated uint32 offices = 13;
  for (int i = 0; i < this->offices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->offices(i), output);
  }
  
  // optional .IGameProto.EM_PK_MODE pkmode = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->pkmode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // required string roleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  // required int32 roleType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roletype(), target);
  }
  
  // required uint32 speed = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }
  
  // optional uint32 level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint64 gold = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gold(), target);
  }
  
  // optional uint64 silver = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->silver(), target);
  }
  
  // optional uint64 copper = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->copper(), target);
  }
  
  // optional uint32 country_id = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->country_id(), target);
  }
  
  // optional uint32 army_id = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->army_id(), target);
  }
  
  // optional uint32 army_member_type = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->army_member_type(), target);
  }
  
  // optional uint32 army_officer_type = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->army_officer_type(), target);
  }
  
  // repeated uint32 offices = 13;
  for (int i = 0; i < this->offices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->offices(i), target);
  }
  
  // optional .IGameProto.EM_PK_MODE pkmode = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->pkmode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int32 roleType = 3;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletype());
    }
    
    // required uint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }
    
    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }
    
    // optional uint64 silver = 7;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->silver());
    }
    
    // optional uint64 copper = 8;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->copper());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 country_id = 9;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }
    
    // optional uint32 army_id = 10;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }
    
    // optional uint32 army_member_type = 11;
    if (has_army_member_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_member_type());
    }
    
    // optional uint32 army_officer_type = 12;
    if (has_army_officer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_officer_type());
    }
    
    // optional .IGameProto.EM_PK_MODE pkmode = 14;
    if (has_pkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pkmode());
    }
    
  }
  // repeated uint32 offices = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->offices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offices(i));
    }
    total_size += 1 * this->offices_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfo::MergeFrom(const RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  offices_.MergeFrom(from.offices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(2)) {
      set_roletype(from.roletype());
    }
    if (from._has_bit(3)) {
      set_speed(from.speed());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_gold(from.gold());
    }
    if (from._has_bit(6)) {
      set_silver(from.silver());
    }
    if (from._has_bit(7)) {
      set_copper(from.copper());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_country_id(from.country_id());
    }
    if (from._has_bit(9)) {
      set_army_id(from.army_id());
    }
    if (from._has_bit(10)) {
      set_army_member_type(from.army_member_type());
    }
    if (from._has_bit(11)) {
      set_army_officer_type(from.army_officer_type());
    }
    if (from._has_bit(13)) {
      set_pkmode(from.pkmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RoleInfo::Swap(RoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(roletype_, other->roletype_);
    std::swap(speed_, other->speed_);
    std::swap(level_, other->level_);
    std::swap(gold_, other->gold_);
    std::swap(silver_, other->silver_);
    std::swap(copper_, other->copper_);
    std::swap(country_id_, other->country_id_);
    std::swap(army_id_, other->army_id_);
    std::swap(army_member_type_, other->army_member_type_);
    std::swap(army_officer_type_, other->army_officer_type_);
    offices_.Swap(&other->offices_);
    std::swap(pkmode_, other->pkmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfo_descriptor_;
  metadata.reflection = RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ServerInfo::_default_zonename_;
const ::std::string ServerInfo::_default_ip_;
#ifndef _MSC_VER
const int ServerInfo::kZoneNameFieldNumber;
const int ServerInfo::kZoneIdFieldNumber;
const int ServerInfo::kServerStateFieldNumber;
const int ServerInfo::kIpFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kRolesListFieldNumber;
const int ServerInfo::kLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  zonename_ = const_cast< ::std::string*>(&_default_zonename_);
  zoneid_ = 0u;
  serverstate_ = 0;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0;
  lastupdatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (zonename_ != &_default_zonename_) {
    delete zonename_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (zonename_ != &_default_zonename_) {
        zonename_->clear();
      }
    }
    zoneid_ = 0u;
    serverstate_ = 0;
    if (_has_bit(3)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0;
    lastupdatetime_ = GOOGLE_ULONGLONG(0);
  }
  roleslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string zoneName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_zonename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->zonename().data(), this->zonename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_zoneId;
        break;
      }
      
      // required uint32 zoneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_zoneId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &zoneid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_serverState;
        break;
      }
      
      // required .IGameProto.ServerState serverState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_serverState:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ServerState_IsValid(value)) {
          set_serverstate(static_cast< IGameProto::ServerState >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // required string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_ip()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->ip().data(), this->ip().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // required int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &port_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_rolesList;
        break;
      }
      
      // repeated .IGameProto.RoleInfo rolesList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rolesList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_roleslist()));
        if (input->ExpectTag(50)) goto parse_rolesList;
        if (input->ExpectTag(792)) goto parse_lastUpdateTime;
        break;
      }
      
      // optional uint64 lastUpdateTime = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lastUpdateTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &lastupdatetime_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ServerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string zoneName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->zonename(), output);
  }
  
  // required uint32 zoneId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }
  
  // required .IGameProto.ServerState serverState = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->serverstate(), output);
  }
  
  // required string ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  // required int32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }
  
  // repeated .IGameProto.RoleInfo rolesList = 6;
  for (int i = 0; i < this->roleslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->roleslist(i), output);
  }
  
  // optional uint64 lastUpdateTime = 99;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(99, this->lastupdatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string zoneName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->zonename(), target);
  }
  
  // required uint32 zoneId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }
  
  // required .IGameProto.ServerState serverState = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->serverstate(), target);
  }
  
  // required string ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  // required int32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }
  
  // repeated .IGameProto.RoleInfo rolesList = 6;
  for (int i = 0; i < this->roleslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->roleslist(i), target);
  }
  
  // optional uint64 lastUpdateTime = 99;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(99, this->lastupdatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string zoneName = 1;
    if (has_zonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zonename());
    }
    
    // required uint32 zoneId = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }
    
    // required .IGameProto.ServerState serverState = 3;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->serverstate());
    }
    
    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional uint64 lastUpdateTime = 99;
    if (has_lastupdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastupdatetime());
    }
    
  }
  // repeated .IGameProto.RoleInfo rolesList = 6;
  total_size += 1 * this->roleslist_size();
  for (int i = 0; i < this->roleslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleslist_.MergeFrom(from.roleslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_zonename(from.zonename());
    }
    if (from._has_bit(1)) {
      set_zoneid(from.zoneid());
    }
    if (from._has_bit(2)) {
      set_serverstate(from.serverstate());
    }
    if (from._has_bit(3)) {
      set_ip(from.ip());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
    if (from._has_bit(6)) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < roleslist_size(); i++) {
    if (!this->roleslist(i).IsInitialized()) return false;
  }
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(zonename_, other->zonename_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(serverstate_, other->serverstate_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    roleslist_.Swap(&other->roleslist_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginAck::kUserIdFieldNumber;
const int MsgLoginAck::kServersListFieldNumber;
#endif  // !_MSC_VER

MsgLoginAck::MsgLoginAck() {
  SharedCtor();
}

void MsgLoginAck::InitAsDefaultInstance() {
}

MsgLoginAck::MsgLoginAck(const MsgLoginAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginAck::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginAck::~MsgLoginAck() {
  SharedDtor();
}

void MsgLoginAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginAck_descriptor_;
}

const MsgLoginAck& MsgLoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgLoginAck* MsgLoginAck::default_instance_ = NULL;

MsgLoginAck* MsgLoginAck::New() const {
  return new MsgLoginAck;
}

void MsgLoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  serverslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_serversList;
        break;
      }
      
      // repeated .IGameProto.ServerInfo serversList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_serversList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_serverslist()));
        if (input->ExpectTag(18)) goto parse_serversList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLoginAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 userId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // repeated .IGameProto.ServerInfo serversList = 2;
  for (int i = 0; i < this->serverslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->serverslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // repeated .IGameProto.ServerInfo serversList = 2;
  for (int i = 0; i < this->serverslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serverslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
  }
  // repeated .IGameProto.ServerInfo serversList = 2;
  total_size += 1 * this->serverslist_size();
  for (int i = 0; i < this->serverslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginAck::MergeFrom(const MsgLoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverslist_.MergeFrom(from.serverslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginAck::CopyFrom(const MsgLoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < serverslist_size(); i++) {
    if (!this->serverslist(i).IsInitialized()) return false;
  }
  return true;
}

void MsgLoginAck::Swap(MsgLoginAck* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    serverslist_.Swap(&other->serverslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginAck_descriptor_;
  metadata.reflection = MsgLoginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreateRoleReq::kUserIdFieldNumber;
const int MsgCreateRoleReq::kRoleFieldNumber;
#endif  // !_MSC_VER

MsgCreateRoleReq::MsgCreateRoleReq() {
  SharedCtor();
}

void MsgCreateRoleReq::InitAsDefaultInstance() {
  role_ = const_cast< ::IGameProto::RoleInfo*>(&::IGameProto::RoleInfo::default_instance());
}

MsgCreateRoleReq::MsgCreateRoleReq(const MsgCreateRoleReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateRoleReq::~MsgCreateRoleReq() {
  SharedDtor();
}

void MsgCreateRoleReq::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

const ::google::protobuf::Descriptor* MsgCreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateRoleReq_descriptor_;
}

const MsgCreateRoleReq& MsgCreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCreateRoleReq* MsgCreateRoleReq::default_instance_ = NULL;

MsgCreateRoleReq* MsgCreateRoleReq::New() const {
  return new MsgCreateRoleReq;
}

void MsgCreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (_has_bit(1)) {
      if (role_ != NULL) role_->::IGameProto::RoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }
      
      // required .IGameProto.RoleInfo role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_role()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCreateRoleReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 userId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required .IGameProto.RoleInfo role = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required .IGameProto.RoleInfo role = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCreateRoleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required .IGameProto.RoleInfo role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateRoleReq::MergeFrom(const MsgCreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      mutable_role()->::IGameProto::RoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRoleReq::CopyFrom(const MsgCreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void MsgCreateRoleReq::Swap(MsgCreateRoleReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateRoleReq_descriptor_;
  metadata.reflection = MsgCreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreateRoleAck::kRoleFieldNumber;
#endif  // !_MSC_VER

MsgCreateRoleAck::MsgCreateRoleAck() {
  SharedCtor();
}

void MsgCreateRoleAck::InitAsDefaultInstance() {
  role_ = const_cast< ::IGameProto::RoleInfo*>(&::IGameProto::RoleInfo::default_instance());
}

MsgCreateRoleAck::MsgCreateRoleAck(const MsgCreateRoleAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCreateRoleAck::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateRoleAck::~MsgCreateRoleAck() {
  SharedDtor();
}

void MsgCreateRoleAck::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

const ::google::protobuf::Descriptor* MsgCreateRoleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateRoleAck_descriptor_;
}

const MsgCreateRoleAck& MsgCreateRoleAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCreateRoleAck* MsgCreateRoleAck::default_instance_ = NULL;

MsgCreateRoleAck* MsgCreateRoleAck::New() const {
  return new MsgCreateRoleAck;
}

void MsgCreateRoleAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (role_ != NULL) role_->::IGameProto::RoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateRoleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.RoleInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_role()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCreateRoleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCreateRoleAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.RoleInfo role = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCreateRoleAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.RoleInfo role = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCreateRoleAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.RoleInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCreateRoleAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateRoleAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateRoleAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateRoleAck::MergeFrom(const MsgCreateRoleAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_role()->::IGameProto::RoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateRoleAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRoleAck::CopyFrom(const MsgCreateRoleAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRoleAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void MsgCreateRoleAck::Swap(MsgCreateRoleAck* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateRoleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateRoleAck_descriptor_;
  metadata.reflection = MsgCreateRoleAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSelectRoleReq::kUserIdFieldNumber;
const int MsgSelectRoleReq::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgSelectRoleReq::MsgSelectRoleReq() {
  SharedCtor();
}

void MsgSelectRoleReq::InitAsDefaultInstance() {
}

MsgSelectRoleReq::MsgSelectRoleReq(const MsgSelectRoleReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSelectRoleReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSelectRoleReq::~MsgSelectRoleReq() {
  SharedDtor();
}

void MsgSelectRoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgSelectRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSelectRoleReq_descriptor_;
}

const MsgSelectRoleReq& MsgSelectRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgSelectRoleReq* MsgSelectRoleReq::default_instance_ = NULL;

MsgSelectRoleReq* MsgSelectRoleReq::New() const {
  return new MsgSelectRoleReq;
}

void MsgSelectRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSelectRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &userid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }
      
      // required uint32 roleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSelectRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSelectRoleReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 userId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 roleId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSelectRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 roleId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSelectRoleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSelectRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSelectRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSelectRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSelectRoleReq::MergeFrom(const MsgSelectRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSelectRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSelectRoleReq::CopyFrom(const MsgSelectRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSelectRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSelectRoleReq::Swap(MsgSelectRoleReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSelectRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSelectRoleReq_descriptor_;
  metadata.reflection = MsgSelectRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSelectRoleAck::kRoleFieldNumber;
#endif  // !_MSC_VER

MsgSelectRoleAck::MsgSelectRoleAck() {
  SharedCtor();
}

void MsgSelectRoleAck::InitAsDefaultInstance() {
  role_ = const_cast< ::IGameProto::RoleInfo*>(&::IGameProto::RoleInfo::default_instance());
}

MsgSelectRoleAck::MsgSelectRoleAck(const MsgSelectRoleAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSelectRoleAck::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSelectRoleAck::~MsgSelectRoleAck() {
  SharedDtor();
}

void MsgSelectRoleAck::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

const ::google::protobuf::Descriptor* MsgSelectRoleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSelectRoleAck_descriptor_;
}

const MsgSelectRoleAck& MsgSelectRoleAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgSelectRoleAck* MsgSelectRoleAck::default_instance_ = NULL;

MsgSelectRoleAck* MsgSelectRoleAck::New() const {
  return new MsgSelectRoleAck;
}

void MsgSelectRoleAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (role_ != NULL) role_->::IGameProto::RoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSelectRoleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.RoleInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_role()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSelectRoleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSelectRoleAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.RoleInfo role = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSelectRoleAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.RoleInfo role = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSelectRoleAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.RoleInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSelectRoleAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSelectRoleAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSelectRoleAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSelectRoleAck::MergeFrom(const MsgSelectRoleAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_role()->::IGameProto::RoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSelectRoleAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSelectRoleAck::CopyFrom(const MsgSelectRoleAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSelectRoleAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void MsgSelectRoleAck::Swap(MsgSelectRoleAck* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSelectRoleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSelectRoleAck_descriptor_;
  metadata.reflection = MsgSelectRoleAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterSceneNtf::kSceneIdFieldNumber;
const int MsgEnterSceneNtf::kRoleInfoFieldNumber;
const int MsgEnterSceneNtf::kMapIdFieldNumber;
#endif  // !_MSC_VER

MsgEnterSceneNtf::MsgEnterSceneNtf() {
  SharedCtor();
}

void MsgEnterSceneNtf::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::IGameProto::SceneRoleInfo*>(&::IGameProto::SceneRoleInfo::default_instance());
}

MsgEnterSceneNtf::MsgEnterSceneNtf(const MsgEnterSceneNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterSceneNtf::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  roleinfo_ = NULL;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterSceneNtf::~MsgEnterSceneNtf() {
  SharedDtor();
}

void MsgEnterSceneNtf::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

const ::google::protobuf::Descriptor* MsgEnterSceneNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterSceneNtf_descriptor_;
}

const MsgEnterSceneNtf& MsgEnterSceneNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterSceneNtf* MsgEnterSceneNtf::default_instance_ = NULL;

MsgEnterSceneNtf* MsgEnterSceneNtf::New() const {
  return new MsgEnterSceneNtf;
}

void MsgEnterSceneNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    if (_has_bit(1)) {
      if (roleinfo_ != NULL) roleinfo_->::IGameProto::SceneRoleInfo::Clear();
    }
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterSceneNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &sceneid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_roleInfo;
        break;
      }
      
      // required .IGameProto.SceneRoleInfo roleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_roleInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_roleinfo()));
        if (input->ExpectTag(24)) goto parse_mapId;
        break;
      }
      
      // optional uint32 mapId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mapId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterSceneNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterSceneNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 sceneId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // required .IGameProto.SceneRoleInfo roleInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->roleinfo(), output);
  }
  
  // optional uint32 mapId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterSceneNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sceneId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // required .IGameProto.SceneRoleInfo roleInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfo(), target);
  }
  
  // optional uint32 mapId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterSceneNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // required .IGameProto.SceneRoleInfo roleInfo = 2;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }
    
    // optional uint32 mapId = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterSceneNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterSceneNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterSceneNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterSceneNtf::MergeFrom(const MsgEnterSceneNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sceneid(from.sceneid());
    }
    if (from._has_bit(1)) {
      mutable_roleinfo()->::IGameProto::SceneRoleInfo::MergeFrom(from.roleinfo());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterSceneNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterSceneNtf::CopyFrom(const MsgEnterSceneNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterSceneNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_roleinfo()) {
    if (!this->roleinfo().IsInitialized()) return false;
  }
  return true;
}

void MsgEnterSceneNtf::Swap(MsgEnterSceneNtf* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterSceneNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterSceneNtf_descriptor_;
  metadata.reflection = MsgEnterSceneNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterSceneReq::kSceneIdFieldNumber;
#endif  // !_MSC_VER

MsgEnterSceneReq::MsgEnterSceneReq() {
  SharedCtor();
}

void MsgEnterSceneReq::InitAsDefaultInstance() {
}

MsgEnterSceneReq::MsgEnterSceneReq(const MsgEnterSceneReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterSceneReq::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterSceneReq::~MsgEnterSceneReq() {
  SharedDtor();
}

void MsgEnterSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgEnterSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterSceneReq_descriptor_;
}

const MsgEnterSceneReq& MsgEnterSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterSceneReq* MsgEnterSceneReq::default_instance_ = NULL;

MsgEnterSceneReq* MsgEnterSceneReq::New() const {
  return new MsgEnterSceneReq;
}

void MsgEnterSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &sceneid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterSceneReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 sceneId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterSceneReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterSceneReq::MergeFrom(const MsgEnterSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterSceneReq::CopyFrom(const MsgEnterSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterSceneReq::IsInitialized() const {
  
  return true;
}

void MsgEnterSceneReq::Swap(MsgEnterSceneReq* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterSceneReq_descriptor_;
  metadata.reflection = MsgEnterSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJumpSceneReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

MsgJumpSceneReq::MsgJumpSceneReq() {
  SharedCtor();
}

void MsgJumpSceneReq::InitAsDefaultInstance() {
}

MsgJumpSceneReq::MsgJumpSceneReq(const MsgJumpSceneReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgJumpSceneReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJumpSceneReq::~MsgJumpSceneReq() {
  SharedDtor();
}

void MsgJumpSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgJumpSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJumpSceneReq_descriptor_;
}

const MsgJumpSceneReq& MsgJumpSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgJumpSceneReq* MsgJumpSceneReq::default_instance_ = NULL;

MsgJumpSceneReq* MsgJumpSceneReq::New() const {
  return new MsgJumpSceneReq;
}

void MsgJumpSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJumpSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgJumpSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgJumpSceneReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 mapId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgJumpSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgJumpSceneReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgJumpSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJumpSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJumpSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJumpSceneReq::MergeFrom(const MsgJumpSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJumpSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJumpSceneReq::CopyFrom(const MsgJumpSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJumpSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgJumpSceneReq::Swap(MsgJumpSceneReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJumpSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJumpSceneReq_descriptor_;
  metadata.reflection = MsgJumpSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJumpSceneNtf::kMapIdFieldNumber;
const int MsgJumpSceneNtf::kSceneIdFieldNumber;
const int MsgJumpSceneNtf::kXFieldNumber;
const int MsgJumpSceneNtf::kYFieldNumber;
const int MsgJumpSceneNtf::kCityIdFieldNumber;
#endif  // !_MSC_VER

MsgJumpSceneNtf::MsgJumpSceneNtf() {
  SharedCtor();
}

void MsgJumpSceneNtf::InitAsDefaultInstance() {
}

MsgJumpSceneNtf::MsgJumpSceneNtf(const MsgJumpSceneNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgJumpSceneNtf::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  sceneid_ = 0u;
  x_ = 0;
  y_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJumpSceneNtf::~MsgJumpSceneNtf() {
  SharedDtor();
}

void MsgJumpSceneNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgJumpSceneNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJumpSceneNtf_descriptor_;
}

const MsgJumpSceneNtf& MsgJumpSceneNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgJumpSceneNtf* MsgJumpSceneNtf::default_instance_ = NULL;

MsgJumpSceneNtf* MsgJumpSceneNtf::New() const {
  return new MsgJumpSceneNtf;
}

void MsgJumpSceneNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    sceneid_ = 0u;
    x_ = 0;
    y_ = 0;
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJumpSceneNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }
      
      // required uint32 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sceneId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &sceneid_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_X;
        break;
      }
      
      // optional float X = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_X:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &x_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_Y;
        break;
      }
      
      // optional float Y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &y_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_cityId;
        break;
      }
      
      // optional uint32 cityId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &cityid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgJumpSceneNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgJumpSceneNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 mapId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }
  
  // required uint32 sceneId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }
  
  // optional float X = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }
  
  // optional float Y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }
  
  // optional uint32 cityId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgJumpSceneNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // required uint32 sceneId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }
  
  // optional float X = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }
  
  // optional float Y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }
  
  // optional uint32 cityId = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgJumpSceneNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }
    
    // required uint32 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional float X = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float Y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 cityId = 5;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgJumpSceneNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJumpSceneNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJumpSceneNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJumpSceneNtf::MergeFrom(const MsgJumpSceneNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_sceneid(from.sceneid());
    }
    if (from._has_bit(2)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_y(from.y());
    }
    if (from._has_bit(4)) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJumpSceneNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJumpSceneNtf::CopyFrom(const MsgJumpSceneNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJumpSceneNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgJumpSceneNtf::Swap(MsgJumpSceneNtf* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJumpSceneNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJumpSceneNtf_descriptor_;
  metadata.reflection = MsgJumpSceneNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRoleInfo::kRoleFieldNumber;
const int SceneRoleInfo::kXFieldNumber;
const int SceneRoleInfo::kYFieldNumber;
const int SceneRoleInfo::kDirectionFieldNumber;
const int SceneRoleInfo::kActionTypeFieldNumber;
const int SceneRoleInfo::kToXFieldNumber;
const int SceneRoleInfo::kToYFieldNumber;
const int SceneRoleInfo::kCityIdFieldNumber;
const int SceneRoleInfo::kRoleModeFieldNumber;
#endif  // !_MSC_VER

SceneRoleInfo::SceneRoleInfo() {
  SharedCtor();
}

void SceneRoleInfo::InitAsDefaultInstance() {
  role_ = const_cast< ::IGameProto::RoleInfo*>(&::IGameProto::RoleInfo::default_instance());
}

SceneRoleInfo::SceneRoleInfo(const SceneRoleInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void SceneRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  x_ = 0;
  y_ = 0;
  direction_ = 0;
  actiontype_ = 0;
  to_x_ = 0;
  to_y_ = 0;
  cityid_ = 0u;
  rolemode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRoleInfo::~SceneRoleInfo() {
  SharedDtor();
}

void SceneRoleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

const ::google::protobuf::Descriptor* SceneRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRoleInfo_descriptor_;
}

const SceneRoleInfo& SceneRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

SceneRoleInfo* SceneRoleInfo::default_instance_ = NULL;

SceneRoleInfo* SceneRoleInfo::New() const {
  return new SceneRoleInfo;
}

void SceneRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (role_ != NULL) role_->::IGameProto::RoleInfo::Clear();
    }
    x_ = 0;
    y_ = 0;
    direction_ = 0;
    actiontype_ = 0;
    to_x_ = 0;
    to_y_ = 0;
    cityid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rolemode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.RoleInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_role()));
        if (input->ExpectTag(21)) goto parse_X;
        break;
      }
      
      // required float X = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_X:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &x_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_Y;
        break;
      }
      
      // required float Y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &y_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_direction;
        break;
      }
      
      // required float direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &direction_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_actionType;
        break;
      }
      
      // required .IGameProto.ActionType actionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_actionType:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ActionType_IsValid(value)) {
          set_actiontype(static_cast< IGameProto::ActionType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(53)) goto parse_to_x;
        break;
      }
      
      // optional float to_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_to_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &to_x_));
        _set_bit(5);
        if (input->ExpectTag(61)) goto parse_to_y;
        break;
      }
      
      // optional float to_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_to_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &to_y_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_cityId;
        break;
      }
      
      // optional uint32 cityId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cityId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &cityid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_roleMode;
        break;
      }
      
      // optional uint32 roleMode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleMode:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &rolemode_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SceneRoleInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.RoleInfo role = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->role(), output);
  }
  
  // required float X = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float Y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // required float direction = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->direction(), output);
  }
  
  // required .IGameProto.ActionType actionType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->actiontype(), output);
  }
  
  // optional float to_x = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->to_x(), output);
  }
  
  // optional float to_y = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->to_y(), output);
  }
  
  // optional uint32 cityId = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cityid(), output);
  }
  
  // optional uint32 roleMode = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rolemode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.RoleInfo role = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }
  
  // required float X = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  // required float Y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }
  
  // required float direction = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->direction(), target);
  }
  
  // required .IGameProto.ActionType actionType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->actiontype(), target);
  }
  
  // optional float to_x = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->to_x(), target);
  }
  
  // optional float to_y = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->to_y(), target);
  }
  
  // optional uint32 cityId = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cityid(), target);
  }
  
  // optional uint32 roleMode = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rolemode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRoleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.RoleInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }
    
    // required float X = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float Y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float direction = 4;
    if (has_direction()) {
      total_size += 1 + 4;
    }
    
    // required .IGameProto.ActionType actionType = 5;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }
    
    // optional float to_x = 6;
    if (has_to_x()) {
      total_size += 1 + 4;
    }
    
    // optional float to_y = 7;
    if (has_to_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 cityId = 8;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 roleMode = 9;
    if (has_rolemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolemode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SceneRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRoleInfo::MergeFrom(const SceneRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_role()->::IGameProto::RoleInfo::MergeFrom(from.role());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_direction(from.direction());
    }
    if (from._has_bit(4)) {
      set_actiontype(from.actiontype());
    }
    if (from._has_bit(5)) {
      set_to_x(from.to_x());
    }
    if (from._has_bit(6)) {
      set_to_y(from.to_y());
    }
    if (from._has_bit(7)) {
      set_cityid(from.cityid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_rolemode(from.rolemode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRoleInfo::CopyFrom(const SceneRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void SceneRoleInfo::Swap(SceneRoleInfo* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(direction_, other->direction_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(to_x_, other->to_x_);
    std::swap(to_y_, other->to_y_);
    std::swap(cityid_, other->cityid_);
    std::swap(rolemode_, other->rolemode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRoleInfo_descriptor_;
  metadata.reflection = SceneRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleIntoVisionNtf::kRolesListFieldNumber;
#endif  // !_MSC_VER

MsgRoleIntoVisionNtf::MsgRoleIntoVisionNtf() {
  SharedCtor();
}

void MsgRoleIntoVisionNtf::InitAsDefaultInstance() {
}

MsgRoleIntoVisionNtf::MsgRoleIntoVisionNtf(const MsgRoleIntoVisionNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoleIntoVisionNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleIntoVisionNtf::~MsgRoleIntoVisionNtf() {
  SharedDtor();
}

void MsgRoleIntoVisionNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRoleIntoVisionNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleIntoVisionNtf_descriptor_;
}

const MsgRoleIntoVisionNtf& MsgRoleIntoVisionNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRoleIntoVisionNtf* MsgRoleIntoVisionNtf::default_instance_ = NULL;

MsgRoleIntoVisionNtf* MsgRoleIntoVisionNtf::New() const {
  return new MsgRoleIntoVisionNtf;
}

void MsgRoleIntoVisionNtf::Clear() {
  roleslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleIntoVisionNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.SceneRoleInfo rolesList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rolesList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_roleslist()));
        if (input->ExpectTag(10)) goto parse_rolesList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoleIntoVisionNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRoleIntoVisionNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.SceneRoleInfo rolesList = 1;
  for (int i = 0; i < this->roleslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->roleslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRoleIntoVisionNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.SceneRoleInfo rolesList = 1;
  for (int i = 0; i < this->roleslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRoleIntoVisionNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.SceneRoleInfo rolesList = 1;
  total_size += 1 * this->roleslist_size();
  for (int i = 0; i < this->roleslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRoleIntoVisionNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleIntoVisionNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleIntoVisionNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleIntoVisionNtf::MergeFrom(const MsgRoleIntoVisionNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleslist_.MergeFrom(from.roleslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleIntoVisionNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleIntoVisionNtf::CopyFrom(const MsgRoleIntoVisionNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleIntoVisionNtf::IsInitialized() const {
  
  for (int i = 0; i < roleslist_size(); i++) {
    if (!this->roleslist(i).IsInitialized()) return false;
  }
  return true;
}

void MsgRoleIntoVisionNtf::Swap(MsgRoleIntoVisionNtf* other) {
  if (other != this) {
    roleslist_.Swap(&other->roleslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleIntoVisionNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleIntoVisionNtf_descriptor_;
  metadata.reflection = MsgRoleIntoVisionNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleOutofVisionNtf::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgRoleOutofVisionNtf::MsgRoleOutofVisionNtf() {
  SharedCtor();
}

void MsgRoleOutofVisionNtf::InitAsDefaultInstance() {
}

MsgRoleOutofVisionNtf::MsgRoleOutofVisionNtf(const MsgRoleOutofVisionNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoleOutofVisionNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleOutofVisionNtf::~MsgRoleOutofVisionNtf() {
  SharedDtor();
}

void MsgRoleOutofVisionNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRoleOutofVisionNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleOutofVisionNtf_descriptor_;
}

const MsgRoleOutofVisionNtf& MsgRoleOutofVisionNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRoleOutofVisionNtf* MsgRoleOutofVisionNtf::default_instance_ = NULL;

MsgRoleOutofVisionNtf* MsgRoleOutofVisionNtf::New() const {
  return new MsgRoleOutofVisionNtf;
}

void MsgRoleOutofVisionNtf::Clear() {
  roleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleOutofVisionNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleId:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_roleid(value);
        if (input->ExpectTag(8)) goto parse_roleId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoleOutofVisionNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRoleOutofVisionNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 roleId = 1;
  for (int i = 0; i < this->roleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->roleid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRoleOutofVisionNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 roleId = 1;
  for (int i = 0; i < this->roleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->roleid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRoleOutofVisionNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 roleId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->roleid(i));
    }
    total_size += 1 * this->roleid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRoleOutofVisionNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleOutofVisionNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleOutofVisionNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleOutofVisionNtf::MergeFrom(const MsgRoleOutofVisionNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleid_.MergeFrom(from.roleid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleOutofVisionNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleOutofVisionNtf::CopyFrom(const MsgRoleOutofVisionNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleOutofVisionNtf::IsInitialized() const {
  
  return true;
}

void MsgRoleOutofVisionNtf::Swap(MsgRoleOutofVisionNtf* other) {
  if (other != this) {
    roleid_.Swap(&other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleOutofVisionNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleOutofVisionNtf_descriptor_;
  metadata.reflection = MsgRoleOutofVisionNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kYFieldNumber;
#endif  // !_MSC_VER

Pos::Pos() {
  SharedCtor();
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from) {
  SharedCtor();
  MergeFrom(from);
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }
      
      // required float Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &y_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Pos::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float X = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float Y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float X = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float Y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float X = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float Y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgActionReq::kActionTypeFieldNumber;
const int MsgActionReq::kPosesFieldNumber;
const int MsgActionReq::kDirectionFieldNumber;
#endif  // !_MSC_VER

MsgActionReq::MsgActionReq() {
  SharedCtor();
}

void MsgActionReq::InitAsDefaultInstance() {
}

MsgActionReq::MsgActionReq(const MsgActionReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgActionReq::SharedCtor() {
  _cached_size_ = 0;
  actiontype_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActionReq::~MsgActionReq() {
  SharedDtor();
}

void MsgActionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgActionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActionReq_descriptor_;
}

const MsgActionReq& MsgActionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgActionReq* MsgActionReq::default_instance_ = NULL;

MsgActionReq* MsgActionReq::New() const {
  return new MsgActionReq;
}

void MsgActionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actiontype_ = 0;
    direction_ = 0;
  }
  poses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.ActionType actionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ActionType_IsValid(value)) {
          set_actiontype(static_cast< IGameProto::ActionType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_poses;
        break;
      }
      
      // repeated .IGameProto.Pos poses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_poses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_poses()));
        if (input->ExpectTag(18)) goto parse_poses;
        if (input->ExpectTag(29)) goto parse_direction;
        break;
      }
      
      // required float direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &direction_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgActionReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.ActionType actionType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->actiontype(), output);
  }
  
  // repeated .IGameProto.Pos poses = 2;
  for (int i = 0; i < this->poses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->poses(i), output);
  }
  
  // required float direction = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgActionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.ActionType actionType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->actiontype(), target);
  }
  
  // repeated .IGameProto.Pos poses = 2;
  for (int i = 0; i < this->poses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->poses(i), target);
  }
  
  // required float direction = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgActionReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.ActionType actionType = 1;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }
    
    // required float direction = 3;
    if (has_direction()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .IGameProto.Pos poses = 2;
  total_size += 1 * this->poses_size();
  for (int i = 0; i < this->poses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgActionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgActionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgActionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgActionReq::MergeFrom(const MsgActionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  poses_.MergeFrom(from.poses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_actiontype(from.actiontype());
    }
    if (from._has_bit(2)) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgActionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActionReq::CopyFrom(const MsgActionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < poses_size(); i++) {
    if (!this->poses(i).IsInitialized()) return false;
  }
  return true;
}

void MsgActionReq::Swap(MsgActionReq* other) {
  if (other != this) {
    std::swap(actiontype_, other->actiontype_);
    poses_.Swap(&other->poses_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgActionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgActionReq_descriptor_;
  metadata.reflection = MsgActionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgActionNtf::kRoleIdFieldNumber;
const int MsgActionNtf::kActionTypeFieldNumber;
const int MsgActionNtf::kDesPosesFieldNumber;
const int MsgActionNtf::kDirectionFieldNumber;
#endif  // !_MSC_VER

MsgActionNtf::MsgActionNtf() {
  SharedCtor();
}

void MsgActionNtf::InitAsDefaultInstance() {
}

MsgActionNtf::MsgActionNtf(const MsgActionNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgActionNtf::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  actiontype_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActionNtf::~MsgActionNtf() {
  SharedDtor();
}

void MsgActionNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgActionNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActionNtf_descriptor_;
}

const MsgActionNtf& MsgActionNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgActionNtf* MsgActionNtf::default_instance_ = NULL;

MsgActionNtf* MsgActionNtf::New() const {
  return new MsgActionNtf;
}

void MsgActionNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    actiontype_ = 0;
    direction_ = 0;
  }
  desposes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgActionNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_actionType;
        break;
      }
      
      // required .IGameProto.ActionType actionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_actionType:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ActionType_IsValid(value)) {
          set_actiontype(static_cast< IGameProto::ActionType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(26)) goto parse_desPoses;
        break;
      }
      
      // repeated .IGameProto.Pos desPoses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_desPoses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_desposes()));
        if (input->ExpectTag(26)) goto parse_desPoses;
        if (input->ExpectTag(37)) goto parse_direction;
        break;
      }
      
      // required float direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &direction_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgActionNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgActionNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // required .IGameProto.ActionType actionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->actiontype(), output);
  }
  
  // repeated .IGameProto.Pos desPoses = 3;
  for (int i = 0; i < this->desposes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->desposes(i), output);
  }
  
  // required float direction = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgActionNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // required .IGameProto.ActionType actionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->actiontype(), target);
  }
  
  // repeated .IGameProto.Pos desPoses = 3;
  for (int i = 0; i < this->desposes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->desposes(i), target);
  }
  
  // required float direction = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgActionNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // required .IGameProto.ActionType actionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }
    
    // required float direction = 4;
    if (has_direction()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .IGameProto.Pos desPoses = 3;
  total_size += 1 * this->desposes_size();
  for (int i = 0; i < this->desposes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->desposes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgActionNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgActionNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgActionNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgActionNtf::MergeFrom(const MsgActionNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  desposes_.MergeFrom(from.desposes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_actiontype(from.actiontype());
    }
    if (from._has_bit(3)) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgActionNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActionNtf::CopyFrom(const MsgActionNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActionNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  for (int i = 0; i < desposes_size(); i++) {
    if (!this->desposes(i).IsInitialized()) return false;
  }
  return true;
}

void MsgActionNtf::Swap(MsgActionNtf* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(actiontype_, other->actiontype_);
    desposes_.Swap(&other->desposes_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgActionNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgActionNtf_descriptor_;
  metadata.reflection = MsgActionNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroInfo::kIdFieldNumber;
const int HeroInfo::kDataIdFieldNumber;
const int HeroInfo::kLevelFieldNumber;
const int HeroInfo::kExpFieldNumber;
#endif  // !_MSC_VER

HeroInfo::HeroInfo() {
  SharedCtor();
}

void HeroInfo::InitAsDefaultInstance() {
}

HeroInfo::HeroInfo(const HeroInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void HeroInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  data_id_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroInfo::~HeroInfo() {
  SharedDtor();
}

void HeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroInfo_descriptor_;
}

const HeroInfo& HeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

HeroInfo* HeroInfo::default_instance_ = NULL;

HeroInfo* HeroInfo::New() const {
  return new HeroInfo;
}

void HeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    data_id_ = 0;
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_data_id;
        break;
      }
      
      // optional int32 data_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &data_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &exp_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HeroInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional int32 data_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_id(), output);
  }
  
  // optional int32 level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 exp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional int32 data_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_id(), target);
  }
  
  // optional int32 level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 exp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional int32 data_id = 2;
    if (has_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_id());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroInfo::MergeFrom(const HeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_data_id(from.data_id());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroInfo::CopyFrom(const HeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeroInfo::Swap(HeroInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_id_, other->data_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroInfo_descriptor_;
  metadata.reflection = HeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightAttr::kHpFieldNumber;
const int FightAttr::kPhyAttackFieldNumber;
const int FightAttr::kPhyDefenceFieldNumber;
const int FightAttr::kMagicAttackFieldNumber;
const int FightAttr::kMagicDefenseFieldNumber;
const int FightAttr::kRageFieldNumber;
const int FightAttr::kCritFieldNumber;
const int FightAttr::kAntiCritFieldNumber;
const int FightAttr::kCritdamageFieldNumber;
const int FightAttr::kHitRateFieldNumber;
const int FightAttr::kEscapeRateFieldNumber;
const int FightAttr::kBreakParryFieldNumber;
const int FightAttr::kParryFieldNumber;
const int FightAttr::kParryAntiDamageFieldNumber;
const int FightAttr::kDamageIncFieldNumber;
const int FightAttr::kDamageDecFieldNumber;
const int FightAttr::kFightingFieldNumber;
#endif  // !_MSC_VER

FightAttr::FightAttr() {
  SharedCtor();
}

void FightAttr::InitAsDefaultInstance() {
}

FightAttr::FightAttr(const FightAttr& from) {
  SharedCtor();
  MergeFrom(from);
}

void FightAttr::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  phy_attack_ = 0;
  phy_defence_ = 0;
  magic_attack_ = 0;
  magic_defense_ = 0;
  rage_ = 0;
  crit_ = 0;
  anti_crit_ = 0;
  critdamage_ = 0;
  hit_rate_ = 0;
  escape_rate_ = 0;
  break_parry_ = 0;
  parry_ = 0;
  parry_anti_damage_ = 0;
  damage_inc_ = 0;
  damage_dec_ = 0;
  fighting_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightAttr::~FightAttr() {
  SharedDtor();
}

void FightAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FightAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightAttr_descriptor_;
}

const FightAttr& FightAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

FightAttr* FightAttr::default_instance_ = NULL;

FightAttr* FightAttr::New() const {
  return new FightAttr;
}

void FightAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    phy_attack_ = 0;
    phy_defence_ = 0;
    magic_attack_ = 0;
    magic_defense_ = 0;
    rage_ = 0;
    crit_ = 0;
    anti_crit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    critdamage_ = 0;
    hit_rate_ = 0;
    escape_rate_ = 0;
    break_parry_ = 0;
    parry_ = 0;
    parry_anti_damage_ = 0;
    damage_inc_ = 0;
    damage_dec_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fighting_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hp_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_phy_attack;
        break;
      }
      
      // optional int32 phy_attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_phy_attack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &phy_attack_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_phy_defence;
        break;
      }
      
      // optional int32 phy_defence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_phy_defence:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &phy_defence_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_magic_attack;
        break;
      }
      
      // optional int32 magic_attack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_magic_attack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &magic_attack_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_magic_defense;
        break;
      }
      
      // optional int32 magic_defense = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_magic_defense:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &magic_defense_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_rage;
        break;
      }
      
      // optional int32 rage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rage_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_crit;
        break;
      }
      
      // optional int32 crit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_crit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &crit_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_anti_crit;
        break;
      }
      
      // optional int32 anti_crit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_anti_crit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &anti_crit_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_critdamage;
        break;
      }
      
      // optional int32 critdamage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_critdamage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &critdamage_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_hit_rate;
        break;
      }
      
      // optional int32 hit_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hit_rate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hit_rate_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_escape_rate;
        break;
      }
      
      // optional int32 escape_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_escape_rate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &escape_rate_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_break_parry;
        break;
      }
      
      // optional int32 break_parry = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_break_parry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &break_parry_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_parry;
        break;
      }
      
      // optional int32 parry = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &parry_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_parry_anti_damage;
        break;
      }
      
      // optional int32 parry_anti_damage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parry_anti_damage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &parry_anti_damage_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_damage_inc;
        break;
      }
      
      // optional int32 damage_inc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damage_inc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damage_inc_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_damage_dec;
        break;
      }
      
      // optional int32 damage_dec = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damage_dec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &damage_dec_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_fighting;
        break;
      }
      
      // optional int64 fighting = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fighting:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &fighting_));
        _set_bit(16);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FightAttr::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 hp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }
  
  // optional int32 phy_attack = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phy_attack(), output);
  }
  
  // optional int32 phy_defence = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->phy_defence(), output);
  }
  
  // optional int32 magic_attack = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->magic_attack(), output);
  }
  
  // optional int32 magic_defense = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->magic_defense(), output);
  }
  
  // optional int32 rage = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rage(), output);
  }
  
  // optional int32 crit = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->crit(), output);
  }
  
  // optional int32 anti_crit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->anti_crit(), output);
  }
  
  // optional int32 critdamage = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->critdamage(), output);
  }
  
  // optional int32 hit_rate = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hit_rate(), output);
  }
  
  // optional int32 escape_rate = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->escape_rate(), output);
  }
  
  // optional int32 break_parry = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->break_parry(), output);
  }
  
  // optional int32 parry = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->parry(), output);
  }
  
  // optional int32 parry_anti_damage = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->parry_anti_damage(), output);
  }
  
  // optional int32 damage_inc = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->damage_inc(), output);
  }
  
  // optional int32 damage_dec = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->damage_dec(), output);
  }
  
  // optional int64 fighting = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->fighting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }
  
  // optional int32 phy_attack = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phy_attack(), target);
  }
  
  // optional int32 phy_defence = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->phy_defence(), target);
  }
  
  // optional int32 magic_attack = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->magic_attack(), target);
  }
  
  // optional int32 magic_defense = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->magic_defense(), target);
  }
  
  // optional int32 rage = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rage(), target);
  }
  
  // optional int32 crit = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->crit(), target);
  }
  
  // optional int32 anti_crit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->anti_crit(), target);
  }
  
  // optional int32 critdamage = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->critdamage(), target);
  }
  
  // optional int32 hit_rate = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hit_rate(), target);
  }
  
  // optional int32 escape_rate = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->escape_rate(), target);
  }
  
  // optional int32 break_parry = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->break_parry(), target);
  }
  
  // optional int32 parry = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->parry(), target);
  }
  
  // optional int32 parry_anti_damage = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->parry_anti_damage(), target);
  }
  
  // optional int32 damage_inc = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->damage_inc(), target);
  }
  
  // optional int32 damage_dec = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->damage_dec(), target);
  }
  
  // optional int64 fighting = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->fighting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 phy_attack = 2;
    if (has_phy_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_attack());
    }
    
    // optional int32 phy_defence = 3;
    if (has_phy_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_defence());
    }
    
    // optional int32 magic_attack = 4;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_attack());
    }
    
    // optional int32 magic_defense = 5;
    if (has_magic_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_defense());
    }
    
    // optional int32 rage = 6;
    if (has_rage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rage());
    }
    
    // optional int32 crit = 7;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }
    
    // optional int32 anti_crit = 8;
    if (has_anti_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_crit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 critdamage = 9;
    if (has_critdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critdamage());
    }
    
    // optional int32 hit_rate = 10;
    if (has_hit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_rate());
    }
    
    // optional int32 escape_rate = 11;
    if (has_escape_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escape_rate());
    }
    
    // optional int32 break_parry = 12;
    if (has_break_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->break_parry());
    }
    
    // optional int32 parry = 13;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parry());
    }
    
    // optional int32 parry_anti_damage = 14;
    if (has_parry_anti_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parry_anti_damage());
    }
    
    // optional int32 damage_inc = 15;
    if (has_damage_inc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_inc());
    }
    
    // optional int32 damage_dec = 16;
    if (has_damage_dec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_dec());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 fighting = 17;
    if (has_fighting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fighting());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FightAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightAttr::MergeFrom(const FightAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hp(from.hp());
    }
    if (from._has_bit(1)) {
      set_phy_attack(from.phy_attack());
    }
    if (from._has_bit(2)) {
      set_phy_defence(from.phy_defence());
    }
    if (from._has_bit(3)) {
      set_magic_attack(from.magic_attack());
    }
    if (from._has_bit(4)) {
      set_magic_defense(from.magic_defense());
    }
    if (from._has_bit(5)) {
      set_rage(from.rage());
    }
    if (from._has_bit(6)) {
      set_crit(from.crit());
    }
    if (from._has_bit(7)) {
      set_anti_crit(from.anti_crit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_critdamage(from.critdamage());
    }
    if (from._has_bit(9)) {
      set_hit_rate(from.hit_rate());
    }
    if (from._has_bit(10)) {
      set_escape_rate(from.escape_rate());
    }
    if (from._has_bit(11)) {
      set_break_parry(from.break_parry());
    }
    if (from._has_bit(12)) {
      set_parry(from.parry());
    }
    if (from._has_bit(13)) {
      set_parry_anti_damage(from.parry_anti_damage());
    }
    if (from._has_bit(14)) {
      set_damage_inc(from.damage_inc());
    }
    if (from._has_bit(15)) {
      set_damage_dec(from.damage_dec());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_fighting(from.fighting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightAttr::CopyFrom(const FightAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightAttr::IsInitialized() const {
  
  return true;
}

void FightAttr::Swap(FightAttr* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(phy_attack_, other->phy_attack_);
    std::swap(phy_defence_, other->phy_defence_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(magic_defense_, other->magic_defense_);
    std::swap(rage_, other->rage_);
    std::swap(crit_, other->crit_);
    std::swap(anti_crit_, other->anti_crit_);
    std::swap(critdamage_, other->critdamage_);
    std::swap(hit_rate_, other->hit_rate_);
    std::swap(escape_rate_, other->escape_rate_);
    std::swap(break_parry_, other->break_parry_);
    std::swap(parry_, other->parry_);
    std::swap(parry_anti_damage_, other->parry_anti_damage_);
    std::swap(damage_inc_, other->damage_inc_);
    std::swap(damage_dec_, other->damage_dec_);
    std::swap(fighting_, other->fighting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightAttr_descriptor_;
  metadata.reflection = FightAttr_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BaseAttr::_default_name_;
#ifndef _MSC_VER
const int BaseAttr::kTypeFieldNumber;
const int BaseAttr::kIdFieldNumber;
const int BaseAttr::kNameFieldNumber;
const int BaseAttr::kLevelFieldNumber;
const int BaseAttr::kExpFieldNumber;
const int BaseAttr::kSpeciesFieldNumber;
const int BaseAttr::kQualityFieldNumber;
const int BaseAttr::kInFormFieldNumber;
const int BaseAttr::kEquipsFieldNumber;
const int BaseAttr::kFightAttrFieldNumber;
const int BaseAttr::kCountryFieldNumber;
const int BaseAttr::kBreakLevelFieldNumber;
const int BaseAttr::kDestinyLevelFieldNumber;
const int BaseAttr::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

BaseAttr::BaseAttr() {
  SharedCtor();
}

void BaseAttr::InitAsDefaultInstance() {
  fight_attr_ = const_cast< ::IGameProto::FightAttr*>(&::IGameProto::FightAttr::default_instance());
}

BaseAttr::BaseAttr(const BaseAttr& from) {
  SharedCtor();
  MergeFrom(from);
}

void BaseAttr::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  species_ = 0u;
  quality_ = 0u;
  in_form_ = 0u;
  fight_attr_ = NULL;
  country_ = 0u;
  break_level_ = 0u;
  destiny_level_ = 0u;
  unique_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseAttr::~BaseAttr() {
  SharedDtor();
}

void BaseAttr::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete fight_attr_;
  }
}

const ::google::protobuf::Descriptor* BaseAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttr_descriptor_;
}

const BaseAttr& BaseAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

BaseAttr* BaseAttr::default_instance_ = NULL;

BaseAttr* BaseAttr::New() const {
  return new BaseAttr;
}

void BaseAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    species_ = 0u;
    quality_ = 0u;
    in_form_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (_has_bit(9)) {
      if (fight_attr_ != NULL) fight_attr_->::IGameProto::FightAttr::Clear();
    }
    country_ = 0u;
    break_level_ = 0u;
    destiny_level_ = 0u;
    unique_id_ = GOOGLE_ULONGLONG(0);
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional uint64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &exp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_species;
        break;
      }
      
      // optional uint32 species = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_species:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &species_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }
      
      // optional uint32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quality:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &quality_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_in_form;
        break;
      }
      
      // optional uint32 in_form = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_in_form:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &in_form_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_equips;
        break;
      }
      
      // repeated string equips = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_equips:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_equips()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->equips(0).data(), this->equips(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(74)) goto parse_equips;
        if (input->ExpectTag(82)) goto parse_fight_attr;
        break;
      }
      
      // optional .IGameProto.FightAttr fight_attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fight_attr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_fight_attr()));
        if (input->ExpectTag(88)) goto parse_country;
        break;
      }
      
      // optional uint32 country = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_country:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &country_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_break_level;
        break;
      }
      
      // optional uint32 break_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_break_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &break_level_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_destiny_level;
        break;
      }
      
      // optional uint32 destiny_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destiny_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &destiny_level_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_unique_id;
        break;
      }
      
      // optional uint64 unique_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unique_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &unique_id_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BaseAttr::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional uint32 level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional uint64 exp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }
  
  // optional uint32 species = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->species(), output);
  }
  
  // optional uint32 quality = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quality(), output);
  }
  
  // optional uint32 in_form = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->in_form(), output);
  }
  
  // repeated string equips = 9;
  for (int i = 0; i < this->equips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->equips(i).data(), this->equips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->equips(i), output);
  }
  
  // optional .IGameProto.FightAttr fight_attr = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->fight_attr(), output);
  }
  
  // optional uint32 country = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->country(), output);
  }
  
  // optional uint32 break_level = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->break_level(), output);
  }
  
  // optional uint32 destiny_level = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->destiny_level(), output);
  }
  
  // optional uint64 unique_id = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->unique_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional uint32 level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional uint64 exp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->exp(), target);
  }
  
  // optional uint32 species = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->species(), target);
  }
  
  // optional uint32 quality = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quality(), target);
  }
  
  // optional uint32 in_form = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->in_form(), target);
  }
  
  // repeated string equips = 9;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equips(i).data(), this->equips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->equips(i), target);
  }
  
  // optional .IGameProto.FightAttr fight_attr = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fight_attr(), target);
  }
  
  // optional uint32 country = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->country(), target);
  }
  
  // optional uint32 break_level = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->break_level(), target);
  }
  
  // optional uint32 destiny_level = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->destiny_level(), target);
  }
  
  // optional uint64 unique_id = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->unique_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }
    
    // optional uint32 species = 6;
    if (has_species()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->species());
    }
    
    // optional uint32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }
    
    // optional uint32 in_form = 8;
    if (has_in_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_form());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .IGameProto.FightAttr fight_attr = 10;
    if (has_fight_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_attr());
    }
    
    // optional uint32 country = 11;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }
    
    // optional uint32 break_level = 12;
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->break_level());
    }
    
    // optional uint32 destiny_level = 13;
    if (has_destiny_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_level());
    }
    
    // optional uint64 unique_id = 14;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unique_id());
    }
    
  }
  // repeated string equips = 9;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->equips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BaseAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseAttr::MergeFrom(const BaseAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_exp(from.exp());
    }
    if (from._has_bit(5)) {
      set_species(from.species());
    }
    if (from._has_bit(6)) {
      set_quality(from.quality());
    }
    if (from._has_bit(7)) {
      set_in_form(from.in_form());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      mutable_fight_attr()->::IGameProto::FightAttr::MergeFrom(from.fight_attr());
    }
    if (from._has_bit(10)) {
      set_country(from.country());
    }
    if (from._has_bit(11)) {
      set_break_level(from.break_level());
    }
    if (from._has_bit(12)) {
      set_destiny_level(from.destiny_level());
    }
    if (from._has_bit(13)) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseAttr::CopyFrom(const BaseAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAttr::IsInitialized() const {
  
  return true;
}

void BaseAttr::Swap(BaseAttr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(species_, other->species_);
    std::swap(quality_, other->quality_);
    std::swap(in_form_, other->in_form_);
    equips_.Swap(&other->equips_);
    std::swap(fight_attr_, other->fight_attr_);
    std::swap(country_, other->country_);
    std::swap(break_level_, other->break_level_);
    std::swap(destiny_level_, other->destiny_level_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseAttr_descriptor_;
  metadata.reflection = BaseAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHeroAttr::kHeroAttrsFieldNumber;
#endif  // !_MSC_VER

MsgHeroAttr::MsgHeroAttr() {
  SharedCtor();
}

void MsgHeroAttr::InitAsDefaultInstance() {
}

MsgHeroAttr::MsgHeroAttr(const MsgHeroAttr& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgHeroAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeroAttr::~MsgHeroAttr() {
  SharedDtor();
}

void MsgHeroAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgHeroAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeroAttr_descriptor_;
}

const MsgHeroAttr& MsgHeroAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgHeroAttr* MsgHeroAttr::default_instance_ = NULL;

MsgHeroAttr* MsgHeroAttr::New() const {
  return new MsgHeroAttr;
}

void MsgHeroAttr::Clear() {
  hero_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeroAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.BaseAttr hero_attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hero_attrs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hero_attrs()));
        if (input->ExpectTag(10)) goto parse_hero_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHeroAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgHeroAttr::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.BaseAttr hero_attrs = 1;
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->hero_attrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHeroAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.BaseAttr hero_attrs = 1;
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_attrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHeroAttr::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.BaseAttr hero_attrs = 1;
  total_size += 1 * this->hero_attrs_size();
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_attrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgHeroAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeroAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeroAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeroAttr::MergeFrom(const MsgHeroAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_attrs_.MergeFrom(from.hero_attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeroAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeroAttr::CopyFrom(const MsgHeroAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeroAttr::IsInitialized() const {
  
  return true;
}

void MsgHeroAttr::Swap(MsgHeroAttr* other) {
  if (other != this) {
    hero_attrs_.Swap(&other->hero_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeroAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeroAttr_descriptor_;
  metadata.reflection = MsgHeroAttr_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TaskState::_default_progress_;
#ifndef _MSC_VER
const int TaskState::kIdFieldNumber;
const int TaskState::kProgressFieldNumber;
const int TaskState::kStateFieldNumber;
const int TaskState::kAcceptTimeFieldNumber;
#endif  // !_MSC_VER

TaskState::TaskState() {
  SharedCtor();
}

void TaskState::InitAsDefaultInstance() {
}

TaskState::TaskState(const TaskState& from) {
  SharedCtor();
  MergeFrom(from);
}

void TaskState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  progress_ = const_cast< ::std::string*>(&_default_progress_);
  state_ = 0u;
  accept_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskState::~TaskState() {
  SharedDtor();
}

void TaskState::SharedDtor() {
  if (progress_ != &_default_progress_) {
    delete progress_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TaskState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}

const TaskState& TaskState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

TaskState* TaskState::default_instance_ = NULL;

TaskState* TaskState::New() const {
  return new TaskState;
}

void TaskState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (progress_ != &_default_progress_) {
        progress_->clear();
      }
    }
    state_ = 0u;
    accept_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_progress;
        break;
      }
      
      // optional string progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_progress:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_progress()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->progress().data(), this->progress().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &state_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_accept_time;
        break;
      }
      
      // optional uint32 accept_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accept_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &accept_time_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TaskState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional string progress = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->progress().data(), this->progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->progress(), output);
  }
  
  // optional uint32 state = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }
  
  // optional uint32 accept_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accept_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional string progress = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->progress().data(), this->progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->progress(), target);
  }
  
  // optional uint32 state = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }
  
  // optional uint32 accept_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accept_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional string progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->progress());
    }
    
    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
    // optional uint32 accept_time = 4;
    if (has_accept_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accept_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TaskState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskState::MergeFrom(const TaskState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_progress(from.progress());
    }
    if (from._has_bit(2)) {
      set_state(from.state());
    }
    if (from._has_bit(3)) {
      set_accept_time(from.accept_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskState::CopyFrom(const TaskState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskState::IsInitialized() const {
  
  return true;
}

void TaskState::Swap(TaskState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(progress_, other->progress_);
    std::swap(state_, other->state_);
    std::swap(accept_time_, other->accept_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskState_descriptor_;
  metadata.reflection = TaskState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTaskListNfy::kTaskListFieldNumber;
#endif  // !_MSC_VER

MsgTaskListNfy::MsgTaskListNfy() {
  SharedCtor();
}

void MsgTaskListNfy::InitAsDefaultInstance() {
}

MsgTaskListNfy::MsgTaskListNfy(const MsgTaskListNfy& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTaskListNfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTaskListNfy::~MsgTaskListNfy() {
  SharedDtor();
}

void MsgTaskListNfy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgTaskListNfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTaskListNfy_descriptor_;
}

const MsgTaskListNfy& MsgTaskListNfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgTaskListNfy* MsgTaskListNfy::default_instance_ = NULL;

MsgTaskListNfy* MsgTaskListNfy::New() const {
  return new MsgTaskListNfy;
}

void MsgTaskListNfy::Clear() {
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTaskListNfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.TaskState task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_task_list:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_task_list()));
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTaskListNfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTaskListNfy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.TaskState task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->task_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTaskListNfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.TaskState task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTaskListNfy::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.TaskState task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTaskListNfy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTaskListNfy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTaskListNfy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTaskListNfy::MergeFrom(const MsgTaskListNfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTaskListNfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTaskListNfy::CopyFrom(const MsgTaskListNfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTaskListNfy::IsInitialized() const {
  
  return true;
}

void MsgTaskListNfy::Swap(MsgTaskListNfy* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTaskListNfy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTaskListNfy_descriptor_;
  metadata.reflection = MsgTaskListNfy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAcceptTaskReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

MsgAcceptTaskReq::MsgAcceptTaskReq() {
  SharedCtor();
}

void MsgAcceptTaskReq::InitAsDefaultInstance() {
}

MsgAcceptTaskReq::MsgAcceptTaskReq(const MsgAcceptTaskReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAcceptTaskReq::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAcceptTaskReq::~MsgAcceptTaskReq() {
  SharedDtor();
}

void MsgAcceptTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAcceptTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAcceptTaskReq_descriptor_;
}

const MsgAcceptTaskReq& MsgAcceptTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAcceptTaskReq* MsgAcceptTaskReq::default_instance_ = NULL;

MsgAcceptTaskReq* MsgAcceptTaskReq::New() const {
  return new MsgAcceptTaskReq;
}

void MsgAcceptTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAcceptTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &task_id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAcceptTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAcceptTaskReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAcceptTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAcceptTaskReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAcceptTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAcceptTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAcceptTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAcceptTaskReq::MergeFrom(const MsgAcceptTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAcceptTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAcceptTaskReq::CopyFrom(const MsgAcceptTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAcceptTaskReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAcceptTaskReq::Swap(MsgAcceptTaskReq* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAcceptTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAcceptTaskReq_descriptor_;
  metadata.reflection = MsgAcceptTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAcceptTaskAck::kTaskFieldNumber;
#endif  // !_MSC_VER

MsgAcceptTaskAck::MsgAcceptTaskAck() {
  SharedCtor();
}

void MsgAcceptTaskAck::InitAsDefaultInstance() {
  task_ = const_cast< ::IGameProto::TaskState*>(&::IGameProto::TaskState::default_instance());
}

MsgAcceptTaskAck::MsgAcceptTaskAck(const MsgAcceptTaskAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAcceptTaskAck::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAcceptTaskAck::~MsgAcceptTaskAck() {
  SharedDtor();
}

void MsgAcceptTaskAck::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

const ::google::protobuf::Descriptor* MsgAcceptTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAcceptTaskAck_descriptor_;
}

const MsgAcceptTaskAck& MsgAcceptTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAcceptTaskAck* MsgAcceptTaskAck::default_instance_ = NULL;

MsgAcceptTaskAck* MsgAcceptTaskAck::New() const {
  return new MsgAcceptTaskAck;
}

void MsgAcceptTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_ != NULL) task_->::IGameProto::TaskState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAcceptTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.TaskState task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_task()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAcceptTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAcceptTaskAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.TaskState task = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->task(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAcceptTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.TaskState task = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAcceptTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.TaskState task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAcceptTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAcceptTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAcceptTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAcceptTaskAck::MergeFrom(const MsgAcceptTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_task()->::IGameProto::TaskState::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAcceptTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAcceptTaskAck::CopyFrom(const MsgAcceptTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAcceptTaskAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAcceptTaskAck::Swap(MsgAcceptTaskAck* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAcceptTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAcceptTaskAck_descriptor_;
  metadata.reflection = MsgAcceptTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCommitTaskReq::kTaskIdFieldNumber;
const int MsgCommitTaskReq::kParamFieldNumber;
#endif  // !_MSC_VER

MsgCommitTaskReq::MsgCommitTaskReq() {
  SharedCtor();
}

void MsgCommitTaskReq::InitAsDefaultInstance() {
}

MsgCommitTaskReq::MsgCommitTaskReq(const MsgCommitTaskReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCommitTaskReq::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCommitTaskReq::~MsgCommitTaskReq() {
  SharedDtor();
}

void MsgCommitTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCommitTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCommitTaskReq_descriptor_;
}

const MsgCommitTaskReq& MsgCommitTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCommitTaskReq* MsgCommitTaskReq::default_instance_ = NULL;

MsgCommitTaskReq* MsgCommitTaskReq::New() const {
  return new MsgCommitTaskReq;
}

void MsgCommitTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCommitTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &task_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }
      
      // repeated uint64 param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_param:
        ::google::protobuf::uint64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &value));
        add_param(value);
        if (input->ExpectTag(16)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCommitTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCommitTaskReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // repeated uint64 param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCommitTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // repeated uint64 param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCommitTaskReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  // repeated uint64 param = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCommitTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCommitTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCommitTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCommitTaskReq::MergeFrom(const MsgCommitTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCommitTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCommitTaskReq::CopyFrom(const MsgCommitTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCommitTaskReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCommitTaskReq::Swap(MsgCommitTaskReq* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCommitTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCommitTaskReq_descriptor_;
  metadata.reflection = MsgCommitTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCommitTaskAck::kTaskFieldNumber;
#endif  // !_MSC_VER

MsgCommitTaskAck::MsgCommitTaskAck() {
  SharedCtor();
}

void MsgCommitTaskAck::InitAsDefaultInstance() {
  task_ = const_cast< ::IGameProto::TaskState*>(&::IGameProto::TaskState::default_instance());
}

MsgCommitTaskAck::MsgCommitTaskAck(const MsgCommitTaskAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCommitTaskAck::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCommitTaskAck::~MsgCommitTaskAck() {
  SharedDtor();
}

void MsgCommitTaskAck::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

const ::google::protobuf::Descriptor* MsgCommitTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCommitTaskAck_descriptor_;
}

const MsgCommitTaskAck& MsgCommitTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCommitTaskAck* MsgCommitTaskAck::default_instance_ = NULL;

MsgCommitTaskAck* MsgCommitTaskAck::New() const {
  return new MsgCommitTaskAck;
}

void MsgCommitTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_ != NULL) task_->::IGameProto::TaskState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCommitTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.TaskState task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_task()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCommitTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCommitTaskAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.TaskState task = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->task(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCommitTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.TaskState task = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCommitTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.TaskState task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCommitTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCommitTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCommitTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCommitTaskAck::MergeFrom(const MsgCommitTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_task()->::IGameProto::TaskState::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCommitTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCommitTaskAck::CopyFrom(const MsgCommitTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCommitTaskAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgCommitTaskAck::Swap(MsgCommitTaskAck* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCommitTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCommitTaskAck_descriptor_;
  metadata.reflection = MsgCommitTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDropTaskReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

MsgDropTaskReq::MsgDropTaskReq() {
  SharedCtor();
}

void MsgDropTaskReq::InitAsDefaultInstance() {
}

MsgDropTaskReq::MsgDropTaskReq(const MsgDropTaskReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDropTaskReq::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDropTaskReq::~MsgDropTaskReq() {
  SharedDtor();
}

void MsgDropTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDropTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDropTaskReq_descriptor_;
}

const MsgDropTaskReq& MsgDropTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgDropTaskReq* MsgDropTaskReq::default_instance_ = NULL;

MsgDropTaskReq* MsgDropTaskReq::New() const {
  return new MsgDropTaskReq;
}

void MsgDropTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDropTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &task_id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDropTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDropTaskReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDropTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDropTaskReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDropTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDropTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDropTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDropTaskReq::MergeFrom(const MsgDropTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDropTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDropTaskReq::CopyFrom(const MsgDropTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDropTaskReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgDropTaskReq::Swap(MsgDropTaskReq* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDropTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDropTaskReq_descriptor_;
  metadata.reflection = MsgDropTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDropTaskAck::kTaskFieldNumber;
#endif  // !_MSC_VER

MsgDropTaskAck::MsgDropTaskAck() {
  SharedCtor();
}

void MsgDropTaskAck::InitAsDefaultInstance() {
  task_ = const_cast< ::IGameProto::TaskState*>(&::IGameProto::TaskState::default_instance());
}

MsgDropTaskAck::MsgDropTaskAck(const MsgDropTaskAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDropTaskAck::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDropTaskAck::~MsgDropTaskAck() {
  SharedDtor();
}

void MsgDropTaskAck::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

const ::google::protobuf::Descriptor* MsgDropTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDropTaskAck_descriptor_;
}

const MsgDropTaskAck& MsgDropTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgDropTaskAck* MsgDropTaskAck::default_instance_ = NULL;

MsgDropTaskAck* MsgDropTaskAck::New() const {
  return new MsgDropTaskAck;
}

void MsgDropTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_ != NULL) task_->::IGameProto::TaskState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDropTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.TaskState task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_task()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDropTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDropTaskAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.TaskState task = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->task(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDropTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.TaskState task = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDropTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.TaskState task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDropTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDropTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDropTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDropTaskAck::MergeFrom(const MsgDropTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_task()->::IGameProto::TaskState::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDropTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDropTaskAck::CopyFrom(const MsgDropTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDropTaskAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgDropTaskAck::Swap(MsgDropTaskAck* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDropTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDropTaskAck_descriptor_;
  metadata.reflection = MsgDropTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTaskChangeNfy::kTaskChangedFieldNumber;
#endif  // !_MSC_VER

MsgTaskChangeNfy::MsgTaskChangeNfy() {
  SharedCtor();
}

void MsgTaskChangeNfy::InitAsDefaultInstance() {
}

MsgTaskChangeNfy::MsgTaskChangeNfy(const MsgTaskChangeNfy& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTaskChangeNfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTaskChangeNfy::~MsgTaskChangeNfy() {
  SharedDtor();
}

void MsgTaskChangeNfy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgTaskChangeNfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTaskChangeNfy_descriptor_;
}

const MsgTaskChangeNfy& MsgTaskChangeNfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgTaskChangeNfy* MsgTaskChangeNfy::default_instance_ = NULL;

MsgTaskChangeNfy* MsgTaskChangeNfy::New() const {
  return new MsgTaskChangeNfy;
}

void MsgTaskChangeNfy::Clear() {
  task_changed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTaskChangeNfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.TaskState task_changed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_task_changed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_task_changed()));
        if (input->ExpectTag(10)) goto parse_task_changed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTaskChangeNfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTaskChangeNfy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.TaskState task_changed = 1;
  for (int i = 0; i < this->task_changed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->task_changed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTaskChangeNfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.TaskState task_changed = 1;
  for (int i = 0; i < this->task_changed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_changed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTaskChangeNfy::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.TaskState task_changed = 1;
  total_size += 1 * this->task_changed_size();
  for (int i = 0; i < this->task_changed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_changed(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTaskChangeNfy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTaskChangeNfy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTaskChangeNfy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTaskChangeNfy::MergeFrom(const MsgTaskChangeNfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_changed_.MergeFrom(from.task_changed_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTaskChangeNfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTaskChangeNfy::CopyFrom(const MsgTaskChangeNfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTaskChangeNfy::IsInitialized() const {
  
  return true;
}

void MsgTaskChangeNfy::Swap(MsgTaskChangeNfy* other) {
  if (other != this) {
    task_changed_.Swap(&other->task_changed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTaskChangeNfy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTaskChangeNfy_descriptor_;
  metadata.reflection = MsgTaskChangeNfy_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgGmCmdReq::_default_cmd_;
#ifndef _MSC_VER
const int MsgGmCmdReq::kCmdFieldNumber;
#endif  // !_MSC_VER

MsgGmCmdReq::MsgGmCmdReq() {
  SharedCtor();
}

void MsgGmCmdReq::InitAsDefaultInstance() {
}

MsgGmCmdReq::MsgGmCmdReq(const MsgGmCmdReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGmCmdReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&_default_cmd_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGmCmdReq::~MsgGmCmdReq() {
  SharedDtor();
}

void MsgGmCmdReq::SharedDtor() {
  if (cmd_ != &_default_cmd_) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGmCmdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGmCmdReq_descriptor_;
}

const MsgGmCmdReq& MsgGmCmdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGmCmdReq* MsgGmCmdReq::default_instance_ = NULL;

MsgGmCmdReq* MsgGmCmdReq::New() const {
  return new MsgGmCmdReq;
}

void MsgGmCmdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (cmd_ != &_default_cmd_) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGmCmdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_cmd()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->cmd().data(), this->cmd().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGmCmdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGmCmdReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGmCmdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGmCmdReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGmCmdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGmCmdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGmCmdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGmCmdReq::MergeFrom(const MsgGmCmdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGmCmdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGmCmdReq::CopyFrom(const MsgGmCmdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGmCmdReq::IsInitialized() const {
  
  return true;
}

void MsgGmCmdReq::Swap(MsgGmCmdReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGmCmdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGmCmdReq_descriptor_;
  metadata.reflection = MsgGmCmdReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgGmCmdAck::_default_param_;
#ifndef _MSC_VER
const int MsgGmCmdAck::kParamFieldNumber;
#endif  // !_MSC_VER

MsgGmCmdAck::MsgGmCmdAck() {
  SharedCtor();
}

void MsgGmCmdAck::InitAsDefaultInstance() {
}

MsgGmCmdAck::MsgGmCmdAck(const MsgGmCmdAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGmCmdAck::SharedCtor() {
  _cached_size_ = 0;
  param_ = const_cast< ::std::string*>(&_default_param_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGmCmdAck::~MsgGmCmdAck() {
  SharedDtor();
}

void MsgGmCmdAck::SharedDtor() {
  if (param_ != &_default_param_) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGmCmdAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGmCmdAck_descriptor_;
}

const MsgGmCmdAck& MsgGmCmdAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGmCmdAck* MsgGmCmdAck::default_instance_ = NULL;

MsgGmCmdAck* MsgGmCmdAck::New() const {
  return new MsgGmCmdAck;
}

void MsgGmCmdAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (param_ != &_default_param_) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGmCmdAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_param()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->param().data(), this->param().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGmCmdAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGmCmdAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string param = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGmCmdAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string param = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGmCmdAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGmCmdAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGmCmdAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGmCmdAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGmCmdAck::MergeFrom(const MsgGmCmdAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGmCmdAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGmCmdAck::CopyFrom(const MsgGmCmdAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGmCmdAck::IsInitialized() const {
  
  return true;
}

void MsgGmCmdAck::Swap(MsgGmCmdAck* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGmCmdAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGmCmdAck_descriptor_;
  metadata.reflection = MsgGmCmdAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormPair::kPosFieldNumber;
const int FormPair::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

FormPair::FormPair() {
  SharedCtor();
}

void FormPair::InitAsDefaultInstance() {
}

FormPair::FormPair(const FormPair& from) {
  SharedCtor();
  MergeFrom(from);
}

void FormPair::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  uniqueid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormPair::~FormPair() {
  SharedDtor();
}

void FormPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FormPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormPair_descriptor_;
}

const FormPair& FormPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

FormPair* FormPair::default_instance_ = NULL;

FormPair* FormPair::New() const {
  return new FormPair;
}

void FormPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    uniqueid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &pos_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_uniqueId;
        break;
      }
      
      // optional uint64 uniqueId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_uniqueId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &uniqueid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FormPair::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 pos = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }
  
  // optional uint64 uniqueId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uniqueid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }
  
  // optional uint64 uniqueId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uniqueid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }
    
    // optional uint64 uniqueId = 2;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FormPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormPair::MergeFrom(const FormPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pos(from.pos());
    }
    if (from._has_bit(1)) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormPair::CopyFrom(const FormPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormPair::IsInitialized() const {
  
  return true;
}

void FormPair::Swap(FormPair* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormPair_descriptor_;
  metadata.reflection = FormPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Formation::kFormIdFieldNumber;
const int Formation::kFormFieldNumber;
#endif  // !_MSC_VER

Formation::Formation() {
  SharedCtor();
}

void Formation::InitAsDefaultInstance() {
}

Formation::Formation(const Formation& from) {
  SharedCtor();
  MergeFrom(from);
}

void Formation::SharedCtor() {
  _cached_size_ = 0;
  formid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Formation::~Formation() {
  SharedDtor();
}

void Formation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Formation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Formation_descriptor_;
}

const Formation& Formation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

Formation* Formation::default_instance_ = NULL;

Formation* Formation::New() const {
  return new Formation;
}

void Formation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    formid_ = 0u;
  }
  form_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Formation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 formId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &formid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_form;
        break;
      }
      
      // repeated .IGameProto.FormPair form = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_form:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_form()));
        if (input->ExpectTag(18)) goto parse_form;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Formation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Formation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 formId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formid(), output);
  }
  
  // repeated .IGameProto.FormPair form = 2;
  for (int i = 0; i < this->form_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->form(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Formation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 formId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formid(), target);
  }
  
  // repeated .IGameProto.FormPair form = 2;
  for (int i = 0; i < this->form_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->form(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Formation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 formId = 1;
    if (has_formid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formid());
    }
    
  }
  // repeated .IGameProto.FormPair form = 2;
  total_size += 1 * this->form_size();
  for (int i = 0; i < this->form_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->form(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Formation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Formation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Formation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Formation::MergeFrom(const Formation& from) {
  GOOGLE_CHECK_NE(&from, this);
  form_.MergeFrom(from.form_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_formid(from.formid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Formation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Formation::CopyFrom(const Formation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Formation::IsInitialized() const {
  
  return true;
}

void Formation::Swap(Formation* other) {
  if (other != this) {
    std::swap(formid_, other->formid_);
    form_.Swap(&other->form_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Formation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Formation_descriptor_;
  metadata.reflection = Formation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSaveFormation::kFormFieldNumber;
#endif  // !_MSC_VER

MsgSaveFormation::MsgSaveFormation() {
  SharedCtor();
}

void MsgSaveFormation::InitAsDefaultInstance() {
  form_ = const_cast< ::IGameProto::Formation*>(&::IGameProto::Formation::default_instance());
}

MsgSaveFormation::MsgSaveFormation(const MsgSaveFormation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSaveFormation::SharedCtor() {
  _cached_size_ = 0;
  form_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSaveFormation::~MsgSaveFormation() {
  SharedDtor();
}

void MsgSaveFormation::SharedDtor() {
  if (this != default_instance_) {
    delete form_;
  }
}

const ::google::protobuf::Descriptor* MsgSaveFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSaveFormation_descriptor_;
}

const MsgSaveFormation& MsgSaveFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgSaveFormation* MsgSaveFormation::default_instance_ = NULL;

MsgSaveFormation* MsgSaveFormation::New() const {
  return new MsgSaveFormation;
}

void MsgSaveFormation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (form_ != NULL) form_->::IGameProto::Formation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSaveFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.Formation form = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_form()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSaveFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSaveFormation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.Formation form = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->form(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSaveFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.Formation form = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->form(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSaveFormation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.Formation form = 1;
    if (has_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->form());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSaveFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSaveFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSaveFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSaveFormation::MergeFrom(const MsgSaveFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_form()->::IGameProto::Formation::MergeFrom(from.form());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSaveFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSaveFormation::CopyFrom(const MsgSaveFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSaveFormation::IsInitialized() const {
  
  return true;
}

void MsgSaveFormation::Swap(MsgSaveFormation* other) {
  if (other != this) {
    std::swap(form_, other->form_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSaveFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSaveFormation_descriptor_;
  metadata.reflection = MsgSaveFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSaveFormationAck::kFormIdFieldNumber;
const int MsgSaveFormationAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgSaveFormationAck::MsgSaveFormationAck() {
  SharedCtor();
}

void MsgSaveFormationAck::InitAsDefaultInstance() {
}

MsgSaveFormationAck::MsgSaveFormationAck(const MsgSaveFormationAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSaveFormationAck::SharedCtor() {
  _cached_size_ = 0;
  formid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSaveFormationAck::~MsgSaveFormationAck() {
  SharedDtor();
}

void MsgSaveFormationAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgSaveFormationAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSaveFormationAck_descriptor_;
}

const MsgSaveFormationAck& MsgSaveFormationAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgSaveFormationAck* MsgSaveFormationAck::default_instance_ = NULL;

MsgSaveFormationAck* MsgSaveFormationAck::New() const {
  return new MsgSaveFormationAck;
}

void MsgSaveFormationAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    formid_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSaveFormationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 formId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &formid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSaveFormationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSaveFormationAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 formId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formid(), output);
  }
  
  // optional uint32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSaveFormationAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 formId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formid(), target);
  }
  
  // optional uint32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSaveFormationAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 formId = 1;
    if (has_formid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formid());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSaveFormationAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSaveFormationAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSaveFormationAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSaveFormationAck::MergeFrom(const MsgSaveFormationAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_formid(from.formid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSaveFormationAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSaveFormationAck::CopyFrom(const MsgSaveFormationAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSaveFormationAck::IsInitialized() const {
  
  return true;
}

void MsgSaveFormationAck::Swap(MsgSaveFormationAck* other) {
  if (other != this) {
    std::swap(formid_, other->formid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSaveFormationAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSaveFormationAck_descriptor_;
  metadata.reflection = MsgSaveFormationAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFormationNty::kCurrentFormIdFieldNumber;
const int MsgFormationNty::kFormsFieldNumber;
#endif  // !_MSC_VER

MsgFormationNty::MsgFormationNty() {
  SharedCtor();
}

void MsgFormationNty::InitAsDefaultInstance() {
}

MsgFormationNty::MsgFormationNty(const MsgFormationNty& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFormationNty::SharedCtor() {
  _cached_size_ = 0;
  currentformid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFormationNty::~MsgFormationNty() {
  SharedDtor();
}

void MsgFormationNty::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFormationNty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFormationNty_descriptor_;
}

const MsgFormationNty& MsgFormationNty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgFormationNty* MsgFormationNty::default_instance_ = NULL;

MsgFormationNty* MsgFormationNty::New() const {
  return new MsgFormationNty;
}

void MsgFormationNty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentformid_ = 0u;
  }
  forms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFormationNty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 currentFormId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &currentformid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_forms;
        break;
      }
      
      // repeated .IGameProto.Formation forms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_forms:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_forms()));
        if (input->ExpectTag(18)) goto parse_forms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFormationNty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFormationNty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 currentFormId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currentformid(), output);
  }
  
  // repeated .IGameProto.Formation forms = 2;
  for (int i = 0; i < this->forms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->forms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFormationNty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 currentFormId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currentformid(), target);
  }
  
  // repeated .IGameProto.Formation forms = 2;
  for (int i = 0; i < this->forms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFormationNty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 currentFormId = 1;
    if (has_currentformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentformid());
    }
    
  }
  // repeated .IGameProto.Formation forms = 2;
  total_size += 1 * this->forms_size();
  for (int i = 0; i < this->forms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFormationNty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFormationNty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFormationNty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFormationNty::MergeFrom(const MsgFormationNty& from) {
  GOOGLE_CHECK_NE(&from, this);
  forms_.MergeFrom(from.forms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_currentformid(from.currentformid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFormationNty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFormationNty::CopyFrom(const MsgFormationNty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFormationNty::IsInitialized() const {
  
  return true;
}

void MsgFormationNty::Swap(MsgFormationNty* other) {
  if (other != this) {
    std::swap(currentformid_, other->currentformid_);
    forms_.Swap(&other->forms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFormationNty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFormationNty_descriptor_;
  metadata.reflection = MsgFormationNty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAttrChangeNfy::kAttrFieldNumber;
#endif  // !_MSC_VER

MsgAttrChangeNfy::MsgAttrChangeNfy() {
  SharedCtor();
}

void MsgAttrChangeNfy::InitAsDefaultInstance() {
  attr_ = const_cast< ::IGameProto::BaseAttr*>(&::IGameProto::BaseAttr::default_instance());
}

MsgAttrChangeNfy::MsgAttrChangeNfy(const MsgAttrChangeNfy& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAttrChangeNfy::SharedCtor() {
  _cached_size_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAttrChangeNfy::~MsgAttrChangeNfy() {
  SharedDtor();
}

void MsgAttrChangeNfy::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

const ::google::protobuf::Descriptor* MsgAttrChangeNfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAttrChangeNfy_descriptor_;
}

const MsgAttrChangeNfy& MsgAttrChangeNfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAttrChangeNfy* MsgAttrChangeNfy::default_instance_ = NULL;

MsgAttrChangeNfy* MsgAttrChangeNfy::New() const {
  return new MsgAttrChangeNfy;
}

void MsgAttrChangeNfy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (attr_ != NULL) attr_->::IGameProto::BaseAttr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAttrChangeNfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.BaseAttr attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attr()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAttrChangeNfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAttrChangeNfy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.BaseAttr attr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->attr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAttrChangeNfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.BaseAttr attr = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAttrChangeNfy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.BaseAttr attr = 1;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAttrChangeNfy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAttrChangeNfy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAttrChangeNfy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAttrChangeNfy::MergeFrom(const MsgAttrChangeNfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_attr()->::IGameProto::BaseAttr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAttrChangeNfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAttrChangeNfy::CopyFrom(const MsgAttrChangeNfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAttrChangeNfy::IsInitialized() const {
  
  return true;
}

void MsgAttrChangeNfy::Swap(MsgAttrChangeNfy* other) {
  if (other != this) {
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAttrChangeNfy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAttrChangeNfy_descriptor_;
  metadata.reflection = MsgAttrChangeNfy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterUnit::kMonsterIdFieldNumber;
const int MonsterUnit::kCountFieldNumber;
#endif  // !_MSC_VER

MonsterUnit::MonsterUnit() {
  SharedCtor();
}

void MonsterUnit::InitAsDefaultInstance() {
}

MonsterUnit::MonsterUnit(const MonsterUnit& from) {
  SharedCtor();
  MergeFrom(from);
}

void MonsterUnit::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterUnit::~MonsterUnit() {
  SharedDtor();
}

void MonsterUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MonsterUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterUnit_descriptor_;
}

const MonsterUnit& MonsterUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MonsterUnit* MonsterUnit::default_instance_ = NULL;

MonsterUnit* MonsterUnit::New() const {
  return new MonsterUnit;
}

void MonsterUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &monster_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MonsterUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 monster_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 monster_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MonsterUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterUnit::MergeFrom(const MonsterUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_monster_id(from.monster_id());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterUnit::CopyFrom(const MonsterUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterUnit::IsInitialized() const {
  
  return true;
}

void MonsterUnit::Swap(MonsterUnit* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterUnit_descriptor_;
  metadata.reflection = MonsterUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKillMonster::kKilledMonstersFieldNumber;
#endif  // !_MSC_VER

MsgKillMonster::MsgKillMonster() {
  SharedCtor();
}

void MsgKillMonster::InitAsDefaultInstance() {
}

MsgKillMonster::MsgKillMonster(const MsgKillMonster& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKillMonster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKillMonster::~MsgKillMonster() {
  SharedDtor();
}

void MsgKillMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKillMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKillMonster_descriptor_;
}

const MsgKillMonster& MsgKillMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgKillMonster* MsgKillMonster::default_instance_ = NULL;

MsgKillMonster* MsgKillMonster::New() const {
  return new MsgKillMonster;
}

void MsgKillMonster::Clear() {
  killed_monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKillMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.MonsterUnit killed_monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_killed_monsters:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_killed_monsters()));
        if (input->ExpectTag(10)) goto parse_killed_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKillMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKillMonster::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.MonsterUnit killed_monsters = 1;
  for (int i = 0; i < this->killed_monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->killed_monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKillMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.MonsterUnit killed_monsters = 1;
  for (int i = 0; i < this->killed_monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->killed_monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKillMonster::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.MonsterUnit killed_monsters = 1;
  total_size += 1 * this->killed_monsters_size();
  for (int i = 0; i < this->killed_monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killed_monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKillMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKillMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKillMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKillMonster::MergeFrom(const MsgKillMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  killed_monsters_.MergeFrom(from.killed_monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKillMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKillMonster::CopyFrom(const MsgKillMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKillMonster::IsInitialized() const {
  
  return true;
}

void MsgKillMonster::Swap(MsgKillMonster* other) {
  if (other != this) {
    killed_monsters_.Swap(&other->killed_monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKillMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKillMonster_descriptor_;
  metadata.reflection = MsgKillMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemBaseInfo::kIdFieldNumber;
const int ItemBaseInfo::kCountFieldNumber;
const int ItemBaseInfo::kIsWearFieldNumber;
const int ItemBaseInfo::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

ItemBaseInfo::ItemBaseInfo() {
  SharedCtor();
}

void ItemBaseInfo::InitAsDefaultInstance() {
}

ItemBaseInfo::ItemBaseInfo(const ItemBaseInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ItemBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  is_wear_ = 0u;
  unique_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBaseInfo::~ItemBaseInfo() {
  SharedDtor();
}

void ItemBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ItemBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBaseInfo_descriptor_;
}

const ItemBaseInfo& ItemBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

ItemBaseInfo* ItemBaseInfo::default_instance_ = NULL;

ItemBaseInfo* ItemBaseInfo::New() const {
  return new ItemBaseInfo;
}

void ItemBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
    is_wear_ = 0u;
    unique_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_is_wear;
        break;
      }
      
      // optional uint32 is_wear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_wear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &is_wear_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_unique_id;
        break;
      }
      
      // optional uint64 unique_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unique_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &unique_id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ItemBaseInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional uint32 is_wear = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_wear(), output);
  }
  
  // optional uint64 unique_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->unique_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional uint32 is_wear = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_wear(), target);
  }
  
  // optional uint64 unique_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->unique_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 is_wear = 3;
    if (has_is_wear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_wear());
    }
    
    // optional uint64 unique_id = 4;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unique_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ItemBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBaseInfo::MergeFrom(const ItemBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_is_wear(from.is_wear());
    }
    if (from._has_bit(3)) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBaseInfo::CopyFrom(const ItemBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBaseInfo::IsInitialized() const {
  
  return true;
}

void ItemBaseInfo::Swap(ItemBaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(is_wear_, other->is_wear_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBaseInfo_descriptor_;
  metadata.reflection = ItemBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemExtraInfo::kFightingFieldNumber;
#endif  // !_MSC_VER

ItemExtraInfo::ItemExtraInfo() {
  SharedCtor();
}

void ItemExtraInfo::InitAsDefaultInstance() {
}

ItemExtraInfo::ItemExtraInfo(const ItemExtraInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ItemExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  fighting_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemExtraInfo::~ItemExtraInfo() {
  SharedDtor();
}

void ItemExtraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ItemExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemExtraInfo_descriptor_;
}

const ItemExtraInfo& ItemExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

ItemExtraInfo* ItemExtraInfo::default_instance_ = NULL;

ItemExtraInfo* ItemExtraInfo::New() const {
  return new ItemExtraInfo;
}

void ItemExtraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fighting_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fighting = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &fighting_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ItemExtraInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 fighting = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fighting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fighting = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fighting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemExtraInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fighting = 1;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ItemExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemExtraInfo::MergeFrom(const ItemExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fighting(from.fighting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemExtraInfo::CopyFrom(const ItemExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemExtraInfo::IsInitialized() const {
  
  return true;
}

void ItemExtraInfo::Swap(ItemExtraInfo* other) {
  if (other != this) {
    std::swap(fighting_, other->fighting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemExtraInfo_descriptor_;
  metadata.reflection = ItemExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kBaseInfoFieldNumber;
const int ItemInfo::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
  base_info_ = const_cast< ::IGameProto::ItemBaseInfo*>(&::IGameProto::ItemBaseInfo::default_instance());
  extra_info_ = const_cast< ::IGameProto::ItemExtraInfo*>(&::IGameProto::ItemExtraInfo::default_instance());
}

ItemInfo::ItemInfo(const ItemInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  extra_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete extra_info_;
  }
}

const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_info_ != NULL) base_info_->::IGameProto::ItemBaseInfo::Clear();
    }
    if (_has_bit(1)) {
      if (extra_info_ != NULL) extra_info_->::IGameProto::ItemExtraInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.ItemBaseInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base_info()));
        if (input->ExpectTag(18)) goto parse_extra_info;
        break;
      }
      
      // optional .IGameProto.ItemExtraInfo extra_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_extra_info:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_extra_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ItemInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.ItemBaseInfo base_info = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base_info(), output);
  }
  
  // optional .IGameProto.ItemExtraInfo extra_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->extra_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.ItemBaseInfo base_info = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }
  
  // optional .IGameProto.ItemExtraInfo extra_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extra_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.ItemBaseInfo base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }
    
    // optional .IGameProto.ItemExtraInfo extra_info = 2;
    if (has_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base_info()->::IGameProto::ItemBaseInfo::MergeFrom(from.base_info());
    }
    if (from._has_bit(1)) {
      mutable_extra_info()->::IGameProto::ItemExtraInfo::MergeFrom(from.extra_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  
  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(extra_info_, other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetBagItemsNfy::kItemsFieldNumber;
#endif  // !_MSC_VER

MsgGetBagItemsNfy::MsgGetBagItemsNfy() {
  SharedCtor();
}

void MsgGetBagItemsNfy::InitAsDefaultInstance() {
}

MsgGetBagItemsNfy::MsgGetBagItemsNfy(const MsgGetBagItemsNfy& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetBagItemsNfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetBagItemsNfy::~MsgGetBagItemsNfy() {
  SharedDtor();
}

void MsgGetBagItemsNfy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGetBagItemsNfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetBagItemsNfy_descriptor_;
}

const MsgGetBagItemsNfy& MsgGetBagItemsNfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGetBagItemsNfy* MsgGetBagItemsNfy::default_instance_ = NULL;

MsgGetBagItemsNfy* MsgGetBagItemsNfy::New() const {
  return new MsgGetBagItemsNfy;
}

void MsgGetBagItemsNfy::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetBagItemsNfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.ItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGetBagItemsNfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGetBagItemsNfy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetBagItemsNfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetBagItemsNfy::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGetBagItemsNfy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetBagItemsNfy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetBagItemsNfy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetBagItemsNfy::MergeFrom(const MsgGetBagItemsNfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetBagItemsNfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetBagItemsNfy::CopyFrom(const MsgGetBagItemsNfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetBagItemsNfy::IsInitialized() const {
  
  return true;
}

void MsgGetBagItemsNfy::Swap(MsgGetBagItemsNfy* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetBagItemsNfy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetBagItemsNfy_descriptor_;
  metadata.reflection = MsgGetBagItemsNfy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgItemsChangedNfy::kItemsFieldNumber;
#endif  // !_MSC_VER

MsgItemsChangedNfy::MsgItemsChangedNfy() {
  SharedCtor();
}

void MsgItemsChangedNfy::InitAsDefaultInstance() {
}

MsgItemsChangedNfy::MsgItemsChangedNfy(const MsgItemsChangedNfy& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgItemsChangedNfy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgItemsChangedNfy::~MsgItemsChangedNfy() {
  SharedDtor();
}

void MsgItemsChangedNfy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgItemsChangedNfy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemsChangedNfy_descriptor_;
}

const MsgItemsChangedNfy& MsgItemsChangedNfy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgItemsChangedNfy* MsgItemsChangedNfy::default_instance_ = NULL;

MsgItemsChangedNfy* MsgItemsChangedNfy::New() const {
  return new MsgItemsChangedNfy;
}

void MsgItemsChangedNfy::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgItemsChangedNfy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.ItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_items()));
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgItemsChangedNfy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgItemsChangedNfy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgItemsChangedNfy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgItemsChangedNfy::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgItemsChangedNfy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgItemsChangedNfy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgItemsChangedNfy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgItemsChangedNfy::MergeFrom(const MsgItemsChangedNfy& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgItemsChangedNfy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItemsChangedNfy::CopyFrom(const MsgItemsChangedNfy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItemsChangedNfy::IsInitialized() const {
  
  return true;
}

void MsgItemsChangedNfy::Swap(MsgItemsChangedNfy* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgItemsChangedNfy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgItemsChangedNfy_descriptor_;
  metadata.reflection = MsgItemsChangedNfy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUseBagItemReq::kUniqueIdFieldNumber;
const int MsgUseBagItemReq::kCountFieldNumber;
#endif  // !_MSC_VER

MsgUseBagItemReq::MsgUseBagItemReq() {
  SharedCtor();
}

void MsgUseBagItemReq::InitAsDefaultInstance() {
}

MsgUseBagItemReq::MsgUseBagItemReq(const MsgUseBagItemReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUseBagItemReq::SharedCtor() {
  _cached_size_ = 0;
  unique_id_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUseBagItemReq::~MsgUseBagItemReq() {
  SharedDtor();
}

void MsgUseBagItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUseBagItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUseBagItemReq_descriptor_;
}

const MsgUseBagItemReq& MsgUseBagItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgUseBagItemReq* MsgUseBagItemReq::default_instance_ = NULL;

MsgUseBagItemReq* MsgUseBagItemReq::New() const {
  return new MsgUseBagItemReq;
}

void MsgUseBagItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_id_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUseBagItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &unique_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUseBagItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUseBagItemReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 unique_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unique_id(), output);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUseBagItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 unique_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unique_id(), target);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUseBagItemReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unique_id());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUseBagItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUseBagItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUseBagItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUseBagItemReq::MergeFrom(const MsgUseBagItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_unique_id(from.unique_id());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUseBagItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUseBagItemReq::CopyFrom(const MsgUseBagItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseBagItemReq::IsInitialized() const {
  
  return true;
}

void MsgUseBagItemReq::Swap(MsgUseBagItemReq* other) {
  if (other != this) {
    std::swap(unique_id_, other->unique_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUseBagItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUseBagItemReq_descriptor_;
  metadata.reflection = MsgUseBagItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUseBagItemAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgUseBagItemAck::MsgUseBagItemAck() {
  SharedCtor();
}

void MsgUseBagItemAck::InitAsDefaultInstance() {
}

MsgUseBagItemAck::MsgUseBagItemAck(const MsgUseBagItemAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUseBagItemAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUseBagItemAck::~MsgUseBagItemAck() {
  SharedDtor();
}

void MsgUseBagItemAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUseBagItemAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUseBagItemAck_descriptor_;
}

const MsgUseBagItemAck& MsgUseBagItemAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgUseBagItemAck* MsgUseBagItemAck::default_instance_ = NULL;

MsgUseBagItemAck* MsgUseBagItemAck::New() const {
  return new MsgUseBagItemAck;
}

void MsgUseBagItemAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUseBagItemAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUseBagItemAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUseBagItemAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUseBagItemAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUseBagItemAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUseBagItemAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUseBagItemAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUseBagItemAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUseBagItemAck::MergeFrom(const MsgUseBagItemAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUseBagItemAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUseBagItemAck::CopyFrom(const MsgUseBagItemAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseBagItemAck::IsInitialized() const {
  
  return true;
}

void MsgUseBagItemAck::Swap(MsgUseBagItemAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUseBagItemAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUseBagItemAck_descriptor_;
  metadata.reflection = MsgUseBagItemAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightSide::kHeroAttrsFieldNumber;
const int FightSide::kFormsFieldNumber;
#endif  // !_MSC_VER

FightSide::FightSide() {
  SharedCtor();
}

void FightSide::InitAsDefaultInstance() {
}

FightSide::FightSide(const FightSide& from) {
  SharedCtor();
  MergeFrom(from);
}

void FightSide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightSide::~FightSide() {
  SharedDtor();
}

void FightSide::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FightSide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightSide_descriptor_;
}

const FightSide& FightSide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

FightSide* FightSide::default_instance_ = NULL;

FightSide* FightSide::New() const {
  return new FightSide;
}

void FightSide::Clear() {
  hero_attrs_.Clear();
  forms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightSide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.BaseAttr hero_attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hero_attrs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hero_attrs()));
        if (input->ExpectTag(10)) goto parse_hero_attrs;
        if (input->ExpectTag(18)) goto parse_forms;
        break;
      }
      
      // repeated .IGameProto.FormPair forms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_forms:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_forms()));
        if (input->ExpectTag(18)) goto parse_forms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightSide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FightSide::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.BaseAttr hero_attrs = 1;
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->hero_attrs(i), output);
  }
  
  // repeated .IGameProto.FormPair forms = 2;
  for (int i = 0; i < this->forms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->forms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightSide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.BaseAttr hero_attrs = 1;
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_attrs(i), target);
  }
  
  // repeated .IGameProto.FormPair forms = 2;
  for (int i = 0; i < this->forms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightSide::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.BaseAttr hero_attrs = 1;
  total_size += 1 * this->hero_attrs_size();
  for (int i = 0; i < this->hero_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_attrs(i));
  }
  
  // repeated .IGameProto.FormPair forms = 2;
  total_size += 1 * this->forms_size();
  for (int i = 0; i < this->forms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FightSide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightSide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightSide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightSide::MergeFrom(const FightSide& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_attrs_.MergeFrom(from.hero_attrs_);
  forms_.MergeFrom(from.forms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightSide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightSide::CopyFrom(const FightSide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightSide::IsInitialized() const {
  
  return true;
}

void FightSide::Swap(FightSide* other) {
  if (other != this) {
    hero_attrs_.Swap(&other->hero_attrs_);
    forms_.Swap(&other->forms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightSide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightSide_descriptor_;
  metadata.reflection = FightSide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMonsterAgainstReq::kAgainstFormIdFieldNumber;
#endif  // !_MSC_VER

MsgMonsterAgainstReq::MsgMonsterAgainstReq() {
  SharedCtor();
}

void MsgMonsterAgainstReq::InitAsDefaultInstance() {
}

MsgMonsterAgainstReq::MsgMonsterAgainstReq(const MsgMonsterAgainstReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMonsterAgainstReq::SharedCtor() {
  _cached_size_ = 0;
  againstformid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMonsterAgainstReq::~MsgMonsterAgainstReq() {
  SharedDtor();
}

void MsgMonsterAgainstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgMonsterAgainstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMonsterAgainstReq_descriptor_;
}

const MsgMonsterAgainstReq& MsgMonsterAgainstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgMonsterAgainstReq* MsgMonsterAgainstReq::default_instance_ = NULL;

MsgMonsterAgainstReq* MsgMonsterAgainstReq::New() const {
  return new MsgMonsterAgainstReq;
}

void MsgMonsterAgainstReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    againstformid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMonsterAgainstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 againstFormId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &againstformid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMonsterAgainstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMonsterAgainstReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 againstFormId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->againstformid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMonsterAgainstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 againstFormId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->againstformid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMonsterAgainstReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 againstFormId = 1;
    if (has_againstformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->againstformid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMonsterAgainstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMonsterAgainstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMonsterAgainstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMonsterAgainstReq::MergeFrom(const MsgMonsterAgainstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_againstformid(from.againstformid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMonsterAgainstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMonsterAgainstReq::CopyFrom(const MsgMonsterAgainstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMonsterAgainstReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgMonsterAgainstReq::Swap(MsgMonsterAgainstReq* other) {
  if (other != this) {
    std::swap(againstformid_, other->againstformid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMonsterAgainstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMonsterAgainstReq_descriptor_;
  metadata.reflection = MsgMonsterAgainstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMonsterAgainstAck::kAgainstFormIdFieldNumber;
const int MsgMonsterAgainstAck::kStatusFieldNumber;
const int MsgMonsterAgainstAck::kFightIdFieldNumber;
const int MsgMonsterAgainstAck::kEnemySideFieldNumber;
#endif  // !_MSC_VER

MsgMonsterAgainstAck::MsgMonsterAgainstAck() {
  SharedCtor();
}

void MsgMonsterAgainstAck::InitAsDefaultInstance() {
  enemyside_ = const_cast< ::IGameProto::FightSide*>(&::IGameProto::FightSide::default_instance());
}

MsgMonsterAgainstAck::MsgMonsterAgainstAck(const MsgMonsterAgainstAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMonsterAgainstAck::SharedCtor() {
  _cached_size_ = 0;
  againstformid_ = 0u;
  status_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  enemyside_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMonsterAgainstAck::~MsgMonsterAgainstAck() {
  SharedDtor();
}

void MsgMonsterAgainstAck::SharedDtor() {
  if (this != default_instance_) {
    delete enemyside_;
  }
}

const ::google::protobuf::Descriptor* MsgMonsterAgainstAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMonsterAgainstAck_descriptor_;
}

const MsgMonsterAgainstAck& MsgMonsterAgainstAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgMonsterAgainstAck* MsgMonsterAgainstAck::default_instance_ = NULL;

MsgMonsterAgainstAck* MsgMonsterAgainstAck::New() const {
  return new MsgMonsterAgainstAck;
}

void MsgMonsterAgainstAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    againstformid_ = 0u;
    status_ = 0;
    fightid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(3)) {
      if (enemyside_ != NULL) enemyside_->::IGameProto::FightSide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMonsterAgainstAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 againstFormId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &againstformid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_fightId;
        break;
      }
      
      // required uint64 fightId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_enemySide;
        break;
      }
      
      // required .IGameProto.FightSide enemySide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_enemySide:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_enemyside()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMonsterAgainstAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMonsterAgainstAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 againstFormId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->againstformid(), output);
  }
  
  // required int32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // required uint64 fightId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightid(), output);
  }
  
  // required .IGameProto.FightSide enemySide = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->enemyside(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMonsterAgainstAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 againstFormId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->againstformid(), target);
  }
  
  // required int32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // required uint64 fightId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightid(), target);
  }
  
  // required .IGameProto.FightSide enemySide = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enemyside(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMonsterAgainstAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 againstFormId = 1;
    if (has_againstformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->againstformid());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required uint64 fightId = 3;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required .IGameProto.FightSide enemySide = 4;
    if (has_enemyside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemyside());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMonsterAgainstAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMonsterAgainstAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMonsterAgainstAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMonsterAgainstAck::MergeFrom(const MsgMonsterAgainstAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_againstformid(from.againstformid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(3)) {
      mutable_enemyside()->::IGameProto::FightSide::MergeFrom(from.enemyside());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMonsterAgainstAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMonsterAgainstAck::CopyFrom(const MsgMonsterAgainstAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMonsterAgainstAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgMonsterAgainstAck::Swap(MsgMonsterAgainstAck* other) {
  if (other != this) {
    std::swap(againstformid_, other->againstformid_);
    std::swap(status_, other->status_);
    std::swap(fightid_, other->fightid_);
    std::swap(enemyside_, other->enemyside_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMonsterAgainstAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMonsterAgainstAck_descriptor_;
  metadata.reflection = MsgMonsterAgainstAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgPvpReq::MsgPvpReq() {
  SharedCtor();
}

void MsgPvpReq::InitAsDefaultInstance() {
}

MsgPvpReq::MsgPvpReq(const MsgPvpReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPvpReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvpReq::~MsgPvpReq() {
  SharedDtor();
}

void MsgPvpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPvpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvpReq_descriptor_;
}

const MsgPvpReq& MsgPvpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPvpReq* MsgPvpReq::default_instance_ = NULL;

MsgPvpReq* MsgPvpReq::New() const {
  return new MsgPvpReq;
}

void MsgPvpReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgPvpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPvpReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPvpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPvpReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPvpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvpReq::MergeFrom(const MsgPvpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvpReq::CopyFrom(const MsgPvpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvpReq::IsInitialized() const {
  
  return true;
}

void MsgPvpReq::Swap(MsgPvpReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvpReq_descriptor_;
  metadata.reflection = MsgPvpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvpAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgPvpAck::MsgPvpAck() {
  SharedCtor();
}

void MsgPvpAck::InitAsDefaultInstance() {
}

MsgPvpAck::MsgPvpAck(const MsgPvpAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPvpAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvpAck::~MsgPvpAck() {
  SharedDtor();
}

void MsgPvpAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPvpAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvpAck_descriptor_;
}

const MsgPvpAck& MsgPvpAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPvpAck* MsgPvpAck::default_instance_ = NULL;

MsgPvpAck* MsgPvpAck::New() const {
  return new MsgPvpAck;
}

void MsgPvpAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvpAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPvpAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPvpAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPvpAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPvpAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPvpAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvpAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvpAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvpAck::MergeFrom(const MsgPvpAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvpAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvpAck::CopyFrom(const MsgPvpAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvpAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgPvpAck::Swap(MsgPvpAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvpAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvpAck_descriptor_;
  metadata.reflection = MsgPvpAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgPvpCancelReq::MsgPvpCancelReq() {
  SharedCtor();
}

void MsgPvpCancelReq::InitAsDefaultInstance() {
}

MsgPvpCancelReq::MsgPvpCancelReq(const MsgPvpCancelReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPvpCancelReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvpCancelReq::~MsgPvpCancelReq() {
  SharedDtor();
}

void MsgPvpCancelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPvpCancelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvpCancelReq_descriptor_;
}

const MsgPvpCancelReq& MsgPvpCancelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPvpCancelReq* MsgPvpCancelReq::default_instance_ = NULL;

MsgPvpCancelReq* MsgPvpCancelReq::New() const {
  return new MsgPvpCancelReq;
}

void MsgPvpCancelReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvpCancelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgPvpCancelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPvpCancelReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPvpCancelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPvpCancelReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPvpCancelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvpCancelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvpCancelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvpCancelReq::MergeFrom(const MsgPvpCancelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvpCancelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvpCancelReq::CopyFrom(const MsgPvpCancelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvpCancelReq::IsInitialized() const {
  
  return true;
}

void MsgPvpCancelReq::Swap(MsgPvpCancelReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvpCancelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvpCancelReq_descriptor_;
  metadata.reflection = MsgPvpCancelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvpNtf::kStatusFieldNumber;
const int MsgPvpNtf::kFightIdFieldNumber;
const int MsgPvpNtf::kEnemySideFieldNumber;
#endif  // !_MSC_VER

MsgPvpNtf::MsgPvpNtf() {
  SharedCtor();
}

void MsgPvpNtf::InitAsDefaultInstance() {
  enemyside_ = const_cast< ::IGameProto::FightSide*>(&::IGameProto::FightSide::default_instance());
}

MsgPvpNtf::MsgPvpNtf(const MsgPvpNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPvpNtf::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  enemyside_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvpNtf::~MsgPvpNtf() {
  SharedDtor();
}

void MsgPvpNtf::SharedDtor() {
  if (this != default_instance_) {
    delete enemyside_;
  }
}

const ::google::protobuf::Descriptor* MsgPvpNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvpNtf_descriptor_;
}

const MsgPvpNtf& MsgPvpNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPvpNtf* MsgPvpNtf::default_instance_ = NULL;

MsgPvpNtf* MsgPvpNtf::New() const {
  return new MsgPvpNtf;
}

void MsgPvpNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    fightid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (enemyside_ != NULL) enemyside_->::IGameProto::FightSide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvpNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fightId;
        break;
      }
      
      // required uint64 fightId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_enemySide;
        break;
      }
      
      // required .IGameProto.FightSide enemySide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_enemySide:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_enemyside()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPvpNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPvpNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // required uint64 fightId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fightid(), output);
  }
  
  // required .IGameProto.FightSide enemySide = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->enemyside(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPvpNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // required uint64 fightId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fightid(), target);
  }
  
  // required .IGameProto.FightSide enemySide = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemyside(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPvpNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required uint64 fightId = 2;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required .IGameProto.FightSide enemySide = 3;
    if (has_enemyside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemyside());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPvpNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvpNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvpNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvpNtf::MergeFrom(const MsgPvpNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(2)) {
      mutable_enemyside()->::IGameProto::FightSide::MergeFrom(from.enemyside());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvpNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvpNtf::CopyFrom(const MsgPvpNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvpNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgPvpNtf::Swap(MsgPvpNtf* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(fightid_, other->fightid_);
    std::swap(enemyside_, other->enemyside_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvpNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvpNtf_descriptor_;
  metadata.reflection = MsgPvpNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoadFightResProgressReq::kFightIdFieldNumber;
const int MsgLoadFightResProgressReq::kProgressFieldNumber;
#endif  // !_MSC_VER

MsgLoadFightResProgressReq::MsgLoadFightResProgressReq() {
  SharedCtor();
}

void MsgLoadFightResProgressReq::InitAsDefaultInstance() {
}

MsgLoadFightResProgressReq::MsgLoadFightResProgressReq(const MsgLoadFightResProgressReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoadFightResProgressReq::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoadFightResProgressReq::~MsgLoadFightResProgressReq() {
  SharedDtor();
}

void MsgLoadFightResProgressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLoadFightResProgressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoadFightResProgressReq_descriptor_;
}

const MsgLoadFightResProgressReq& MsgLoadFightResProgressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgLoadFightResProgressReq* MsgLoadFightResProgressReq::default_instance_ = NULL;

MsgLoadFightResProgressReq* MsgLoadFightResProgressReq::New() const {
  return new MsgLoadFightResProgressReq;
}

void MsgLoadFightResProgressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoadFightResProgressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }
      
      // required int32 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_progress:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &progress_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoadFightResProgressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLoadFightResProgressReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  // required int32 progress = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoadFightResProgressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  // required int32 progress = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoadFightResProgressReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required int32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLoadFightResProgressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoadFightResProgressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoadFightResProgressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoadFightResProgressReq::MergeFrom(const MsgLoadFightResProgressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(1)) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoadFightResProgressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoadFightResProgressReq::CopyFrom(const MsgLoadFightResProgressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoadFightResProgressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgLoadFightResProgressReq::Swap(MsgLoadFightResProgressReq* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoadFightResProgressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoadFightResProgressReq_descriptor_;
  metadata.reflection = MsgLoadFightResProgressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoadFightResProgressNtf::kFightIdFieldNumber;
const int MsgLoadFightResProgressNtf::kRoleIdFieldNumber;
const int MsgLoadFightResProgressNtf::kProgressFieldNumber;
#endif  // !_MSC_VER

MsgLoadFightResProgressNtf::MsgLoadFightResProgressNtf() {
  SharedCtor();
}

void MsgLoadFightResProgressNtf::InitAsDefaultInstance() {
}

MsgLoadFightResProgressNtf::MsgLoadFightResProgressNtf(const MsgLoadFightResProgressNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoadFightResProgressNtf::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  roleid_ = 0u;
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoadFightResProgressNtf::~MsgLoadFightResProgressNtf() {
  SharedDtor();
}

void MsgLoadFightResProgressNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLoadFightResProgressNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoadFightResProgressNtf_descriptor_;
}

const MsgLoadFightResProgressNtf& MsgLoadFightResProgressNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgLoadFightResProgressNtf* MsgLoadFightResProgressNtf::default_instance_ = NULL;

MsgLoadFightResProgressNtf* MsgLoadFightResProgressNtf::New() const {
  return new MsgLoadFightResProgressNtf;
}

void MsgLoadFightResProgressNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
    roleid_ = 0u;
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoadFightResProgressNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }
      
      // required uint32 roleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }
      
      // required int32 progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_progress:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &progress_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoadFightResProgressNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLoadFightResProgressNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  // required uint32 roleId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }
  
  // required int32 progress = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoadFightResProgressNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  // required uint32 roleId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // required int32 progress = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoadFightResProgressNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required uint32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // required int32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLoadFightResProgressNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoadFightResProgressNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoadFightResProgressNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoadFightResProgressNtf::MergeFrom(const MsgLoadFightResProgressNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoadFightResProgressNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoadFightResProgressNtf::CopyFrom(const MsgLoadFightResProgressNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoadFightResProgressNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgLoadFightResProgressNtf::Swap(MsgLoadFightResProgressNtf* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(roleid_, other->roleid_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoadFightResProgressNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoadFightResProgressNtf_descriptor_;
  metadata.reflection = MsgLoadFightResProgressNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFightStartReq::kFightIdFieldNumber;
#endif  // !_MSC_VER

MsgFightStartReq::MsgFightStartReq() {
  SharedCtor();
}

void MsgFightStartReq::InitAsDefaultInstance() {
}

MsgFightStartReq::MsgFightStartReq(const MsgFightStartReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFightStartReq::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFightStartReq::~MsgFightStartReq() {
  SharedDtor();
}

void MsgFightStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFightStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFightStartReq_descriptor_;
}

const MsgFightStartReq& MsgFightStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgFightStartReq* MsgFightStartReq::default_instance_ = NULL;

MsgFightStartReq* MsgFightStartReq::New() const {
  return new MsgFightStartReq;
}

void MsgFightStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFightStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFightStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFightStartReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFightStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFightStartReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFightStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFightStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFightStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFightStartReq::MergeFrom(const MsgFightStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFightStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFightStartReq::CopyFrom(const MsgFightStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFightStartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgFightStartReq::Swap(MsgFightStartReq* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFightStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFightStartReq_descriptor_;
  metadata.reflection = MsgFightStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFightStartNtf::kFightIdFieldNumber;
#endif  // !_MSC_VER

MsgFightStartNtf::MsgFightStartNtf() {
  SharedCtor();
}

void MsgFightStartNtf::InitAsDefaultInstance() {
}

MsgFightStartNtf::MsgFightStartNtf(const MsgFightStartNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFightStartNtf::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFightStartNtf::~MsgFightStartNtf() {
  SharedDtor();
}

void MsgFightStartNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFightStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFightStartNtf_descriptor_;
}

const MsgFightStartNtf& MsgFightStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgFightStartNtf* MsgFightStartNtf::default_instance_ = NULL;

MsgFightStartNtf* MsgFightStartNtf::New() const {
  return new MsgFightStartNtf;
}

void MsgFightStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFightStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFightStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFightStartNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFightStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFightStartNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFightStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFightStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFightStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFightStartNtf::MergeFrom(const MsgFightStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFightStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFightStartNtf::CopyFrom(const MsgFightStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFightStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgFightStartNtf::Swap(MsgFightStartNtf* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFightStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFightStartNtf_descriptor_;
  metadata.reflection = MsgFightStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFightEndReq::kFightIdFieldNumber;
#endif  // !_MSC_VER

MsgFightEndReq::MsgFightEndReq() {
  SharedCtor();
}

void MsgFightEndReq::InitAsDefaultInstance() {
}

MsgFightEndReq::MsgFightEndReq(const MsgFightEndReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFightEndReq::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFightEndReq::~MsgFightEndReq() {
  SharedDtor();
}

void MsgFightEndReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFightEndReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFightEndReq_descriptor_;
}

const MsgFightEndReq& MsgFightEndReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgFightEndReq* MsgFightEndReq::default_instance_ = NULL;

MsgFightEndReq* MsgFightEndReq::New() const {
  return new MsgFightEndReq;
}

void MsgFightEndReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFightEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFightEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFightEndReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFightEndReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFightEndReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFightEndReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFightEndReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFightEndReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFightEndReq::MergeFrom(const MsgFightEndReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFightEndReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFightEndReq::CopyFrom(const MsgFightEndReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFightEndReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgFightEndReq::Swap(MsgFightEndReq* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFightEndReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFightEndReq_descriptor_;
  metadata.reflection = MsgFightEndReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFightEndNtf::kFightIdFieldNumber;
const int MsgFightEndNtf::kResultFieldNumber;
#endif  // !_MSC_VER

MsgFightEndNtf::MsgFightEndNtf() {
  SharedCtor();
}

void MsgFightEndNtf::InitAsDefaultInstance() {
}

MsgFightEndNtf::MsgFightEndNtf(const MsgFightEndNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFightEndNtf::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFightEndNtf::~MsgFightEndNtf() {
  SharedDtor();
}

void MsgFightEndNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFightEndNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFightEndNtf_descriptor_;
}

const MsgFightEndNtf& MsgFightEndNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgFightEndNtf* MsgFightEndNtf::default_instance_ = NULL;

MsgFightEndNtf* MsgFightEndNtf::New() const {
  return new MsgFightEndNtf;
}

void MsgFightEndNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFightEndNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFightEndNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFightEndNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFightEndNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFightEndNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFightEndNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFightEndNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFightEndNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFightEndNtf::MergeFrom(const MsgFightEndNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFightEndNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFightEndNtf::CopyFrom(const MsgFightEndNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFightEndNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgFightEndNtf::Swap(MsgFightEndNtf* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFightEndNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFightEndNtf_descriptor_;
  metadata.reflection = MsgFightEndNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSrcHeroUniqueIdFieldNumber;
const int SkillInfo::kSkillIdFieldNumber;
const int SkillInfo::kPosIdsFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  src_hero_unique_id_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_hero_unique_id_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0u;
  }
  posids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_hero_unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &src_hero_unique_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }
      
      // required uint32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skillId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &skillid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_posIds;
        break;
      }
      
      // repeated uint32 posIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posIds:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_posids(value);
        if (input->ExpectTag(24)) goto parse_posIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SkillInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 src_hero_unique_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_hero_unique_id(), output);
  }
  
  // required uint32 skillId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }
  
  // repeated uint32 posIds = 3;
  for (int i = 0; i < this->posids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->posids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src_hero_unique_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_hero_unique_id(), target);
  }
  
  // required uint32 skillId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }
  
  // repeated uint32 posIds = 3;
  for (int i = 0; i < this->posids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->posids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_hero_unique_id = 1;
    if (has_src_hero_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_hero_unique_id());
    }
    
    // required uint32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  // repeated uint32 posIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->posids(i));
    }
    total_size += 1 * this->posids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  posids_.MergeFrom(from.posids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_src_hero_unique_id(from.src_hero_unique_id());
    }
    if (from._has_bit(1)) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(src_hero_unique_id_, other->src_hero_unique_id_);
    std::swap(skillid_, other->skillid_);
    posids_.Swap(&other->posids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DamageInfo::kSrcHeroUniqueIdFieldNumber;
const int DamageInfo::kDamageIdFieldNumber;
const int DamageInfo::kPosIdsFieldNumber;
#endif  // !_MSC_VER

DamageInfo::DamageInfo() {
  SharedCtor();
}

void DamageInfo::InitAsDefaultInstance() {
}

DamageInfo::DamageInfo(const DamageInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void DamageInfo::SharedCtor() {
  _cached_size_ = 0;
  src_hero_unique_id_ = GOOGLE_ULONGLONG(0);
  damageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DamageInfo::~DamageInfo() {
  SharedDtor();
}

void DamageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DamageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageInfo_descriptor_;
}

const DamageInfo& DamageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

DamageInfo* DamageInfo::default_instance_ = NULL;

DamageInfo* DamageInfo::New() const {
  return new DamageInfo;
}

void DamageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_hero_unique_id_ = GOOGLE_ULONGLONG(0);
    damageid_ = 0u;
  }
  posids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DamageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_hero_unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &src_hero_unique_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_damageId;
        break;
      }
      
      // required uint32 damageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_damageId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &damageid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_posIds;
        break;
      }
      
      // repeated uint32 posIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posIds:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_posids(value);
        if (input->ExpectTag(24)) goto parse_posIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DamageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DamageInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 src_hero_unique_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_hero_unique_id(), output);
  }
  
  // required uint32 damageId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damageid(), output);
  }
  
  // repeated uint32 posIds = 3;
  for (int i = 0; i < this->posids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->posids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DamageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src_hero_unique_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_hero_unique_id(), target);
  }
  
  // required uint32 damageId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damageid(), target);
  }
  
  // repeated uint32 posIds = 3;
  for (int i = 0; i < this->posids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->posids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DamageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_hero_unique_id = 1;
    if (has_src_hero_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_hero_unique_id());
    }
    
    // required uint32 damageId = 2;
    if (has_damageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damageid());
    }
    
  }
  // repeated uint32 posIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->posids(i));
    }
    total_size += 1 * this->posids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DamageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DamageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DamageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DamageInfo::MergeFrom(const DamageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  posids_.MergeFrom(from.posids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_src_hero_unique_id(from.src_hero_unique_id());
    }
    if (from._has_bit(1)) {
      set_damageid(from.damageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DamageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DamageInfo::CopyFrom(const DamageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void DamageInfo::Swap(DamageInfo* other) {
  if (other != this) {
    std::swap(src_hero_unique_id_, other->src_hero_unique_id_);
    std::swap(damageid_, other->damageid_);
    posids_.Swap(&other->posids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DamageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DamageInfo_descriptor_;
  metadata.reflection = DamageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kSrcHeroUniqueIdFieldNumber;
const int BuffInfo::kBuffIdFieldNumber;
const int BuffInfo::kPosIdsFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo() {
  SharedCtor();
}

void BuffInfo::InitAsDefaultInstance() {
}

BuffInfo::BuffInfo(const BuffInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  src_hero_unique_id_ = GOOGLE_ULONGLONG(0);
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_hero_unique_id_ = GOOGLE_ULONGLONG(0);
    buffid_ = 0u;
  }
  posids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_hero_unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &src_hero_unique_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_buffId;
        break;
      }
      
      // required uint32 buffId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_buffId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &buffid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_posIds;
        break;
      }
      
      // repeated uint32 posIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posIds:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_posids(value);
        if (input->ExpectTag(24)) goto parse_posIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BuffInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 src_hero_unique_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_hero_unique_id(), output);
  }
  
  // required uint32 buffId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffid(), output);
  }
  
  // repeated uint32 posIds = 3;
  for (int i = 0; i < this->posids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->posids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src_hero_unique_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_hero_unique_id(), target);
  }
  
  // required uint32 buffId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffid(), target);
  }
  
  // repeated uint32 posIds = 3;
  for (int i = 0; i < this->posids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->posids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_hero_unique_id = 1;
    if (has_src_hero_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_hero_unique_id());
    }
    
    // required uint32 buffId = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
  }
  // repeated uint32 posIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->posids(i));
    }
    total_size += 1 * this->posids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  posids_.MergeFrom(from.posids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_src_hero_unique_id(from.src_hero_unique_id());
    }
    if (from._has_bit(1)) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(src_hero_unique_id_, other->src_hero_unique_id_);
    std::swap(buffid_, other->buffid_);
    posids_.Swap(&other->posids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackInfo::kAttackIdFieldNumber;
const int AttackInfo::kSkillsFieldNumber;
const int AttackInfo::kDamagesFieldNumber;
const int AttackInfo::kBuffsFieldNumber;
#endif  // !_MSC_VER

AttackInfo::AttackInfo() {
  SharedCtor();
}

void AttackInfo::InitAsDefaultInstance() {
  skills_ = const_cast< ::IGameProto::SkillInfo*>(&::IGameProto::SkillInfo::default_instance());
}

AttackInfo::AttackInfo(const AttackInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void AttackInfo::SharedCtor() {
  _cached_size_ = 0;
  attackid_ = 0u;
  skills_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackInfo::~AttackInfo() {
  SharedDtor();
}

void AttackInfo::SharedDtor() {
  if (this != default_instance_) {
    delete skills_;
  }
}

const ::google::protobuf::Descriptor* AttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackInfo_descriptor_;
}

const AttackInfo& AttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

AttackInfo* AttackInfo::default_instance_ = NULL;

AttackInfo* AttackInfo::New() const {
  return new AttackInfo;
}

void AttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attackid_ = 0u;
    if (_has_bit(1)) {
      if (skills_ != NULL) skills_->::IGameProto::SkillInfo::Clear();
    }
  }
  damages_.Clear();
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attackId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &attackid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_skills;
        break;
      }
      
      // required .IGameProto.SkillInfo skills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_skills:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_skills()));
        if (input->ExpectTag(26)) goto parse_damages;
        break;
      }
      
      // repeated .IGameProto.DamageInfo damages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_damages:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_damages()));
        if (input->ExpectTag(26)) goto parse_damages;
        if (input->ExpectTag(34)) goto parse_buffs;
        break;
      }
      
      // repeated .IGameProto.BuffInfo buffs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_buffs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_buffs()));
        if (input->ExpectTag(34)) goto parse_buffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AttackInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 attackId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attackid(), output);
  }
  
  // required .IGameProto.SkillInfo skills = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->skills(), output);
  }
  
  // repeated .IGameProto.DamageInfo damages = 3;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->damages(i), output);
  }
  
  // repeated .IGameProto.BuffInfo buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->buffs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attackId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attackid(), target);
  }
  
  // required .IGameProto.SkillInfo skills = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skills(), target);
  }
  
  // repeated .IGameProto.DamageInfo damages = 3;
  for (int i = 0; i < this->damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->damages(i), target);
  }
  
  // repeated .IGameProto.BuffInfo buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buffs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attackId = 1;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackid());
    }
    
    // required .IGameProto.SkillInfo skills = 2;
    if (has_skills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skills());
    }
    
  }
  // repeated .IGameProto.DamageInfo damages = 3;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }
  
  // repeated .IGameProto.BuffInfo buffs = 4;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackInfo::MergeFrom(const AttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  damages_.MergeFrom(from.damages_);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attackid(from.attackid());
    }
    if (from._has_bit(1)) {
      mutable_skills()->::IGameProto::SkillInfo::MergeFrom(from.skills());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackInfo::CopyFrom(const AttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_skills()) {
    if (!this->skills().IsInitialized()) return false;
  }
  for (int i = 0; i < damages_size(); i++) {
    if (!this->damages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buffs_size(); i++) {
    if (!this->buffs(i).IsInitialized()) return false;
  }
  return true;
}

void AttackInfo::Swap(AttackInfo* other) {
  if (other != this) {
    std::swap(attackid_, other->attackid_);
    std::swap(skills_, other->skills_);
    damages_.Swap(&other->damages_);
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackInfo_descriptor_;
  metadata.reflection = AttackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAttackReq::kFightIdFieldNumber;
const int MsgAttackReq::kAttackInfoFieldNumber;
#endif  // !_MSC_VER

MsgAttackReq::MsgAttackReq() {
  SharedCtor();
}

void MsgAttackReq::InitAsDefaultInstance() {
  attackinfo_ = const_cast< ::IGameProto::AttackInfo*>(&::IGameProto::AttackInfo::default_instance());
}

MsgAttackReq::MsgAttackReq(const MsgAttackReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAttackReq::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  attackinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAttackReq::~MsgAttackReq() {
  SharedDtor();
}

void MsgAttackReq::SharedDtor() {
  if (this != default_instance_) {
    delete attackinfo_;
  }
}

const ::google::protobuf::Descriptor* MsgAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAttackReq_descriptor_;
}

const MsgAttackReq& MsgAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAttackReq* MsgAttackReq::default_instance_ = NULL;

MsgAttackReq* MsgAttackReq::New() const {
  return new MsgAttackReq;
}

void MsgAttackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (attackinfo_ != NULL) attackinfo_->::IGameProto::AttackInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_attackInfo;
        break;
      }
      
      // required .IGameProto.AttackInfo attackInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attackInfo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attackinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAttackReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  // required .IGameProto.AttackInfo attackInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->attackinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  // required .IGameProto.AttackInfo attackInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attackinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAttackReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required .IGameProto.AttackInfo attackInfo = 2;
    if (has_attackinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAttackReq::MergeFrom(const MsgAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(1)) {
      mutable_attackinfo()->::IGameProto::AttackInfo::MergeFrom(from.attackinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAttackReq::CopyFrom(const MsgAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAttackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_attackinfo()) {
    if (!this->attackinfo().IsInitialized()) return false;
  }
  return true;
}

void MsgAttackReq::Swap(MsgAttackReq* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(attackinfo_, other->attackinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAttackReq_descriptor_;
  metadata.reflection = MsgAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAttackAck::kAttackIdFieldNumber;
const int MsgAttackAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgAttackAck::MsgAttackAck() {
  SharedCtor();
}

void MsgAttackAck::InitAsDefaultInstance() {
}

MsgAttackAck::MsgAttackAck(const MsgAttackAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAttackAck::SharedCtor() {
  _cached_size_ = 0;
  attackid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAttackAck::~MsgAttackAck() {
  SharedDtor();
}

void MsgAttackAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAttackAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAttackAck_descriptor_;
}

const MsgAttackAck& MsgAttackAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAttackAck* MsgAttackAck::default_instance_ = NULL;

MsgAttackAck* MsgAttackAck::New() const {
  return new MsgAttackAck;
}

void MsgAttackAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attackid_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAttackAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attackId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &attackid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAttackAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAttackAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 attackId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attackid(), output);
  }
  
  // required uint32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAttackAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attackId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attackid(), target);
  }
  
  // required uint32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAttackAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attackId = 1;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackid());
    }
    
    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAttackAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAttackAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAttackAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAttackAck::MergeFrom(const MsgAttackAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attackid(from.attackid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAttackAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAttackAck::CopyFrom(const MsgAttackAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAttackAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgAttackAck::Swap(MsgAttackAck* other) {
  if (other != this) {
    std::swap(attackid_, other->attackid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAttackAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAttackAck_descriptor_;
  metadata.reflection = MsgAttackAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAttackNtf::kAttackInfoFieldNumber;
#endif  // !_MSC_VER

MsgAttackNtf::MsgAttackNtf() {
  SharedCtor();
}

void MsgAttackNtf::InitAsDefaultInstance() {
  attackinfo_ = const_cast< ::IGameProto::AttackInfo*>(&::IGameProto::AttackInfo::default_instance());
}

MsgAttackNtf::MsgAttackNtf(const MsgAttackNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAttackNtf::SharedCtor() {
  _cached_size_ = 0;
  attackinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAttackNtf::~MsgAttackNtf() {
  SharedDtor();
}

void MsgAttackNtf::SharedDtor() {
  if (this != default_instance_) {
    delete attackinfo_;
  }
}

const ::google::protobuf::Descriptor* MsgAttackNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAttackNtf_descriptor_;
}

const MsgAttackNtf& MsgAttackNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAttackNtf* MsgAttackNtf::default_instance_ = NULL;

MsgAttackNtf* MsgAttackNtf::New() const {
  return new MsgAttackNtf;
}

void MsgAttackNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (attackinfo_ != NULL) attackinfo_->::IGameProto::AttackInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAttackNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IGameProto.AttackInfo attackInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attackinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAttackNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAttackNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .IGameProto.AttackInfo attackInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->attackinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAttackNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IGameProto.AttackInfo attackInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAttackNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IGameProto.AttackInfo attackInfo = 1;
    if (has_attackinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAttackNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAttackNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAttackNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAttackNtf::MergeFrom(const MsgAttackNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_attackinfo()->::IGameProto::AttackInfo::MergeFrom(from.attackinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAttackNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAttackNtf::CopyFrom(const MsgAttackNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAttackNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_attackinfo()) {
    if (!this->attackinfo().IsInitialized()) return false;
  }
  return true;
}

void MsgAttackNtf::Swap(MsgAttackNtf* other) {
  if (other != this) {
    std::swap(attackinfo_, other->attackinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAttackNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAttackNtf_descriptor_;
  metadata.reflection = MsgAttackNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoundStartReq::kFightIdFieldNumber;
#endif  // !_MSC_VER

MsgRoundStartReq::MsgRoundStartReq() {
  SharedCtor();
}

void MsgRoundStartReq::InitAsDefaultInstance() {
}

MsgRoundStartReq::MsgRoundStartReq(const MsgRoundStartReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoundStartReq::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoundStartReq::~MsgRoundStartReq() {
  SharedDtor();
}

void MsgRoundStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRoundStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoundStartReq_descriptor_;
}

const MsgRoundStartReq& MsgRoundStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRoundStartReq* MsgRoundStartReq::default_instance_ = NULL;

MsgRoundStartReq* MsgRoundStartReq::New() const {
  return new MsgRoundStartReq;
}

void MsgRoundStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoundStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoundStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRoundStartReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRoundStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRoundStartReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRoundStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoundStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoundStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoundStartReq::MergeFrom(const MsgRoundStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoundStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoundStartReq::CopyFrom(const MsgRoundStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoundStartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgRoundStartReq::Swap(MsgRoundStartReq* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoundStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoundStartReq_descriptor_;
  metadata.reflection = MsgRoundStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoundEndReq::kFightIdFieldNumber;
#endif  // !_MSC_VER

MsgRoundEndReq::MsgRoundEndReq() {
  SharedCtor();
}

void MsgRoundEndReq::InitAsDefaultInstance() {
}

MsgRoundEndReq::MsgRoundEndReq(const MsgRoundEndReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoundEndReq::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoundEndReq::~MsgRoundEndReq() {
  SharedDtor();
}

void MsgRoundEndReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRoundEndReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoundEndReq_descriptor_;
}

const MsgRoundEndReq& MsgRoundEndReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRoundEndReq* MsgRoundEndReq::default_instance_ = NULL;

MsgRoundEndReq* MsgRoundEndReq::New() const {
  return new MsgRoundEndReq;
}

void MsgRoundEndReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoundEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoundEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRoundEndReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRoundEndReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fightId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRoundEndReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRoundEndReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoundEndReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoundEndReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoundEndReq::MergeFrom(const MsgRoundEndReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoundEndReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoundEndReq::CopyFrom(const MsgRoundEndReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoundEndReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgRoundEndReq::Swap(MsgRoundEndReq* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoundEndReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoundEndReq_descriptor_;
  metadata.reflection = MsgRoundEndReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBuildInfoNtf::kCopperLeftTimeFieldNumber;
const int MsgBuildInfoNtf::kCopperFieldNumber;
const int MsgBuildInfoNtf::kTaskIdFieldNumber;
const int MsgBuildInfoNtf::kTaskLeftTimeFieldNumber;
const int MsgBuildInfoNtf::kIsStartFieldNumber;
const int MsgBuildInfoNtf::kLevelFieldNumber;
const int MsgBuildInfoNtf::kStarLevelFieldNumber;
const int MsgBuildInfoNtf::kHeroIdsFieldNumber;
const int MsgBuildInfoNtf::kLeftTimesFieldNumber;
#endif  // !_MSC_VER

MsgBuildInfoNtf::MsgBuildInfoNtf() {
  SharedCtor();
}

void MsgBuildInfoNtf::InitAsDefaultInstance() {
}

MsgBuildInfoNtf::MsgBuildInfoNtf(const MsgBuildInfoNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgBuildInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  copperlefttime_ = 0u;
  copper_ = 0u;
  taskid_ = 0u;
  tasklefttime_ = 0u;
  isstart_ = 0u;
  level_ = 0u;
  starlevel_ = 0u;
  lefttimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBuildInfoNtf::~MsgBuildInfoNtf() {
  SharedDtor();
}

void MsgBuildInfoNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgBuildInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBuildInfoNtf_descriptor_;
}

const MsgBuildInfoNtf& MsgBuildInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgBuildInfoNtf* MsgBuildInfoNtf::default_instance_ = NULL;

MsgBuildInfoNtf* MsgBuildInfoNtf::New() const {
  return new MsgBuildInfoNtf;
}

void MsgBuildInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copperlefttime_ = 0u;
    copper_ = 0u;
    taskid_ = 0u;
    tasklefttime_ = 0u;
    isstart_ = 0u;
    level_ = 0u;
    starlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lefttimes_ = 0u;
  }
  heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBuildInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copperLeftTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &copperlefttime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_copper;
        break;
      }
      
      // optional uint32 copper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_copper:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &copper_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_taskId;
        break;
      }
      
      // optional uint32 taskId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_taskId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &taskid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_taskLeftTime;
        break;
      }
      
      // optional uint32 taskLeftTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_taskLeftTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &tasklefttime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_isStart;
        break;
      }
      
      // optional uint32 isStart = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isStart:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &isstart_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &level_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_starLevel;
        break;
      }
      
      // optional uint32 starLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_starLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &starlevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_heroIds;
        break;
      }
      
      // repeated uint32 heroIds = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroIds:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_heroids(value);
        if (input->ExpectTag(64)) goto parse_heroIds;
        if (input->ExpectTag(72)) goto parse_leftTimes;
        break;
      }
      
      // optional uint32 leftTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_leftTimes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &lefttimes_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBuildInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgBuildInfoNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 copperLeftTime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copperlefttime(), output);
  }
  
  // optional uint32 copper = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copper(), output);
  }
  
  // optional uint32 taskId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }
  
  // optional uint32 taskLeftTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tasklefttime(), output);
  }
  
  // optional uint32 isStart = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isstart(), output);
  }
  
  // optional uint32 level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }
  
  // optional uint32 starLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->starlevel(), output);
  }
  
  // repeated uint32 heroIds = 8;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->heroids(i), output);
  }
  
  // optional uint32 leftTimes = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lefttimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBuildInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copperLeftTime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copperlefttime(), target);
  }
  
  // optional uint32 copper = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copper(), target);
  }
  
  // optional uint32 taskId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }
  
  // optional uint32 taskLeftTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tasklefttime(), target);
  }
  
  // optional uint32 isStart = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isstart(), target);
  }
  
  // optional uint32 level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional uint32 starLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->starlevel(), target);
  }
  
  // repeated uint32 heroIds = 8;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->heroids(i), target);
  }
  
  // optional uint32 leftTimes = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lefttimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBuildInfoNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copperLeftTime = 1;
    if (has_copperlefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copperlefttime());
    }
    
    // optional uint32 copper = 2;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copper());
    }
    
    // optional uint32 taskId = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 taskLeftTime = 4;
    if (has_tasklefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasklefttime());
    }
    
    // optional uint32 isStart = 5;
    if (has_isstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isstart());
    }
    
    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 starLevel = 7;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 leftTimes = 9;
    if (has_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttimes());
    }
    
  }
  // repeated uint32 heroIds = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgBuildInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBuildInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBuildInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBuildInfoNtf::MergeFrom(const MsgBuildInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroids_.MergeFrom(from.heroids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_copperlefttime(from.copperlefttime());
    }
    if (from._has_bit(1)) {
      set_copper(from.copper());
    }
    if (from._has_bit(2)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(3)) {
      set_tasklefttime(from.tasklefttime());
    }
    if (from._has_bit(4)) {
      set_isstart(from.isstart());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_starlevel(from.starlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_lefttimes(from.lefttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBuildInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBuildInfoNtf::CopyFrom(const MsgBuildInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBuildInfoNtf::IsInitialized() const {
  
  return true;
}

void MsgBuildInfoNtf::Swap(MsgBuildInfoNtf* other) {
  if (other != this) {
    std::swap(copperlefttime_, other->copperlefttime_);
    std::swap(copper_, other->copper_);
    std::swap(taskid_, other->taskid_);
    std::swap(tasklefttime_, other->tasklefttime_);
    std::swap(isstart_, other->isstart_);
    std::swap(level_, other->level_);
    std::swap(starlevel_, other->starlevel_);
    heroids_.Swap(&other->heroids_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBuildInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBuildInfoNtf_descriptor_;
  metadata.reflection = MsgBuildInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgGetBuildCoppperReq::MsgGetBuildCoppperReq() {
  SharedCtor();
}

void MsgGetBuildCoppperReq::InitAsDefaultInstance() {
}

MsgGetBuildCoppperReq::MsgGetBuildCoppperReq(const MsgGetBuildCoppperReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetBuildCoppperReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetBuildCoppperReq::~MsgGetBuildCoppperReq() {
  SharedDtor();
}

void MsgGetBuildCoppperReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGetBuildCoppperReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetBuildCoppperReq_descriptor_;
}

const MsgGetBuildCoppperReq& MsgGetBuildCoppperReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGetBuildCoppperReq* MsgGetBuildCoppperReq::default_instance_ = NULL;

MsgGetBuildCoppperReq* MsgGetBuildCoppperReq::New() const {
  return new MsgGetBuildCoppperReq;
}

void MsgGetBuildCoppperReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetBuildCoppperReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgGetBuildCoppperReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGetBuildCoppperReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetBuildCoppperReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetBuildCoppperReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGetBuildCoppperReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetBuildCoppperReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetBuildCoppperReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetBuildCoppperReq::MergeFrom(const MsgGetBuildCoppperReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetBuildCoppperReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetBuildCoppperReq::CopyFrom(const MsgGetBuildCoppperReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetBuildCoppperReq::IsInitialized() const {
  
  return true;
}

void MsgGetBuildCoppperReq::Swap(MsgGetBuildCoppperReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetBuildCoppperReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetBuildCoppperReq_descriptor_;
  metadata.reflection = MsgGetBuildCoppperReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetBuildCoppperAck::kCountFieldNumber;
#endif  // !_MSC_VER

MsgGetBuildCoppperAck::MsgGetBuildCoppperAck() {
  SharedCtor();
}

void MsgGetBuildCoppperAck::InitAsDefaultInstance() {
}

MsgGetBuildCoppperAck::MsgGetBuildCoppperAck(const MsgGetBuildCoppperAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetBuildCoppperAck::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetBuildCoppperAck::~MsgGetBuildCoppperAck() {
  SharedDtor();
}

void MsgGetBuildCoppperAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGetBuildCoppperAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetBuildCoppperAck_descriptor_;
}

const MsgGetBuildCoppperAck& MsgGetBuildCoppperAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGetBuildCoppperAck* MsgGetBuildCoppperAck::default_instance_ = NULL;

MsgGetBuildCoppperAck* MsgGetBuildCoppperAck::New() const {
  return new MsgGetBuildCoppperAck;
}

void MsgGetBuildCoppperAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetBuildCoppperAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &count_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGetBuildCoppperAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGetBuildCoppperAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 count = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetBuildCoppperAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetBuildCoppperAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGetBuildCoppperAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetBuildCoppperAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetBuildCoppperAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetBuildCoppperAck::MergeFrom(const MsgGetBuildCoppperAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetBuildCoppperAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetBuildCoppperAck::CopyFrom(const MsgGetBuildCoppperAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetBuildCoppperAck::IsInitialized() const {
  
  return true;
}

void MsgGetBuildCoppperAck::Swap(MsgGetBuildCoppperAck* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetBuildCoppperAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetBuildCoppperAck_descriptor_;
  metadata.reflection = MsgGetBuildCoppperAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgUpgradeInteriorBuildReq::MsgUpgradeInteriorBuildReq() {
  SharedCtor();
}

void MsgUpgradeInteriorBuildReq::InitAsDefaultInstance() {
}

MsgUpgradeInteriorBuildReq::MsgUpgradeInteriorBuildReq(const MsgUpgradeInteriorBuildReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpgradeInteriorBuildReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpgradeInteriorBuildReq::~MsgUpgradeInteriorBuildReq() {
  SharedDtor();
}

void MsgUpgradeInteriorBuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUpgradeInteriorBuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpgradeInteriorBuildReq_descriptor_;
}

const MsgUpgradeInteriorBuildReq& MsgUpgradeInteriorBuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgUpgradeInteriorBuildReq* MsgUpgradeInteriorBuildReq::default_instance_ = NULL;

MsgUpgradeInteriorBuildReq* MsgUpgradeInteriorBuildReq::New() const {
  return new MsgUpgradeInteriorBuildReq;
}

void MsgUpgradeInteriorBuildReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpgradeInteriorBuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgUpgradeInteriorBuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUpgradeInteriorBuildReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpgradeInteriorBuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpgradeInteriorBuildReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUpgradeInteriorBuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpgradeInteriorBuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpgradeInteriorBuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpgradeInteriorBuildReq::MergeFrom(const MsgUpgradeInteriorBuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpgradeInteriorBuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpgradeInteriorBuildReq::CopyFrom(const MsgUpgradeInteriorBuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpgradeInteriorBuildReq::IsInitialized() const {
  
  return true;
}

void MsgUpgradeInteriorBuildReq::Swap(MsgUpgradeInteriorBuildReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpgradeInteriorBuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpgradeInteriorBuildReq_descriptor_;
  metadata.reflection = MsgUpgradeInteriorBuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpgradeInteriorBuildAck::kLevelFieldNumber;
const int MsgUpgradeInteriorBuildAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgUpgradeInteriorBuildAck::MsgUpgradeInteriorBuildAck() {
  SharedCtor();
}

void MsgUpgradeInteriorBuildAck::InitAsDefaultInstance() {
}

MsgUpgradeInteriorBuildAck::MsgUpgradeInteriorBuildAck(const MsgUpgradeInteriorBuildAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpgradeInteriorBuildAck::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpgradeInteriorBuildAck::~MsgUpgradeInteriorBuildAck() {
  SharedDtor();
}

void MsgUpgradeInteriorBuildAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUpgradeInteriorBuildAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpgradeInteriorBuildAck_descriptor_;
}

const MsgUpgradeInteriorBuildAck& MsgUpgradeInteriorBuildAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgUpgradeInteriorBuildAck* MsgUpgradeInteriorBuildAck::default_instance_ = NULL;

MsgUpgradeInteriorBuildAck* MsgUpgradeInteriorBuildAck::New() const {
  return new MsgUpgradeInteriorBuildAck;
}

void MsgUpgradeInteriorBuildAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpgradeInteriorBuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUpgradeInteriorBuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUpgradeInteriorBuildAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // optional uint32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpgradeInteriorBuildAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // optional uint32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpgradeInteriorBuildAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUpgradeInteriorBuildAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpgradeInteriorBuildAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpgradeInteriorBuildAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpgradeInteriorBuildAck::MergeFrom(const MsgUpgradeInteriorBuildAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpgradeInteriorBuildAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpgradeInteriorBuildAck::CopyFrom(const MsgUpgradeInteriorBuildAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpgradeInteriorBuildAck::IsInitialized() const {
  
  return true;
}

void MsgUpgradeInteriorBuildAck::Swap(MsgUpgradeInteriorBuildAck* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpgradeInteriorBuildAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpgradeInteriorBuildAck_descriptor_;
  metadata.reflection = MsgUpgradeInteriorBuildAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInteriorTaskFinishedNtf::kTaskIdFieldNumber;
#endif  // !_MSC_VER

MsgInteriorTaskFinishedNtf::MsgInteriorTaskFinishedNtf() {
  SharedCtor();
}

void MsgInteriorTaskFinishedNtf::InitAsDefaultInstance() {
}

MsgInteriorTaskFinishedNtf::MsgInteriorTaskFinishedNtf(const MsgInteriorTaskFinishedNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgInteriorTaskFinishedNtf::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInteriorTaskFinishedNtf::~MsgInteriorTaskFinishedNtf() {
  SharedDtor();
}

void MsgInteriorTaskFinishedNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgInteriorTaskFinishedNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInteriorTaskFinishedNtf_descriptor_;
}

const MsgInteriorTaskFinishedNtf& MsgInteriorTaskFinishedNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgInteriorTaskFinishedNtf* MsgInteriorTaskFinishedNtf::default_instance_ = NULL;

MsgInteriorTaskFinishedNtf* MsgInteriorTaskFinishedNtf::New() const {
  return new MsgInteriorTaskFinishedNtf;
}

void MsgInteriorTaskFinishedNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInteriorTaskFinishedNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInteriorTaskFinishedNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgInteriorTaskFinishedNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInteriorTaskFinishedNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInteriorTaskFinishedNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgInteriorTaskFinishedNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInteriorTaskFinishedNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInteriorTaskFinishedNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInteriorTaskFinishedNtf::MergeFrom(const MsgInteriorTaskFinishedNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInteriorTaskFinishedNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInteriorTaskFinishedNtf::CopyFrom(const MsgInteriorTaskFinishedNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInteriorTaskFinishedNtf::IsInitialized() const {
  
  return true;
}

void MsgInteriorTaskFinishedNtf::Swap(MsgInteriorTaskFinishedNtf* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInteriorTaskFinishedNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInteriorTaskFinishedNtf_descriptor_;
  metadata.reflection = MsgInteriorTaskFinishedNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDispatchTaskReq::kTaskIdFieldNumber;
const int MsgDispatchTaskReq::kTaskStarLevelFieldNumber;
const int MsgDispatchTaskReq::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

MsgDispatchTaskReq::MsgDispatchTaskReq() {
  SharedCtor();
}

void MsgDispatchTaskReq::InitAsDefaultInstance() {
}

MsgDispatchTaskReq::MsgDispatchTaskReq(const MsgDispatchTaskReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDispatchTaskReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  task_star_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDispatchTaskReq::~MsgDispatchTaskReq() {
  SharedDtor();
}

void MsgDispatchTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDispatchTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDispatchTaskReq_descriptor_;
}

const MsgDispatchTaskReq& MsgDispatchTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgDispatchTaskReq* MsgDispatchTaskReq::default_instance_ = NULL;

MsgDispatchTaskReq* MsgDispatchTaskReq::New() const {
  return new MsgDispatchTaskReq;
}

void MsgDispatchTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    task_star_level_ = 0u;
  }
  heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDispatchTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_task_star_level;
        break;
      }
      
      // optional uint32 task_star_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_task_star_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &task_star_level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_heroIds;
        break;
      }
      
      // repeated uint32 heroIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroIds:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_heroids(value);
        if (input->ExpectTag(24)) goto parse_heroIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDispatchTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDispatchTaskReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 task_star_level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_star_level(), output);
  }
  
  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heroids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDispatchTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 task_star_level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_star_level(), target);
  }
  
  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heroids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDispatchTaskReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 task_star_level = 2;
    if (has_task_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_star_level());
    }
    
  }
  // repeated uint32 heroIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDispatchTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDispatchTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDispatchTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDispatchTaskReq::MergeFrom(const MsgDispatchTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroids_.MergeFrom(from.heroids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_task_star_level(from.task_star_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDispatchTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDispatchTaskReq::CopyFrom(const MsgDispatchTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDispatchTaskReq::IsInitialized() const {
  
  return true;
}

void MsgDispatchTaskReq::Swap(MsgDispatchTaskReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(task_star_level_, other->task_star_level_);
    heroids_.Swap(&other->heroids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDispatchTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDispatchTaskReq_descriptor_;
  metadata.reflection = MsgDispatchTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDispatchTaskAck::kTaskIdFieldNumber;
const int MsgDispatchTaskAck::kTaskStarLevelFieldNumber;
const int MsgDispatchTaskAck::kHeroIdsFieldNumber;
const int MsgDispatchTaskAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgDispatchTaskAck::MsgDispatchTaskAck() {
  SharedCtor();
}

void MsgDispatchTaskAck::InitAsDefaultInstance() {
}

MsgDispatchTaskAck::MsgDispatchTaskAck(const MsgDispatchTaskAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDispatchTaskAck::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  task_star_level_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDispatchTaskAck::~MsgDispatchTaskAck() {
  SharedDtor();
}

void MsgDispatchTaskAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDispatchTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDispatchTaskAck_descriptor_;
}

const MsgDispatchTaskAck& MsgDispatchTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgDispatchTaskAck* MsgDispatchTaskAck::default_instance_ = NULL;

MsgDispatchTaskAck* MsgDispatchTaskAck::New() const {
  return new MsgDispatchTaskAck;
}

void MsgDispatchTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    task_star_level_ = 0u;
    status_ = 0u;
  }
  heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDispatchTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_task_star_level;
        break;
      }
      
      // optional uint32 task_star_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_task_star_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &task_star_level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_heroIds;
        break;
      }
      
      // repeated uint32 heroIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heroIds:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_heroids(value);
        if (input->ExpectTag(24)) goto parse_heroIds;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDispatchTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDispatchTaskAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 task_star_level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_star_level(), output);
  }
  
  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heroids(i), output);
  }
  
  // optional uint32 status = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDispatchTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 task_star_level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_star_level(), target);
  }
  
  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heroids(i), target);
  }
  
  // optional uint32 status = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDispatchTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 task_star_level = 2;
    if (has_task_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_star_level());
    }
    
    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  // repeated uint32 heroIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDispatchTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDispatchTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDispatchTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDispatchTaskAck::MergeFrom(const MsgDispatchTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroids_.MergeFrom(from.heroids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_task_star_level(from.task_star_level());
    }
    if (from._has_bit(3)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDispatchTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDispatchTaskAck::CopyFrom(const MsgDispatchTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDispatchTaskAck::IsInitialized() const {
  
  return true;
}

void MsgDispatchTaskAck::Swap(MsgDispatchTaskAck* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(task_star_level_, other->task_star_level_);
    heroids_.Swap(&other->heroids_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDispatchTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDispatchTaskAck_descriptor_;
  metadata.reflection = MsgDispatchTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgRefreshTaskReq::MsgRefreshTaskReq() {
  SharedCtor();
}

void MsgRefreshTaskReq::InitAsDefaultInstance() {
}

MsgRefreshTaskReq::MsgRefreshTaskReq(const MsgRefreshTaskReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRefreshTaskReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRefreshTaskReq::~MsgRefreshTaskReq() {
  SharedDtor();
}

void MsgRefreshTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRefreshTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRefreshTaskReq_descriptor_;
}

const MsgRefreshTaskReq& MsgRefreshTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRefreshTaskReq* MsgRefreshTaskReq::default_instance_ = NULL;

MsgRefreshTaskReq* MsgRefreshTaskReq::New() const {
  return new MsgRefreshTaskReq;
}

void MsgRefreshTaskReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRefreshTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgRefreshTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRefreshTaskReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRefreshTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRefreshTaskReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRefreshTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRefreshTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRefreshTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRefreshTaskReq::MergeFrom(const MsgRefreshTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRefreshTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRefreshTaskReq::CopyFrom(const MsgRefreshTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRefreshTaskReq::IsInitialized() const {
  
  return true;
}

void MsgRefreshTaskReq::Swap(MsgRefreshTaskReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRefreshTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRefreshTaskReq_descriptor_;
  metadata.reflection = MsgRefreshTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRefreshTaskAck::kTaskIdFieldNumber;
const int MsgRefreshTaskAck::kTaskStarLevelFieldNumber;
#endif  // !_MSC_VER

MsgRefreshTaskAck::MsgRefreshTaskAck() {
  SharedCtor();
}

void MsgRefreshTaskAck::InitAsDefaultInstance() {
}

MsgRefreshTaskAck::MsgRefreshTaskAck(const MsgRefreshTaskAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRefreshTaskAck::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstarlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRefreshTaskAck::~MsgRefreshTaskAck() {
  SharedDtor();
}

void MsgRefreshTaskAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRefreshTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRefreshTaskAck_descriptor_;
}

const MsgRefreshTaskAck& MsgRefreshTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRefreshTaskAck* MsgRefreshTaskAck::default_instance_ = NULL;

MsgRefreshTaskAck* MsgRefreshTaskAck::New() const {
  return new MsgRefreshTaskAck;
}

void MsgRefreshTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstarlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRefreshTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_taskStarLevel;
        break;
      }
      
      // optional uint32 taskStarLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_taskStarLevel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &taskstarlevel_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRefreshTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRefreshTaskAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 taskStarLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskstarlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRefreshTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 taskStarLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskstarlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRefreshTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 taskStarLevel = 2;
    if (has_taskstarlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskstarlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRefreshTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRefreshTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRefreshTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRefreshTaskAck::MergeFrom(const MsgRefreshTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskstarlevel(from.taskstarlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRefreshTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRefreshTaskAck::CopyFrom(const MsgRefreshTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRefreshTaskAck::IsInitialized() const {
  
  return true;
}

void MsgRefreshTaskAck::Swap(MsgRefreshTaskAck* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstarlevel_, other->taskstarlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRefreshTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRefreshTaskAck_descriptor_;
  metadata.reflection = MsgRefreshTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpgradeTaskStarLevelReq::kStarLevelFieldNumber;
#endif  // !_MSC_VER

MsgUpgradeTaskStarLevelReq::MsgUpgradeTaskStarLevelReq() {
  SharedCtor();
}

void MsgUpgradeTaskStarLevelReq::InitAsDefaultInstance() {
}

MsgUpgradeTaskStarLevelReq::MsgUpgradeTaskStarLevelReq(const MsgUpgradeTaskStarLevelReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpgradeTaskStarLevelReq::SharedCtor() {
  _cached_size_ = 0;
  starlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpgradeTaskStarLevelReq::~MsgUpgradeTaskStarLevelReq() {
  SharedDtor();
}

void MsgUpgradeTaskStarLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUpgradeTaskStarLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpgradeTaskStarLevelReq_descriptor_;
}

const MsgUpgradeTaskStarLevelReq& MsgUpgradeTaskStarLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgUpgradeTaskStarLevelReq* MsgUpgradeTaskStarLevelReq::default_instance_ = NULL;

MsgUpgradeTaskStarLevelReq* MsgUpgradeTaskStarLevelReq::New() const {
  return new MsgUpgradeTaskStarLevelReq;
}

void MsgUpgradeTaskStarLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpgradeTaskStarLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 starLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &starlevel_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUpgradeTaskStarLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUpgradeTaskStarLevelReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 starLevel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpgradeTaskStarLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 starLevel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->starlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpgradeTaskStarLevelReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 starLevel = 1;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUpgradeTaskStarLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpgradeTaskStarLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpgradeTaskStarLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpgradeTaskStarLevelReq::MergeFrom(const MsgUpgradeTaskStarLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_starlevel(from.starlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpgradeTaskStarLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpgradeTaskStarLevelReq::CopyFrom(const MsgUpgradeTaskStarLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpgradeTaskStarLevelReq::IsInitialized() const {
  
  return true;
}

void MsgUpgradeTaskStarLevelReq::Swap(MsgUpgradeTaskStarLevelReq* other) {
  if (other != this) {
    std::swap(starlevel_, other->starlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpgradeTaskStarLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpgradeTaskStarLevelReq_descriptor_;
  metadata.reflection = MsgUpgradeTaskStarLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpgradeTaskStarLevelAck::kStarLevelFieldNumber;
#endif  // !_MSC_VER

MsgUpgradeTaskStarLevelAck::MsgUpgradeTaskStarLevelAck() {
  SharedCtor();
}

void MsgUpgradeTaskStarLevelAck::InitAsDefaultInstance() {
}

MsgUpgradeTaskStarLevelAck::MsgUpgradeTaskStarLevelAck(const MsgUpgradeTaskStarLevelAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpgradeTaskStarLevelAck::SharedCtor() {
  _cached_size_ = 0;
  starlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpgradeTaskStarLevelAck::~MsgUpgradeTaskStarLevelAck() {
  SharedDtor();
}

void MsgUpgradeTaskStarLevelAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUpgradeTaskStarLevelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpgradeTaskStarLevelAck_descriptor_;
}

const MsgUpgradeTaskStarLevelAck& MsgUpgradeTaskStarLevelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgUpgradeTaskStarLevelAck* MsgUpgradeTaskStarLevelAck::default_instance_ = NULL;

MsgUpgradeTaskStarLevelAck* MsgUpgradeTaskStarLevelAck::New() const {
  return new MsgUpgradeTaskStarLevelAck;
}

void MsgUpgradeTaskStarLevelAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpgradeTaskStarLevelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 starLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &starlevel_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUpgradeTaskStarLevelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUpgradeTaskStarLevelAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 starLevel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpgradeTaskStarLevelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 starLevel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->starlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpgradeTaskStarLevelAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 starLevel = 1;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUpgradeTaskStarLevelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpgradeTaskStarLevelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpgradeTaskStarLevelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpgradeTaskStarLevelAck::MergeFrom(const MsgUpgradeTaskStarLevelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_starlevel(from.starlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpgradeTaskStarLevelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpgradeTaskStarLevelAck::CopyFrom(const MsgUpgradeTaskStarLevelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpgradeTaskStarLevelAck::IsInitialized() const {
  
  return true;
}

void MsgUpgradeTaskStarLevelAck::Swap(MsgUpgradeTaskStarLevelAck* other) {
  if (other != this) {
    std::swap(starlevel_, other->starlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpgradeTaskStarLevelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpgradeTaskStarLevelAck_descriptor_;
  metadata.reflection = MsgUpgradeTaskStarLevelAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgGetInteriorRewardReq::MsgGetInteriorRewardReq() {
  SharedCtor();
}

void MsgGetInteriorRewardReq::InitAsDefaultInstance() {
}

MsgGetInteriorRewardReq::MsgGetInteriorRewardReq(const MsgGetInteriorRewardReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetInteriorRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetInteriorRewardReq::~MsgGetInteriorRewardReq() {
  SharedDtor();
}

void MsgGetInteriorRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGetInteriorRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetInteriorRewardReq_descriptor_;
}

const MsgGetInteriorRewardReq& MsgGetInteriorRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGetInteriorRewardReq* MsgGetInteriorRewardReq::default_instance_ = NULL;

MsgGetInteriorRewardReq* MsgGetInteriorRewardReq::New() const {
  return new MsgGetInteriorRewardReq;
}

void MsgGetInteriorRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetInteriorRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgGetInteriorRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGetInteriorRewardReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetInteriorRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetInteriorRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGetInteriorRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetInteriorRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetInteriorRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetInteriorRewardReq::MergeFrom(const MsgGetInteriorRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetInteriorRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetInteriorRewardReq::CopyFrom(const MsgGetInteriorRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetInteriorRewardReq::IsInitialized() const {
  
  return true;
}

void MsgGetInteriorRewardReq::Swap(MsgGetInteriorRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetInteriorRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetInteriorRewardReq_descriptor_;
  metadata.reflection = MsgGetInteriorRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetInteriorRewardAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgGetInteriorRewardAck::MsgGetInteriorRewardAck() {
  SharedCtor();
}

void MsgGetInteriorRewardAck::InitAsDefaultInstance() {
}

MsgGetInteriorRewardAck::MsgGetInteriorRewardAck(const MsgGetInteriorRewardAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetInteriorRewardAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetInteriorRewardAck::~MsgGetInteriorRewardAck() {
  SharedDtor();
}

void MsgGetInteriorRewardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgGetInteriorRewardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetInteriorRewardAck_descriptor_;
}

const MsgGetInteriorRewardAck& MsgGetInteriorRewardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgGetInteriorRewardAck* MsgGetInteriorRewardAck::default_instance_ = NULL;

MsgGetInteriorRewardAck* MsgGetInteriorRewardAck::New() const {
  return new MsgGetInteriorRewardAck;
}

void MsgGetInteriorRewardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetInteriorRewardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGetInteriorRewardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgGetInteriorRewardAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetInteriorRewardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetInteriorRewardAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgGetInteriorRewardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetInteriorRewardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetInteriorRewardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetInteriorRewardAck::MergeFrom(const MsgGetInteriorRewardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetInteriorRewardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetInteriorRewardAck::CopyFrom(const MsgGetInteriorRewardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetInteriorRewardAck::IsInitialized() const {
  
  return true;
}

void MsgGetInteriorRewardAck::Swap(MsgGetInteriorRewardAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetInteriorRewardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetInteriorRewardAck_descriptor_;
  metadata.reflection = MsgGetInteriorRewardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCompleteInteriorTaskReq::MsgCompleteInteriorTaskReq() {
  SharedCtor();
}

void MsgCompleteInteriorTaskReq::InitAsDefaultInstance() {
}

MsgCompleteInteriorTaskReq::MsgCompleteInteriorTaskReq(const MsgCompleteInteriorTaskReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCompleteInteriorTaskReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCompleteInteriorTaskReq::~MsgCompleteInteriorTaskReq() {
  SharedDtor();
}

void MsgCompleteInteriorTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCompleteInteriorTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCompleteInteriorTaskReq_descriptor_;
}

const MsgCompleteInteriorTaskReq& MsgCompleteInteriorTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCompleteInteriorTaskReq* MsgCompleteInteriorTaskReq::default_instance_ = NULL;

MsgCompleteInteriorTaskReq* MsgCompleteInteriorTaskReq::New() const {
  return new MsgCompleteInteriorTaskReq;
}

void MsgCompleteInteriorTaskReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCompleteInteriorTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCompleteInteriorTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCompleteInteriorTaskReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCompleteInteriorTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCompleteInteriorTaskReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCompleteInteriorTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCompleteInteriorTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCompleteInteriorTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCompleteInteriorTaskReq::MergeFrom(const MsgCompleteInteriorTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCompleteInteriorTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCompleteInteriorTaskReq::CopyFrom(const MsgCompleteInteriorTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCompleteInteriorTaskReq::IsInitialized() const {
  
  return true;
}

void MsgCompleteInteriorTaskReq::Swap(MsgCompleteInteriorTaskReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCompleteInteriorTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCompleteInteriorTaskReq_descriptor_;
  metadata.reflection = MsgCompleteInteriorTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCompleteInteriorTaskAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgCompleteInteriorTaskAck::MsgCompleteInteriorTaskAck() {
  SharedCtor();
}

void MsgCompleteInteriorTaskAck::InitAsDefaultInstance() {
}

MsgCompleteInteriorTaskAck::MsgCompleteInteriorTaskAck(const MsgCompleteInteriorTaskAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCompleteInteriorTaskAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCompleteInteriorTaskAck::~MsgCompleteInteriorTaskAck() {
  SharedDtor();
}

void MsgCompleteInteriorTaskAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCompleteInteriorTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCompleteInteriorTaskAck_descriptor_;
}

const MsgCompleteInteriorTaskAck& MsgCompleteInteriorTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCompleteInteriorTaskAck* MsgCompleteInteriorTaskAck::default_instance_ = NULL;

MsgCompleteInteriorTaskAck* MsgCompleteInteriorTaskAck::New() const {
  return new MsgCompleteInteriorTaskAck;
}

void MsgCompleteInteriorTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCompleteInteriorTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCompleteInteriorTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCompleteInteriorTaskAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCompleteInteriorTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCompleteInteriorTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCompleteInteriorTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCompleteInteriorTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCompleteInteriorTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCompleteInteriorTaskAck::MergeFrom(const MsgCompleteInteriorTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCompleteInteriorTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCompleteInteriorTaskAck::CopyFrom(const MsgCompleteInteriorTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCompleteInteriorTaskAck::IsInitialized() const {
  
  return true;
}

void MsgCompleteInteriorTaskAck::Swap(MsgCompleteInteriorTaskAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCompleteInteriorTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCompleteInteriorTaskAck_descriptor_;
  metadata.reflection = MsgCompleteInteriorTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCreateArmyReq::MsgCreateArmyReq() {
  SharedCtor();
}

void MsgCreateArmyReq::InitAsDefaultInstance() {
}

MsgCreateArmyReq::MsgCreateArmyReq(const MsgCreateArmyReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCreateArmyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateArmyReq::~MsgCreateArmyReq() {
  SharedDtor();
}

void MsgCreateArmyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCreateArmyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateArmyReq_descriptor_;
}

const MsgCreateArmyReq& MsgCreateArmyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCreateArmyReq* MsgCreateArmyReq::default_instance_ = NULL;

MsgCreateArmyReq* MsgCreateArmyReq::New() const {
  return new MsgCreateArmyReq;
}

void MsgCreateArmyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateArmyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCreateArmyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCreateArmyReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCreateArmyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCreateArmyReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCreateArmyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateArmyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateArmyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateArmyReq::MergeFrom(const MsgCreateArmyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateArmyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateArmyReq::CopyFrom(const MsgCreateArmyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateArmyReq::IsInitialized() const {
  
  return true;
}

void MsgCreateArmyReq::Swap(MsgCreateArmyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateArmyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateArmyReq_descriptor_;
  metadata.reflection = MsgCreateArmyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreateArmyAck::kIdFieldNumber;
#endif  // !_MSC_VER

MsgCreateArmyAck::MsgCreateArmyAck() {
  SharedCtor();
}

void MsgCreateArmyAck::InitAsDefaultInstance() {
}

MsgCreateArmyAck::MsgCreateArmyAck(const MsgCreateArmyAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCreateArmyAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateArmyAck::~MsgCreateArmyAck() {
  SharedDtor();
}

void MsgCreateArmyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCreateArmyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateArmyAck_descriptor_;
}

const MsgCreateArmyAck& MsgCreateArmyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCreateArmyAck* MsgCreateArmyAck::default_instance_ = NULL;

MsgCreateArmyAck* MsgCreateArmyAck::New() const {
  return new MsgCreateArmyAck;
}

void MsgCreateArmyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateArmyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCreateArmyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCreateArmyAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCreateArmyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCreateArmyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCreateArmyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateArmyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateArmyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateArmyAck::MergeFrom(const MsgCreateArmyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateArmyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateArmyAck::CopyFrom(const MsgCreateArmyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateArmyAck::IsInitialized() const {
  
  return true;
}

void MsgCreateArmyAck::Swap(MsgCreateArmyAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateArmyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateArmyAck_descriptor_;
  metadata.reflection = MsgCreateArmyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinArmyReq::kIdFieldNumber;
#endif  // !_MSC_VER

MsgJoinArmyReq::MsgJoinArmyReq() {
  SharedCtor();
}

void MsgJoinArmyReq::InitAsDefaultInstance() {
}

MsgJoinArmyReq::MsgJoinArmyReq(const MsgJoinArmyReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgJoinArmyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinArmyReq::~MsgJoinArmyReq() {
  SharedDtor();
}

void MsgJoinArmyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgJoinArmyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinArmyReq_descriptor_;
}

const MsgJoinArmyReq& MsgJoinArmyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgJoinArmyReq* MsgJoinArmyReq::default_instance_ = NULL;

MsgJoinArmyReq* MsgJoinArmyReq::New() const {
  return new MsgJoinArmyReq;
}

void MsgJoinArmyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinArmyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgJoinArmyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgJoinArmyReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgJoinArmyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgJoinArmyReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgJoinArmyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinArmyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinArmyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinArmyReq::MergeFrom(const MsgJoinArmyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinArmyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinArmyReq::CopyFrom(const MsgJoinArmyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinArmyReq::IsInitialized() const {
  
  return true;
}

void MsgJoinArmyReq::Swap(MsgJoinArmyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinArmyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinArmyReq_descriptor_;
  metadata.reflection = MsgJoinArmyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinArmyAck::kIdFieldNumber;
const int MsgJoinArmyAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgJoinArmyAck::MsgJoinArmyAck() {
  SharedCtor();
}

void MsgJoinArmyAck::InitAsDefaultInstance() {
}

MsgJoinArmyAck::MsgJoinArmyAck(const MsgJoinArmyAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgJoinArmyAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinArmyAck::~MsgJoinArmyAck() {
  SharedDtor();
}

void MsgJoinArmyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgJoinArmyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinArmyAck_descriptor_;
}

const MsgJoinArmyAck& MsgJoinArmyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgJoinArmyAck* MsgJoinArmyAck::default_instance_ = NULL;

MsgJoinArmyAck* MsgJoinArmyAck::New() const {
  return new MsgJoinArmyAck;
}

void MsgJoinArmyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinArmyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgJoinArmyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgJoinArmyAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgJoinArmyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgJoinArmyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgJoinArmyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinArmyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinArmyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinArmyAck::MergeFrom(const MsgJoinArmyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinArmyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinArmyAck::CopyFrom(const MsgJoinArmyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinArmyAck::IsInitialized() const {
  
  return true;
}

void MsgJoinArmyAck::Swap(MsgJoinArmyAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinArmyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinArmyAck_descriptor_;
  metadata.reflection = MsgJoinArmyAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgApproveJoinArmyReq::_default_rolename_;
#ifndef _MSC_VER
const int MsgApproveJoinArmyReq::kRoleNameFieldNumber;
#endif  // !_MSC_VER

MsgApproveJoinArmyReq::MsgApproveJoinArmyReq() {
  SharedCtor();
}

void MsgApproveJoinArmyReq::InitAsDefaultInstance() {
}

MsgApproveJoinArmyReq::MsgApproveJoinArmyReq(const MsgApproveJoinArmyReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgApproveJoinArmyReq::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApproveJoinArmyReq::~MsgApproveJoinArmyReq() {
  SharedDtor();
}

void MsgApproveJoinArmyReq::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgApproveJoinArmyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApproveJoinArmyReq_descriptor_;
}

const MsgApproveJoinArmyReq& MsgApproveJoinArmyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgApproveJoinArmyReq* MsgApproveJoinArmyReq::default_instance_ = NULL;

MsgApproveJoinArmyReq* MsgApproveJoinArmyReq::New() const {
  return new MsgApproveJoinArmyReq;
}

void MsgApproveJoinArmyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApproveJoinArmyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rolename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rolename().data(), this->rolename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgApproveJoinArmyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgApproveJoinArmyReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string roleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgApproveJoinArmyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgApproveJoinArmyReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgApproveJoinArmyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApproveJoinArmyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApproveJoinArmyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApproveJoinArmyReq::MergeFrom(const MsgApproveJoinArmyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApproveJoinArmyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApproveJoinArmyReq::CopyFrom(const MsgApproveJoinArmyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApproveJoinArmyReq::IsInitialized() const {
  
  return true;
}

void MsgApproveJoinArmyReq::Swap(MsgApproveJoinArmyReq* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApproveJoinArmyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApproveJoinArmyReq_descriptor_;
  metadata.reflection = MsgApproveJoinArmyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgApproveJoinArmyAck::MsgApproveJoinArmyAck() {
  SharedCtor();
}

void MsgApproveJoinArmyAck::InitAsDefaultInstance() {
}

MsgApproveJoinArmyAck::MsgApproveJoinArmyAck(const MsgApproveJoinArmyAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgApproveJoinArmyAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApproveJoinArmyAck::~MsgApproveJoinArmyAck() {
  SharedDtor();
}

void MsgApproveJoinArmyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgApproveJoinArmyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApproveJoinArmyAck_descriptor_;
}

const MsgApproveJoinArmyAck& MsgApproveJoinArmyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgApproveJoinArmyAck* MsgApproveJoinArmyAck::default_instance_ = NULL;

MsgApproveJoinArmyAck* MsgApproveJoinArmyAck::New() const {
  return new MsgApproveJoinArmyAck;
}

void MsgApproveJoinArmyAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApproveJoinArmyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgApproveJoinArmyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgApproveJoinArmyAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgApproveJoinArmyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgApproveJoinArmyAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgApproveJoinArmyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApproveJoinArmyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApproveJoinArmyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApproveJoinArmyAck::MergeFrom(const MsgApproveJoinArmyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApproveJoinArmyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApproveJoinArmyAck::CopyFrom(const MsgApproveJoinArmyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApproveJoinArmyAck::IsInitialized() const {
  
  return true;
}

void MsgApproveJoinArmyAck::Swap(MsgApproveJoinArmyAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApproveJoinArmyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApproveJoinArmyAck_descriptor_;
  metadata.reflection = MsgApproveJoinArmyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgLeaveArmyReq::MsgLeaveArmyReq() {
  SharedCtor();
}

void MsgLeaveArmyReq::InitAsDefaultInstance() {
}

MsgLeaveArmyReq::MsgLeaveArmyReq(const MsgLeaveArmyReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLeaveArmyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLeaveArmyReq::~MsgLeaveArmyReq() {
  SharedDtor();
}

void MsgLeaveArmyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLeaveArmyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLeaveArmyReq_descriptor_;
}

const MsgLeaveArmyReq& MsgLeaveArmyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgLeaveArmyReq* MsgLeaveArmyReq::default_instance_ = NULL;

MsgLeaveArmyReq* MsgLeaveArmyReq::New() const {
  return new MsgLeaveArmyReq;
}

void MsgLeaveArmyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLeaveArmyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgLeaveArmyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLeaveArmyReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLeaveArmyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLeaveArmyReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLeaveArmyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLeaveArmyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLeaveArmyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLeaveArmyReq::MergeFrom(const MsgLeaveArmyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLeaveArmyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLeaveArmyReq::CopyFrom(const MsgLeaveArmyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLeaveArmyReq::IsInitialized() const {
  
  return true;
}

void MsgLeaveArmyReq::Swap(MsgLeaveArmyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLeaveArmyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLeaveArmyReq_descriptor_;
  metadata.reflection = MsgLeaveArmyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinCountryReq::kIdFieldNumber;
#endif  // !_MSC_VER

MsgJoinCountryReq::MsgJoinCountryReq() {
  SharedCtor();
}

void MsgJoinCountryReq::InitAsDefaultInstance() {
}

MsgJoinCountryReq::MsgJoinCountryReq(const MsgJoinCountryReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgJoinCountryReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinCountryReq::~MsgJoinCountryReq() {
  SharedDtor();
}

void MsgJoinCountryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgJoinCountryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinCountryReq_descriptor_;
}

const MsgJoinCountryReq& MsgJoinCountryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgJoinCountryReq* MsgJoinCountryReq::default_instance_ = NULL;

MsgJoinCountryReq* MsgJoinCountryReq::New() const {
  return new MsgJoinCountryReq;
}

void MsgJoinCountryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinCountryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgJoinCountryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgJoinCountryReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgJoinCountryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgJoinCountryReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgJoinCountryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinCountryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinCountryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinCountryReq::MergeFrom(const MsgJoinCountryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinCountryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinCountryReq::CopyFrom(const MsgJoinCountryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinCountryReq::IsInitialized() const {
  
  return true;
}

void MsgJoinCountryReq::Swap(MsgJoinCountryReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinCountryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinCountryReq_descriptor_;
  metadata.reflection = MsgJoinCountryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgLeaveCountryReq::MsgLeaveCountryReq() {
  SharedCtor();
}

void MsgLeaveCountryReq::InitAsDefaultInstance() {
}

MsgLeaveCountryReq::MsgLeaveCountryReq(const MsgLeaveCountryReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLeaveCountryReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLeaveCountryReq::~MsgLeaveCountryReq() {
  SharedDtor();
}

void MsgLeaveCountryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLeaveCountryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLeaveCountryReq_descriptor_;
}

const MsgLeaveCountryReq& MsgLeaveCountryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgLeaveCountryReq* MsgLeaveCountryReq::default_instance_ = NULL;

MsgLeaveCountryReq* MsgLeaveCountryReq::New() const {
  return new MsgLeaveCountryReq;
}

void MsgLeaveCountryReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLeaveCountryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgLeaveCountryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLeaveCountryReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLeaveCountryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLeaveCountryReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLeaveCountryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLeaveCountryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLeaveCountryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLeaveCountryReq::MergeFrom(const MsgLeaveCountryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLeaveCountryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLeaveCountryReq::CopyFrom(const MsgLeaveCountryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLeaveCountryReq::IsInitialized() const {
  
  return true;
}

void MsgLeaveCountryReq::Swap(MsgLeaveCountryReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLeaveCountryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLeaveCountryReq_descriptor_;
  metadata.reflection = MsgLeaveCountryReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCountryAssignReq::_default_rolename_;
#ifndef _MSC_VER
const int MsgCountryAssignReq::kRoleNameFieldNumber;
const int MsgCountryAssignReq::kOfficeFieldNumber;
#endif  // !_MSC_VER

MsgCountryAssignReq::MsgCountryAssignReq() {
  SharedCtor();
}

void MsgCountryAssignReq::InitAsDefaultInstance() {
}

MsgCountryAssignReq::MsgCountryAssignReq(const MsgCountryAssignReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCountryAssignReq::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  office_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCountryAssignReq::~MsgCountryAssignReq() {
  SharedDtor();
}

void MsgCountryAssignReq::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCountryAssignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCountryAssignReq_descriptor_;
}

const MsgCountryAssignReq& MsgCountryAssignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCountryAssignReq* MsgCountryAssignReq::default_instance_ = NULL;

MsgCountryAssignReq* MsgCountryAssignReq::New() const {
  return new MsgCountryAssignReq;
}

void MsgCountryAssignReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    office_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCountryAssignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rolename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rolename().data(), this->rolename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_office;
        break;
      }
      
      // optional .IGameProto.OFFICER_TYPE office = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_office:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::OFFICER_TYPE_IsValid(value)) {
          set_office(static_cast< IGameProto::OFFICER_TYPE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCountryAssignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCountryAssignReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string roleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional .IGameProto.OFFICER_TYPE office = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCountryAssignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional .IGameProto.OFFICER_TYPE office = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCountryAssignReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional .IGameProto.OFFICER_TYPE office = 2;
    if (has_office()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCountryAssignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCountryAssignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCountryAssignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCountryAssignReq::MergeFrom(const MsgCountryAssignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(1)) {
      set_office(from.office());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCountryAssignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCountryAssignReq::CopyFrom(const MsgCountryAssignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCountryAssignReq::IsInitialized() const {
  
  return true;
}

void MsgCountryAssignReq::Swap(MsgCountryAssignReq* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(office_, other->office_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCountryAssignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCountryAssignReq_descriptor_;
  metadata.reflection = MsgCountryAssignReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgArmyAssignReq::_default_rolename_;
#ifndef _MSC_VER
const int MsgArmyAssignReq::kRoleNameFieldNumber;
const int MsgArmyAssignReq::kOfficeFieldNumber;
#endif  // !_MSC_VER

MsgArmyAssignReq::MsgArmyAssignReq() {
  SharedCtor();
}

void MsgArmyAssignReq::InitAsDefaultInstance() {
}

MsgArmyAssignReq::MsgArmyAssignReq(const MsgArmyAssignReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgArmyAssignReq::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  office_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgArmyAssignReq::~MsgArmyAssignReq() {
  SharedDtor();
}

void MsgArmyAssignReq::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgArmyAssignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgArmyAssignReq_descriptor_;
}

const MsgArmyAssignReq& MsgArmyAssignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgArmyAssignReq* MsgArmyAssignReq::default_instance_ = NULL;

MsgArmyAssignReq* MsgArmyAssignReq::New() const {
  return new MsgArmyAssignReq;
}

void MsgArmyAssignReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    office_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgArmyAssignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rolename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rolename().data(), this->rolename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_office;
        break;
      }
      
      // optional .IGameProto.ArmyOfficerType office = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_office:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ArmyOfficerType_IsValid(value)) {
          set_office(static_cast< IGameProto::ArmyOfficerType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgArmyAssignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgArmyAssignReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string roleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional .IGameProto.ArmyOfficerType office = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgArmyAssignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional .IGameProto.ArmyOfficerType office = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgArmyAssignReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional .IGameProto.ArmyOfficerType office = 2;
    if (has_office()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgArmyAssignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgArmyAssignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgArmyAssignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgArmyAssignReq::MergeFrom(const MsgArmyAssignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(1)) {
      set_office(from.office());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgArmyAssignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgArmyAssignReq::CopyFrom(const MsgArmyAssignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgArmyAssignReq::IsInitialized() const {
  
  return true;
}

void MsgArmyAssignReq::Swap(MsgArmyAssignReq* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(office_, other->office_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgArmyAssignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgArmyAssignReq_descriptor_;
  metadata.reflection = MsgArmyAssignReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string officer::_default_rolename_;
#ifndef _MSC_VER
const int officer::kOfficeTypeFieldNumber;
const int officer::kRoleNameFieldNumber;
#endif  // !_MSC_VER

officer::officer() {
  SharedCtor();
}

void officer::InitAsDefaultInstance() {
}

officer::officer(const officer& from) {
  SharedCtor();
  MergeFrom(from);
}

void officer::SharedCtor() {
  _cached_size_ = 0;
  officetype_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer::~officer() {
  SharedDtor();
}

void officer::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* officer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_descriptor_;
}

const officer& officer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

officer* officer::default_instance_ = NULL;

officer* officer::New() const {
  return new officer;
}

void officer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officetype_ = 0u;
    if (_has_bit(1)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 officeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &officetype_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_roleName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rolename()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rolename().data(), this->rolename().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    officer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 officeType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->officetype(), output);
  }
  
  // optional string roleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 officeType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->officetype(), target);
  }
  
  // optional string roleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 officeType = 1;
    if (has_officetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officetype());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void officer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer::MergeFrom(const officer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_officetype(from.officetype());
    }
    if (from._has_bit(1)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer::CopyFrom(const officer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer::IsInitialized() const {
  
  return true;
}

void officer::Swap(officer* other) {
  if (other != this) {
    std::swap(officetype_, other->officetype_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_descriptor_;
  metadata.reflection = officer_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ArmyInfo::_default_general_;
#ifndef _MSC_VER
const int ArmyInfo::kIdFieldNumber;
const int ArmyInfo::kLevelFieldNumber;
const int ArmyInfo::kMoneyFieldNumber;
const int ArmyInfo::kMembersFieldNumber;
const int ArmyInfo::kNewbiesFieldNumber;
const int ArmyInfo::kAppliersFieldNumber;
const int ArmyInfo::kCityFieldNumber;
const int ArmyInfo::kCountryFieldNumber;
const int ArmyInfo::kOfficersFieldNumber;
const int ArmyInfo::kGeneralFieldNumber;
#endif  // !_MSC_VER

ArmyInfo::ArmyInfo() {
  SharedCtor();
}

void ArmyInfo::InitAsDefaultInstance() {
}

ArmyInfo::ArmyInfo(const ArmyInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void ArmyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  money_ = 0u;
  city_ = 0u;
  country_ = 0u;
  general_ = const_cast< ::std::string*>(&_default_general_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmyInfo::~ArmyInfo() {
  SharedDtor();
}

void ArmyInfo::SharedDtor() {
  if (general_ != &_default_general_) {
    delete general_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ArmyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmyInfo_descriptor_;
}

const ArmyInfo& ArmyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

ArmyInfo* ArmyInfo::default_instance_ = NULL;

ArmyInfo* ArmyInfo::New() const {
  return new ArmyInfo;
}

void ArmyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    money_ = 0u;
    city_ = 0u;
    country_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (_has_bit(9)) {
      if (general_ != &_default_general_) {
        general_->clear();
      }
    }
  }
  members_.Clear();
  newbies_.Clear();
  appliers_.Clear();
  officers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional uint32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_money:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }
      
      // repeated string members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_members:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_members()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->members(0).data(), this->members(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(42)) goto parse_newbies;
        break;
      }
      
      // repeated string newbies = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_newbies:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_newbies()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->newbies(0).data(), this->newbies(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_newbies;
        if (input->ExpectTag(50)) goto parse_appliers;
        break;
      }
      
      // repeated string appliers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_appliers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_appliers()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->appliers(0).data(), this->appliers(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(50)) goto parse_appliers;
        if (input->ExpectTag(56)) goto parse_city;
        break;
      }
      
      // optional uint32 city = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_city:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &city_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_country;
        break;
      }
      
      // optional uint32 country = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_country:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &country_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_officers;
        break;
      }
      
      // repeated .IGameProto.officer officers = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_officers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_officers()));
        if (input->ExpectTag(74)) goto parse_officers;
        if (input->ExpectTag(82)) goto parse_general;
        break;
      }
      
      // optional string general = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_general:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_general()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->general().data(), this->general().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ArmyInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 money = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money(), output);
  }
  
  // repeated string members = 4;
  for (int i = 0; i < this->members_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->members(i).data(), this->members(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->members(i), output);
  }
  
  // repeated string newbies = 5;
  for (int i = 0; i < this->newbies_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->newbies(i).data(), this->newbies(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->newbies(i), output);
  }
  
  // repeated string appliers = 6;
  for (int i = 0; i < this->appliers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->appliers(i).data(), this->appliers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->appliers(i), output);
  }
  
  // optional uint32 city = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->city(), output);
  }
  
  // optional uint32 country = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->country(), output);
  }
  
  // repeated .IGameProto.officer officers = 9;
  for (int i = 0; i < this->officers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->officers(i), output);
  }
  
  // optional string general = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->general().data(), this->general().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->general(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 money = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money(), target);
  }
  
  // repeated string members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members(i).data(), this->members(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->members(i), target);
  }
  
  // repeated string newbies = 5;
  for (int i = 0; i < this->newbies_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newbies(i).data(), this->newbies(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->newbies(i), target);
  }
  
  // repeated string appliers = 6;
  for (int i = 0; i < this->appliers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appliers(i).data(), this->appliers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->appliers(i), target);
  }
  
  // optional uint32 city = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->city(), target);
  }
  
  // optional uint32 country = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->country(), target);
  }
  
  // repeated .IGameProto.officer officers = 9;
  for (int i = 0; i < this->officers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->officers(i), target);
  }
  
  // optional string general = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->general().data(), this->general().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->general(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }
    
    // optional uint32 city = 7;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }
    
    // optional uint32 country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string general = 10;
    if (has_general()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->general());
    }
    
  }
  // repeated string members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->members(i));
  }
  
  // repeated string newbies = 5;
  total_size += 1 * this->newbies_size();
  for (int i = 0; i < this->newbies_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->newbies(i));
  }
  
  // repeated string appliers = 6;
  total_size += 1 * this->appliers_size();
  for (int i = 0; i < this->appliers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->appliers(i));
  }
  
  // repeated .IGameProto.officer officers = 9;
  total_size += 1 * this->officers_size();
  for (int i = 0; i < this->officers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ArmyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmyInfo::MergeFrom(const ArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  newbies_.MergeFrom(from.newbies_);
  appliers_.MergeFrom(from.appliers_);
  officers_.MergeFrom(from.officers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(6)) {
      set_city(from.city());
    }
    if (from._has_bit(7)) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_general(from.general());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmyInfo::CopyFrom(const ArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmyInfo::IsInitialized() const {
  
  return true;
}

void ArmyInfo::Swap(ArmyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    members_.Swap(&other->members_);
    newbies_.Swap(&other->newbies_);
    appliers_.Swap(&other->appliers_);
    std::swap(city_, other->city_);
    std::swap(country_, other->country_);
    officers_.Swap(&other->officers_);
    std::swap(general_, other->general_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmyInfo_descriptor_;
  metadata.reflection = ArmyInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CountryInfo::_default_notice_;
const ::std::string CountryInfo::_default_name_;
const ::std::string CountryInfo::_default_kingname_;
#ifndef _MSC_VER
const int CountryInfo::kIdFieldNumber;
const int CountryInfo::kArmiesFieldNumber;
const int CountryInfo::kMoneyFieldNumber;
const int CountryInfo::kPopularityFieldNumber;
const int CountryInfo::kStateFieldNumber;
const int CountryInfo::kCitiesFieldNumber;
const int CountryInfo::kFriendsFieldNumber;
const int CountryInfo::kEnemiesFieldNumber;
const int CountryInfo::kPowerFieldNumber;
const int CountryInfo::kNoticeFieldNumber;
const int CountryInfo::kNameFieldNumber;
const int CountryInfo::kOfficersFieldNumber;
const int CountryInfo::kKingNameFieldNumber;
#endif  // !_MSC_VER

CountryInfo::CountryInfo() {
  SharedCtor();
}

void CountryInfo::InitAsDefaultInstance() {
}

CountryInfo::CountryInfo(const CountryInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void CountryInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  money_ = 0u;
  popularity_ = 0u;
  state_ = 0;
  power_ = 0u;
  notice_ = const_cast< ::std::string*>(&_default_notice_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  kingname_ = const_cast< ::std::string*>(&_default_kingname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryInfo::~CountryInfo() {
  SharedDtor();
}

void CountryInfo::SharedDtor() {
  if (notice_ != &_default_notice_) {
    delete notice_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (kingname_ != &_default_kingname_) {
    delete kingname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CountryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryInfo_descriptor_;
}

const CountryInfo& CountryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

CountryInfo* CountryInfo::default_instance_ = NULL;

CountryInfo* CountryInfo::New() const {
  return new CountryInfo;
}

void CountryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    money_ = 0u;
    popularity_ = 0u;
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0u;
    if (_has_bit(9)) {
      if (notice_ != &_default_notice_) {
        notice_->clear();
      }
    }
    if (_has_bit(10)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(12)) {
      if (kingname_ != &_default_kingname_) {
        kingname_->clear();
      }
    }
  }
  armies_.Clear();
  cities_.Clear();
  friends_.Clear();
  enemies_.Clear();
  officers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(26)) goto parse_armies;
        break;
      }
      
      // repeated .IGameProto.ArmyInfo armies = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_armies:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_armies()));
        if (input->ExpectTag(26)) goto parse_armies;
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }
      
      // optional uint32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_money:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &money_));
        _set_bit(2);
        if (input->ExpectTag(40)) goto parse_popularity;
        break;
      }
      
      // optional uint32 popularity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_popularity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &popularity_));
        _set_bit(3);
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }
      
      // optional .IGameProto.COUNTRY_STATE state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::COUNTRY_STATE_IsValid(value)) {
          set_state(static_cast< IGameProto::COUNTRY_STATE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectTag(56)) goto parse_cities;
        break;
      }
      
      // repeated uint32 cities = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cities:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_cities(value);
        if (input->ExpectTag(56)) goto parse_cities;
        if (input->ExpectTag(64)) goto parse_friends;
        break;
      }
      
      // repeated uint32 friends = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_friends:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_friends(value);
        if (input->ExpectTag(64)) goto parse_friends;
        if (input->ExpectTag(72)) goto parse_enemies;
        break;
      }
      
      // repeated uint32 enemies = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_enemies:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_enemies(value);
        if (input->ExpectTag(72)) goto parse_enemies;
        if (input->ExpectTag(80)) goto parse_power;
        break;
      }
      
      // optional uint32 power = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_power:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &power_));
        _set_bit(8);
        if (input->ExpectTag(90)) goto parse_notice;
        break;
      }
      
      // optional string notice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_notice:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_notice()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->notice().data(), this->notice().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }
      
      // optional string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(106)) goto parse_officers;
        break;
      }
      
      // repeated .IGameProto.officer officers = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_officers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_officers()));
        if (input->ExpectTag(106)) goto parse_officers;
        if (input->ExpectTag(114)) goto parse_kingName;
        break;
      }
      
      // optional string kingName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_kingName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_kingname()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->kingname().data(), this->kingname().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CountryInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .IGameProto.ArmyInfo armies = 3;
  for (int i = 0; i < this->armies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->armies(i), output);
  }
  
  // optional uint32 money = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->money(), output);
  }
  
  // optional uint32 popularity = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->popularity(), output);
  }
  
  // optional .IGameProto.COUNTRY_STATE state = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }
  
  // repeated uint32 cities = 7;
  for (int i = 0; i < this->cities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->cities(i), output);
  }
  
  // repeated uint32 friends = 8;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->friends(i), output);
  }
  
  // repeated uint32 enemies = 9;
  for (int i = 0; i < this->enemies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->enemies(i), output);
  }
  
  // optional uint32 power = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->power(), output);
  }
  
  // optional string notice = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->notice(), output);
  }
  
  // optional string name = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }
  
  // repeated .IGameProto.officer officers = 13;
  for (int i = 0; i < this->officers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->officers(i), output);
  }
  
  // optional string kingName = 14;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kingname().data(), this->kingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->kingname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .IGameProto.ArmyInfo armies = 3;
  for (int i = 0; i < this->armies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->armies(i), target);
  }
  
  // optional uint32 money = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->money(), target);
  }
  
  // optional uint32 popularity = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->popularity(), target);
  }
  
  // optional .IGameProto.COUNTRY_STATE state = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }
  
  // repeated uint32 cities = 7;
  for (int i = 0; i < this->cities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->cities(i), target);
  }
  
  // repeated uint32 friends = 8;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->friends(i), target);
  }
  
  // repeated uint32 enemies = 9;
  for (int i = 0; i < this->enemies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->enemies(i), target);
  }
  
  // optional uint32 power = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->power(), target);
  }
  
  // optional string notice = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->notice(), target);
  }
  
  // optional string name = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }
  
  // repeated .IGameProto.officer officers = 13;
  for (int i = 0; i < this->officers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->officers(i), target);
  }
  
  // optional string kingName = 14;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kingname().data(), this->kingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->kingname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }
    
    // optional uint32 popularity = 5;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }
    
    // optional .IGameProto.COUNTRY_STATE state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 power = 10;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }
    
    // optional string notice = 11;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string kingName = 14;
    if (has_kingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kingname());
    }
    
  }
  // repeated .IGameProto.ArmyInfo armies = 3;
  total_size += 1 * this->armies_size();
  for (int i = 0; i < this->armies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armies(i));
  }
  
  // repeated uint32 cities = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cities(i));
    }
    total_size += 1 * this->cities_size() + data_size;
  }
  
  // repeated uint32 friends = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->friends_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->friends(i));
    }
    total_size += 1 * this->friends_size() + data_size;
  }
  
  // repeated uint32 enemies = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemies_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enemies(i));
    }
    total_size += 1 * this->enemies_size() + data_size;
  }
  
  // repeated .IGameProto.officer officers = 13;
  total_size += 1 * this->officers_size();
  for (int i = 0; i < this->officers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CountryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryInfo::MergeFrom(const CountryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  armies_.MergeFrom(from.armies_);
  cities_.MergeFrom(from.cities_);
  friends_.MergeFrom(from.friends_);
  enemies_.MergeFrom(from.enemies_);
  officers_.MergeFrom(from.officers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(2)) {
      set_money(from.money());
    }
    if (from._has_bit(3)) {
      set_popularity(from.popularity());
    }
    if (from._has_bit(4)) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_power(from.power());
    }
    if (from._has_bit(9)) {
      set_notice(from.notice());
    }
    if (from._has_bit(10)) {
      set_name(from.name());
    }
    if (from._has_bit(12)) {
      set_kingname(from.kingname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryInfo::CopyFrom(const CountryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryInfo::IsInitialized() const {
  
  return true;
}

void CountryInfo::Swap(CountryInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    armies_.Swap(&other->armies_);
    std::swap(money_, other->money_);
    std::swap(popularity_, other->popularity_);
    std::swap(state_, other->state_);
    cities_.Swap(&other->cities_);
    friends_.Swap(&other->friends_);
    enemies_.Swap(&other->enemies_);
    std::swap(power_, other->power_);
    std::swap(notice_, other->notice_);
    std::swap(name_, other->name_);
    officers_.Swap(&other->officers_);
    std::swap(kingname_, other->kingname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryInfo_descriptor_;
  metadata.reflection = CountryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCountryInofNtf::kCountriesFieldNumber;
#endif  // !_MSC_VER

MsgCountryInofNtf::MsgCountryInofNtf() {
  SharedCtor();
}

void MsgCountryInofNtf::InitAsDefaultInstance() {
}

MsgCountryInofNtf::MsgCountryInofNtf(const MsgCountryInofNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCountryInofNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCountryInofNtf::~MsgCountryInofNtf() {
  SharedDtor();
}

void MsgCountryInofNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCountryInofNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCountryInofNtf_descriptor_;
}

const MsgCountryInofNtf& MsgCountryInofNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCountryInofNtf* MsgCountryInofNtf::default_instance_ = NULL;

MsgCountryInofNtf* MsgCountryInofNtf::New() const {
  return new MsgCountryInofNtf;
}

void MsgCountryInofNtf::Clear() {
  countries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCountryInofNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.CountryInfo countries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_countries:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_countries()));
        if (input->ExpectTag(10)) goto parse_countries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCountryInofNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCountryInofNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.CountryInfo countries = 1;
  for (int i = 0; i < this->countries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->countries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCountryInofNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.CountryInfo countries = 1;
  for (int i = 0; i < this->countries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCountryInofNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.CountryInfo countries = 1;
  total_size += 1 * this->countries_size();
  for (int i = 0; i < this->countries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->countries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCountryInofNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCountryInofNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCountryInofNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCountryInofNtf::MergeFrom(const MsgCountryInofNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  countries_.MergeFrom(from.countries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCountryInofNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCountryInofNtf::CopyFrom(const MsgCountryInofNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCountryInofNtf::IsInitialized() const {
  
  return true;
}

void MsgCountryInofNtf::Swap(MsgCountryInofNtf* other) {
  if (other != this) {
    countries_.Swap(&other->countries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCountryInofNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCountryInofNtf_descriptor_;
  metadata.reflection = MsgCountryInofNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCallWarReq::kCountryIdFieldNumber;
#endif  // !_MSC_VER

MsgCallWarReq::MsgCallWarReq() {
  SharedCtor();
}

void MsgCallWarReq::InitAsDefaultInstance() {
}

MsgCallWarReq::MsgCallWarReq(const MsgCallWarReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCallWarReq::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCallWarReq::~MsgCallWarReq() {
  SharedDtor();
}

void MsgCallWarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCallWarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCallWarReq_descriptor_;
}

const MsgCallWarReq& MsgCallWarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCallWarReq* MsgCallWarReq::default_instance_ = NULL;

MsgCallWarReq* MsgCallWarReq::New() const {
  return new MsgCallWarReq;
}

void MsgCallWarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCallWarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 countryId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &countryid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCallWarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCallWarReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 countryId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->countryid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCallWarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 countryId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->countryid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCallWarReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 countryId = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCallWarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCallWarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCallWarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCallWarReq::MergeFrom(const MsgCallWarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCallWarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCallWarReq::CopyFrom(const MsgCallWarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCallWarReq::IsInitialized() const {
  
  return true;
}

void MsgCallWarReq::Swap(MsgCallWarReq* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCallWarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCallWarReq_descriptor_;
  metadata.reflection = MsgCallWarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCallWarAck::MsgCallWarAck() {
  SharedCtor();
}

void MsgCallWarAck::InitAsDefaultInstance() {
}

MsgCallWarAck::MsgCallWarAck(const MsgCallWarAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCallWarAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCallWarAck::~MsgCallWarAck() {
  SharedDtor();
}

void MsgCallWarAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCallWarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCallWarAck_descriptor_;
}

const MsgCallWarAck& MsgCallWarAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCallWarAck* MsgCallWarAck::default_instance_ = NULL;

MsgCallWarAck* MsgCallWarAck::New() const {
  return new MsgCallWarAck;
}

void MsgCallWarAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCallWarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCallWarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCallWarAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCallWarAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCallWarAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCallWarAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCallWarAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCallWarAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCallWarAck::MergeFrom(const MsgCallWarAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCallWarAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCallWarAck::CopyFrom(const MsgCallWarAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCallWarAck::IsInitialized() const {
  
  return true;
}

void MsgCallWarAck::Swap(MsgCallWarAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCallWarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCallWarAck_descriptor_;
  metadata.reflection = MsgCallWarAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallWarInfo::kActiveIdFieldNumber;
const int CallWarInfo::kPassiveIdFieldNumber;
#endif  // !_MSC_VER

CallWarInfo::CallWarInfo() {
  SharedCtor();
}

void CallWarInfo::InitAsDefaultInstance() {
}

CallWarInfo::CallWarInfo(const CallWarInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void CallWarInfo::SharedCtor() {
  _cached_size_ = 0;
  active_id_ = 0u;
  passive_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallWarInfo::~CallWarInfo() {
  SharedDtor();
}

void CallWarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CallWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallWarInfo_descriptor_;
}

const CallWarInfo& CallWarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

CallWarInfo* CallWarInfo::default_instance_ = NULL;

CallWarInfo* CallWarInfo::New() const {
  return new CallWarInfo;
}

void CallWarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_id_ = 0u;
    passive_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 active_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &active_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_passive_id;
        break;
      }
      
      // optional uint32 passive_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_passive_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &passive_id_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CallWarInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 active_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_id(), output);
  }
  
  // optional uint32 passive_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passive_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallWarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 active_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_id(), target);
  }
  
  // optional uint32 passive_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passive_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallWarInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 active_id = 1;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_id());
    }
    
    // optional uint32 passive_id = 2;
    if (has_passive_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passive_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CallWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallWarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallWarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallWarInfo::MergeFrom(const CallWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_active_id(from.active_id());
    }
    if (from._has_bit(1)) {
      set_passive_id(from.passive_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallWarInfo::CopyFrom(const CallWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallWarInfo::IsInitialized() const {
  
  return true;
}

void CallWarInfo::Swap(CallWarInfo* other) {
  if (other != this) {
    std::swap(active_id_, other->active_id_);
    std::swap(passive_id_, other->passive_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallWarInfo_descriptor_;
  metadata.reflection = CallWarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCallWarInfoReq::MsgCallWarInfoReq() {
  SharedCtor();
}

void MsgCallWarInfoReq::InitAsDefaultInstance() {
}

MsgCallWarInfoReq::MsgCallWarInfoReq(const MsgCallWarInfoReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCallWarInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCallWarInfoReq::~MsgCallWarInfoReq() {
  SharedDtor();
}

void MsgCallWarInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCallWarInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCallWarInfoReq_descriptor_;
}

const MsgCallWarInfoReq& MsgCallWarInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCallWarInfoReq* MsgCallWarInfoReq::default_instance_ = NULL;

MsgCallWarInfoReq* MsgCallWarInfoReq::New() const {
  return new MsgCallWarInfoReq;
}

void MsgCallWarInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCallWarInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCallWarInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCallWarInfoReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCallWarInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCallWarInfoReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCallWarInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCallWarInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCallWarInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCallWarInfoReq::MergeFrom(const MsgCallWarInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCallWarInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCallWarInfoReq::CopyFrom(const MsgCallWarInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCallWarInfoReq::IsInitialized() const {
  
  return true;
}

void MsgCallWarInfoReq::Swap(MsgCallWarInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCallWarInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCallWarInfoReq_descriptor_;
  metadata.reflection = MsgCallWarInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCallWarInfoAck::kCallWarInfoFieldNumber;
const int MsgCallWarInfoAck::kTimeLeftFieldNumber;
#endif  // !_MSC_VER

MsgCallWarInfoAck::MsgCallWarInfoAck() {
  SharedCtor();
}

void MsgCallWarInfoAck::InitAsDefaultInstance() {
}

MsgCallWarInfoAck::MsgCallWarInfoAck(const MsgCallWarInfoAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCallWarInfoAck::SharedCtor() {
  _cached_size_ = 0;
  timeleft_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCallWarInfoAck::~MsgCallWarInfoAck() {
  SharedDtor();
}

void MsgCallWarInfoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCallWarInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCallWarInfoAck_descriptor_;
}

const MsgCallWarInfoAck& MsgCallWarInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCallWarInfoAck* MsgCallWarInfoAck::default_instance_ = NULL;

MsgCallWarInfoAck* MsgCallWarInfoAck::New() const {
  return new MsgCallWarInfoAck;
}

void MsgCallWarInfoAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    timeleft_ = 0u;
  }
  call_war_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCallWarInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.CallWarInfo call_war_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_call_war_info:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_call_war_info()));
        if (input->ExpectTag(10)) goto parse_call_war_info;
        if (input->ExpectTag(16)) goto parse_timeLeft;
        break;
      }
      
      // optional uint32 timeLeft = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timeLeft:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &timeleft_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCallWarInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCallWarInfoAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.CallWarInfo call_war_info = 1;
  for (int i = 0; i < this->call_war_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->call_war_info(i), output);
  }
  
  // optional uint32 timeLeft = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeleft(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCallWarInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.CallWarInfo call_war_info = 1;
  for (int i = 0; i < this->call_war_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->call_war_info(i), target);
  }
  
  // optional uint32 timeLeft = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeleft(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCallWarInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 timeLeft = 2;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeleft());
    }
    
  }
  // repeated .IGameProto.CallWarInfo call_war_info = 1;
  total_size += 1 * this->call_war_info_size();
  for (int i = 0; i < this->call_war_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->call_war_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCallWarInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCallWarInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCallWarInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCallWarInfoAck::MergeFrom(const MsgCallWarInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  call_war_info_.MergeFrom(from.call_war_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCallWarInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCallWarInfoAck::CopyFrom(const MsgCallWarInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCallWarInfoAck::IsInitialized() const {
  
  return true;
}

void MsgCallWarInfoAck::Swap(MsgCallWarInfoAck* other) {
  if (other != this) {
    call_war_info_.Swap(&other->call_war_info_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCallWarInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCallWarInfoAck_descriptor_;
  metadata.reflection = MsgCallWarInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExchangeMoneyReq::kSourceMoneyTypeFieldNumber;
const int MsgExchangeMoneyReq::kSourceMoneyCountFieldNumber;
const int MsgExchangeMoneyReq::kDestMoneyTypeFieldNumber;
#endif  // !_MSC_VER

MsgExchangeMoneyReq::MsgExchangeMoneyReq() {
  SharedCtor();
}

void MsgExchangeMoneyReq::InitAsDefaultInstance() {
}

MsgExchangeMoneyReq::MsgExchangeMoneyReq(const MsgExchangeMoneyReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgExchangeMoneyReq::SharedCtor() {
  _cached_size_ = 0;
  sourcemoneytype_ = 0u;
  sourcemoneycount_ = GOOGLE_ULONGLONG(0);
  destmoneytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExchangeMoneyReq::~MsgExchangeMoneyReq() {
  SharedDtor();
}

void MsgExchangeMoneyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgExchangeMoneyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExchangeMoneyReq_descriptor_;
}

const MsgExchangeMoneyReq& MsgExchangeMoneyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgExchangeMoneyReq* MsgExchangeMoneyReq::default_instance_ = NULL;

MsgExchangeMoneyReq* MsgExchangeMoneyReq::New() const {
  return new MsgExchangeMoneyReq;
}

void MsgExchangeMoneyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourcemoneytype_ = 0u;
    sourcemoneycount_ = GOOGLE_ULONGLONG(0);
    destmoneytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExchangeMoneyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourceMoneyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &sourcemoneytype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sourceMoneyCount;
        break;
      }
      
      // optional uint64 sourceMoneyCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sourceMoneyCount:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &sourcemoneycount_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_destMoneyType;
        break;
      }
      
      // optional uint32 destMoneyType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destMoneyType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &destmoneytype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExchangeMoneyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgExchangeMoneyReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 sourceMoneyType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourcemoneytype(), output);
  }
  
  // optional uint64 sourceMoneyCount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sourcemoneycount(), output);
  }
  
  // optional uint32 destMoneyType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destmoneytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExchangeMoneyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sourceMoneyType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourcemoneytype(), target);
  }
  
  // optional uint64 sourceMoneyCount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sourcemoneycount(), target);
  }
  
  // optional uint32 destMoneyType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destmoneytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExchangeMoneyReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourceMoneyType = 1;
    if (has_sourcemoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcemoneytype());
    }
    
    // optional uint64 sourceMoneyCount = 2;
    if (has_sourcemoneycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourcemoneycount());
    }
    
    // optional uint32 destMoneyType = 3;
    if (has_destmoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destmoneytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgExchangeMoneyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExchangeMoneyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExchangeMoneyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExchangeMoneyReq::MergeFrom(const MsgExchangeMoneyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sourcemoneytype(from.sourcemoneytype());
    }
    if (from._has_bit(1)) {
      set_sourcemoneycount(from.sourcemoneycount());
    }
    if (from._has_bit(2)) {
      set_destmoneytype(from.destmoneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExchangeMoneyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExchangeMoneyReq::CopyFrom(const MsgExchangeMoneyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExchangeMoneyReq::IsInitialized() const {
  
  return true;
}

void MsgExchangeMoneyReq::Swap(MsgExchangeMoneyReq* other) {
  if (other != this) {
    std::swap(sourcemoneytype_, other->sourcemoneytype_);
    std::swap(sourcemoneycount_, other->sourcemoneycount_);
    std::swap(destmoneytype_, other->destmoneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExchangeMoneyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExchangeMoneyReq_descriptor_;
  metadata.reflection = MsgExchangeMoneyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExchangeMoneyAck::kTotalGoldFieldNumber;
const int MsgExchangeMoneyAck::kTotalSilverFieldNumber;
const int MsgExchangeMoneyAck::kTotalCopperFieldNumber;
const int MsgExchangeMoneyAck::kChangedGoldFieldNumber;
const int MsgExchangeMoneyAck::kChangedSilverFieldNumber;
const int MsgExchangeMoneyAck::kChangedCopperFieldNumber;
const int MsgExchangeMoneyAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgExchangeMoneyAck::MsgExchangeMoneyAck() {
  SharedCtor();
}

void MsgExchangeMoneyAck::InitAsDefaultInstance() {
}

MsgExchangeMoneyAck::MsgExchangeMoneyAck(const MsgExchangeMoneyAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgExchangeMoneyAck::SharedCtor() {
  _cached_size_ = 0;
  totalgold_ = GOOGLE_ULONGLONG(0);
  totalsilver_ = GOOGLE_ULONGLONG(0);
  totalcopper_ = GOOGLE_ULONGLONG(0);
  changedgold_ = GOOGLE_LONGLONG(0);
  changedsilver_ = GOOGLE_LONGLONG(0);
  changedcopper_ = GOOGLE_LONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExchangeMoneyAck::~MsgExchangeMoneyAck() {
  SharedDtor();
}

void MsgExchangeMoneyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgExchangeMoneyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExchangeMoneyAck_descriptor_;
}

const MsgExchangeMoneyAck& MsgExchangeMoneyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgExchangeMoneyAck* MsgExchangeMoneyAck::default_instance_ = NULL;

MsgExchangeMoneyAck* MsgExchangeMoneyAck::New() const {
  return new MsgExchangeMoneyAck;
}

void MsgExchangeMoneyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalgold_ = GOOGLE_ULONGLONG(0);
    totalsilver_ = GOOGLE_ULONGLONG(0);
    totalcopper_ = GOOGLE_ULONGLONG(0);
    changedgold_ = GOOGLE_LONGLONG(0);
    changedsilver_ = GOOGLE_LONGLONG(0);
    changedcopper_ = GOOGLE_LONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExchangeMoneyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 totalGold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &totalgold_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_totalSilver;
        break;
      }
      
      // optional uint64 totalSilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalSilver:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &totalsilver_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_totalCopper;
        break;
      }
      
      // optional uint64 totalCopper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_totalCopper:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &totalcopper_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_changedGold;
        break;
      }
      
      // optional int64 changedGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_changedGold:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &changedgold_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_changedSilver;
        break;
      }
      
      // optional int64 changedSilver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_changedSilver:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &changedsilver_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_changedCopper;
        break;
      }
      
      // optional int64 changedCopper = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_changedCopper:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &changedcopper_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExchangeMoneyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgExchangeMoneyAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 totalGold = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->totalgold(), output);
  }
  
  // optional uint64 totalSilver = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totalsilver(), output);
  }
  
  // optional uint64 totalCopper = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalcopper(), output);
  }
  
  // optional int64 changedGold = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->changedgold(), output);
  }
  
  // optional int64 changedSilver = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->changedsilver(), output);
  }
  
  // optional int64 changedCopper = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->changedcopper(), output);
  }
  
  // optional uint32 status = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExchangeMoneyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 totalGold = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->totalgold(), target);
  }
  
  // optional uint64 totalSilver = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totalsilver(), target);
  }
  
  // optional uint64 totalCopper = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalcopper(), target);
  }
  
  // optional int64 changedGold = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->changedgold(), target);
  }
  
  // optional int64 changedSilver = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->changedsilver(), target);
  }
  
  // optional int64 changedCopper = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->changedcopper(), target);
  }
  
  // optional uint32 status = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExchangeMoneyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 totalGold = 1;
    if (has_totalgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalgold());
    }
    
    // optional uint64 totalSilver = 2;
    if (has_totalsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalsilver());
    }
    
    // optional uint64 totalCopper = 3;
    if (has_totalcopper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalcopper());
    }
    
    // optional int64 changedGold = 4;
    if (has_changedgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changedgold());
    }
    
    // optional int64 changedSilver = 5;
    if (has_changedsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changedsilver());
    }
    
    // optional int64 changedCopper = 6;
    if (has_changedcopper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changedcopper());
    }
    
    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgExchangeMoneyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExchangeMoneyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExchangeMoneyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExchangeMoneyAck::MergeFrom(const MsgExchangeMoneyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_totalgold(from.totalgold());
    }
    if (from._has_bit(1)) {
      set_totalsilver(from.totalsilver());
    }
    if (from._has_bit(2)) {
      set_totalcopper(from.totalcopper());
    }
    if (from._has_bit(3)) {
      set_changedgold(from.changedgold());
    }
    if (from._has_bit(4)) {
      set_changedsilver(from.changedsilver());
    }
    if (from._has_bit(5)) {
      set_changedcopper(from.changedcopper());
    }
    if (from._has_bit(6)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExchangeMoneyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExchangeMoneyAck::CopyFrom(const MsgExchangeMoneyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExchangeMoneyAck::IsInitialized() const {
  
  return true;
}

void MsgExchangeMoneyAck::Swap(MsgExchangeMoneyAck* other) {
  if (other != this) {
    std::swap(totalgold_, other->totalgold_);
    std::swap(totalsilver_, other->totalsilver_);
    std::swap(totalcopper_, other->totalcopper_);
    std::swap(changedgold_, other->changedgold_);
    std::swap(changedsilver_, other->changedsilver_);
    std::swap(changedcopper_, other->changedcopper_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExchangeMoneyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExchangeMoneyAck_descriptor_;
  metadata.reflection = MsgExchangeMoneyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HpInfo::kIdFieldNumber;
const int HpInfo::kHpFieldNumber;
#endif  // !_MSC_VER

HpInfo::HpInfo() {
  SharedCtor();
}

void HpInfo::InitAsDefaultInstance() {
}

HpInfo::HpInfo(const HpInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void HpInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HpInfo::~HpInfo() {
  SharedDtor();
}

void HpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HpInfo_descriptor_;
}

const HpInfo& HpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

HpInfo* HpInfo::default_instance_ = NULL;

HpInfo* HpInfo::New() const {
  return new HpInfo;
}

void HpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // optional uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &hp_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HpInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 hp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 hp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HpInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HpInfo::MergeFrom(const HpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HpInfo::CopyFrom(const HpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HpInfo::IsInitialized() const {
  
  return true;
}

void HpInfo::Swap(HpInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HpInfo_descriptor_;
  metadata.reflection = HpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityInfo::kIdFieldNumber;
const int CityInfo::kIsSelfFieldNumber;
const int CityInfo::kStateFieldNumber;
const int CityInfo::kHpFieldNumber;
#endif  // !_MSC_VER

CityInfo::CityInfo() {
  SharedCtor();
}

void CityInfo::InitAsDefaultInstance() {
}

CityInfo::CityInfo(const CityInfo& from) {
  SharedCtor();
  MergeFrom(from);
}

void CityInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  isself_ = 0u;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityInfo::~CityInfo() {
  SharedDtor();
}

void CityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityInfo_descriptor_;
}

const CityInfo& CityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

CityInfo* CityInfo::default_instance_ = NULL;

CityInfo* CityInfo::New() const {
  return new CityInfo;
}

void CityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    isself_ = 0u;
    state_ = 1;
  }
  hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_isSelf;
        break;
      }
      
      // optional uint32 isSelf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isSelf:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &isself_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional .IGameProto.CITY_STATE state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::CITY_STATE_IsValid(value)) {
          set_state(static_cast< IGameProto::CITY_STATE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(34)) goto parse_hp;
        break;
      }
      
      // repeated .IGameProto.HpInfo hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_hp()));
        if (input->ExpectTag(34)) goto parse_hp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CityInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 isSelf = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isself(), output);
  }
  
  // optional .IGameProto.CITY_STATE state = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }
  
  // repeated .IGameProto.HpInfo hp = 4;
  for (int i = 0; i < this->hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->hp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 isSelf = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isself(), target);
  }
  
  // optional .IGameProto.CITY_STATE state = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }
  
  // repeated .IGameProto.HpInfo hp = 4;
  for (int i = 0; i < this->hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 isSelf = 2;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isself());
    }
    
    // optional .IGameProto.CITY_STATE state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  // repeated .IGameProto.HpInfo hp = 4;
  total_size += 1 * this->hp_size();
  for (int i = 0; i < this->hp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hp(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityInfo::MergeFrom(const CityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hp_.MergeFrom(from.hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_isself(from.isself());
    }
    if (from._has_bit(2)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityInfo::CopyFrom(const CityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityInfo::IsInitialized() const {
  
  return true;
}

void CityInfo::Swap(CityInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isself_, other->isself_);
    std::swap(state_, other->state_);
    hp_.Swap(&other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityInfo_descriptor_;
  metadata.reflection = CityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterCityVisionNtf::kCityFieldNumber;
#endif  // !_MSC_VER

MsgEnterCityVisionNtf::MsgEnterCityVisionNtf() {
  SharedCtor();
}

void MsgEnterCityVisionNtf::InitAsDefaultInstance() {
  city_ = const_cast< ::IGameProto::CityInfo*>(&::IGameProto::CityInfo::default_instance());
}

MsgEnterCityVisionNtf::MsgEnterCityVisionNtf(const MsgEnterCityVisionNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterCityVisionNtf::SharedCtor() {
  _cached_size_ = 0;
  city_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterCityVisionNtf::~MsgEnterCityVisionNtf() {
  SharedDtor();
}

void MsgEnterCityVisionNtf::SharedDtor() {
  if (this != default_instance_) {
    delete city_;
  }
}

const ::google::protobuf::Descriptor* MsgEnterCityVisionNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterCityVisionNtf_descriptor_;
}

const MsgEnterCityVisionNtf& MsgEnterCityVisionNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterCityVisionNtf* MsgEnterCityVisionNtf::default_instance_ = NULL;

MsgEnterCityVisionNtf* MsgEnterCityVisionNtf::New() const {
  return new MsgEnterCityVisionNtf;
}

void MsgEnterCityVisionNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (city_ != NULL) city_->::IGameProto::CityInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterCityVisionNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.CityInfo city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_city()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterCityVisionNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterCityVisionNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.CityInfo city = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->city(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterCityVisionNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.CityInfo city = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterCityVisionNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.CityInfo city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterCityVisionNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterCityVisionNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterCityVisionNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterCityVisionNtf::MergeFrom(const MsgEnterCityVisionNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_city()->::IGameProto::CityInfo::MergeFrom(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterCityVisionNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterCityVisionNtf::CopyFrom(const MsgEnterCityVisionNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterCityVisionNtf::IsInitialized() const {
  
  return true;
}

void MsgEnterCityVisionNtf::Swap(MsgEnterCityVisionNtf* other) {
  if (other != this) {
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterCityVisionNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterCityVisionNtf_descriptor_;
  metadata.reflection = MsgEnterCityVisionNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgOutofCityVisionNtf::kCityIdFieldNumber;
#endif  // !_MSC_VER

MsgOutofCityVisionNtf::MsgOutofCityVisionNtf() {
  SharedCtor();
}

void MsgOutofCityVisionNtf::InitAsDefaultInstance() {
}

MsgOutofCityVisionNtf::MsgOutofCityVisionNtf(const MsgOutofCityVisionNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgOutofCityVisionNtf::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgOutofCityVisionNtf::~MsgOutofCityVisionNtf() {
  SharedDtor();
}

void MsgOutofCityVisionNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgOutofCityVisionNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgOutofCityVisionNtf_descriptor_;
}

const MsgOutofCityVisionNtf& MsgOutofCityVisionNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgOutofCityVisionNtf* MsgOutofCityVisionNtf::default_instance_ = NULL;

MsgOutofCityVisionNtf* MsgOutofCityVisionNtf::New() const {
  return new MsgOutofCityVisionNtf;
}

void MsgOutofCityVisionNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgOutofCityVisionNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &cityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgOutofCityVisionNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgOutofCityVisionNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 cityId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgOutofCityVisionNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cityId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgOutofCityVisionNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgOutofCityVisionNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgOutofCityVisionNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgOutofCityVisionNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgOutofCityVisionNtf::MergeFrom(const MsgOutofCityVisionNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgOutofCityVisionNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOutofCityVisionNtf::CopyFrom(const MsgOutofCityVisionNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOutofCityVisionNtf::IsInitialized() const {
  
  return true;
}

void MsgOutofCityVisionNtf::Swap(MsgOutofCityVisionNtf* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgOutofCityVisionNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgOutofCityVisionNtf_descriptor_;
  metadata.reflection = MsgOutofCityVisionNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCityInfoNtf::kCityFieldNumber;
#endif  // !_MSC_VER

MsgCityInfoNtf::MsgCityInfoNtf() {
  SharedCtor();
}

void MsgCityInfoNtf::InitAsDefaultInstance() {
  city_ = const_cast< ::IGameProto::CityInfo*>(&::IGameProto::CityInfo::default_instance());
}

MsgCityInfoNtf::MsgCityInfoNtf(const MsgCityInfoNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCityInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  city_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCityInfoNtf::~MsgCityInfoNtf() {
  SharedDtor();
}

void MsgCityInfoNtf::SharedDtor() {
  if (this != default_instance_) {
    delete city_;
  }
}

const ::google::protobuf::Descriptor* MsgCityInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCityInfoNtf_descriptor_;
}

const MsgCityInfoNtf& MsgCityInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCityInfoNtf* MsgCityInfoNtf::default_instance_ = NULL;

MsgCityInfoNtf* MsgCityInfoNtf::New() const {
  return new MsgCityInfoNtf;
}

void MsgCityInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (city_ != NULL) city_->::IGameProto::CityInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCityInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.CityInfo city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_city()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCityInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCityInfoNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.CityInfo city = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->city(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCityInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.CityInfo city = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCityInfoNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.CityInfo city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCityInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCityInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCityInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCityInfoNtf::MergeFrom(const MsgCityInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_city()->::IGameProto::CityInfo::MergeFrom(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCityInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCityInfoNtf::CopyFrom(const MsgCityInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCityInfoNtf::IsInitialized() const {
  
  return true;
}

void MsgCityInfoNtf::Swap(MsgCityInfoNtf* other) {
  if (other != this) {
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCityInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCityInfoNtf_descriptor_;
  metadata.reflection = MsgCityInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterCityReq::kCityIdFieldNumber;
#endif  // !_MSC_VER

MsgEnterCityReq::MsgEnterCityReq() {
  SharedCtor();
}

void MsgEnterCityReq::InitAsDefaultInstance() {
}

MsgEnterCityReq::MsgEnterCityReq(const MsgEnterCityReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterCityReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterCityReq::~MsgEnterCityReq() {
  SharedDtor();
}

void MsgEnterCityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgEnterCityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterCityReq_descriptor_;
}

const MsgEnterCityReq& MsgEnterCityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterCityReq* MsgEnterCityReq::default_instance_ = NULL;

MsgEnterCityReq* MsgEnterCityReq::New() const {
  return new MsgEnterCityReq;
}

void MsgEnterCityReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterCityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &cityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterCityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterCityReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 cityId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterCityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cityId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterCityReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterCityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterCityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterCityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterCityReq::MergeFrom(const MsgEnterCityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterCityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterCityReq::CopyFrom(const MsgEnterCityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterCityReq::IsInitialized() const {
  
  return true;
}

void MsgEnterCityReq::Swap(MsgEnterCityReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterCityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterCityReq_descriptor_;
  metadata.reflection = MsgEnterCityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterCityAck::kCityIdFieldNumber;
#endif  // !_MSC_VER

MsgEnterCityAck::MsgEnterCityAck() {
  SharedCtor();
}

void MsgEnterCityAck::InitAsDefaultInstance() {
}

MsgEnterCityAck::MsgEnterCityAck(const MsgEnterCityAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterCityAck::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterCityAck::~MsgEnterCityAck() {
  SharedDtor();
}

void MsgEnterCityAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgEnterCityAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterCityAck_descriptor_;
}

const MsgEnterCityAck& MsgEnterCityAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterCityAck* MsgEnterCityAck::default_instance_ = NULL;

MsgEnterCityAck* MsgEnterCityAck::New() const {
  return new MsgEnterCityAck;
}

void MsgEnterCityAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterCityAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &cityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterCityAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterCityAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 cityId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterCityAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cityId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterCityAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterCityAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterCityAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterCityAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterCityAck::MergeFrom(const MsgEnterCityAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterCityAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterCityAck::CopyFrom(const MsgEnterCityAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterCityAck::IsInitialized() const {
  
  return true;
}

void MsgEnterCityAck::Swap(MsgEnterCityAck* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterCityAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterCityAck_descriptor_;
  metadata.reflection = MsgEnterCityAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCountryBattleEndNtf::_default_msg_;
#ifndef _MSC_VER
const int MsgCountryBattleEndNtf::kMsgFieldNumber;
#endif  // !_MSC_VER

MsgCountryBattleEndNtf::MsgCountryBattleEndNtf() {
  SharedCtor();
}

void MsgCountryBattleEndNtf::InitAsDefaultInstance() {
}

MsgCountryBattleEndNtf::MsgCountryBattleEndNtf(const MsgCountryBattleEndNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCountryBattleEndNtf::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCountryBattleEndNtf::~MsgCountryBattleEndNtf() {
  SharedDtor();
}

void MsgCountryBattleEndNtf::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCountryBattleEndNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCountryBattleEndNtf_descriptor_;
}

const MsgCountryBattleEndNtf& MsgCountryBattleEndNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCountryBattleEndNtf* MsgCountryBattleEndNtf::default_instance_ = NULL;

MsgCountryBattleEndNtf* MsgCountryBattleEndNtf::New() const {
  return new MsgCountryBattleEndNtf;
}

void MsgCountryBattleEndNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCountryBattleEndNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_msg()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->msg().data(), this->msg().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCountryBattleEndNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCountryBattleEndNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCountryBattleEndNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCountryBattleEndNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCountryBattleEndNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCountryBattleEndNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCountryBattleEndNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCountryBattleEndNtf::MergeFrom(const MsgCountryBattleEndNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCountryBattleEndNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCountryBattleEndNtf::CopyFrom(const MsgCountryBattleEndNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCountryBattleEndNtf::IsInitialized() const {
  
  return true;
}

void MsgCountryBattleEndNtf::Swap(MsgCountryBattleEndNtf* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCountryBattleEndNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCountryBattleEndNtf_descriptor_;
  metadata.reflection = MsgCountryBattleEndNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCountryBattleStartNtf::_default_msg_;
#ifndef _MSC_VER
const int MsgCountryBattleStartNtf::kMsgFieldNumber;
#endif  // !_MSC_VER

MsgCountryBattleStartNtf::MsgCountryBattleStartNtf() {
  SharedCtor();
}

void MsgCountryBattleStartNtf::InitAsDefaultInstance() {
}

MsgCountryBattleStartNtf::MsgCountryBattleStartNtf(const MsgCountryBattleStartNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCountryBattleStartNtf::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCountryBattleStartNtf::~MsgCountryBattleStartNtf() {
  SharedDtor();
}

void MsgCountryBattleStartNtf::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCountryBattleStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCountryBattleStartNtf_descriptor_;
}

const MsgCountryBattleStartNtf& MsgCountryBattleStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCountryBattleStartNtf* MsgCountryBattleStartNtf::default_instance_ = NULL;

MsgCountryBattleStartNtf* MsgCountryBattleStartNtf::New() const {
  return new MsgCountryBattleStartNtf;
}

void MsgCountryBattleStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCountryBattleStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_msg()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->msg().data(), this->msg().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCountryBattleStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCountryBattleStartNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCountryBattleStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCountryBattleStartNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCountryBattleStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCountryBattleStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCountryBattleStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCountryBattleStartNtf::MergeFrom(const MsgCountryBattleStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCountryBattleStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCountryBattleStartNtf::CopyFrom(const MsgCountryBattleStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCountryBattleStartNtf::IsInitialized() const {
  
  return true;
}

void MsgCountryBattleStartNtf::Swap(MsgCountryBattleStartNtf* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCountryBattleStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCountryBattleStartNtf_descriptor_;
  metadata.reflection = MsgCountryBattleStartNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgSystemHintNtf::_default_notice_language_id_;
#ifndef _MSC_VER
const int MsgSystemHintNtf::kProirFieldNumber;
const int MsgSystemHintNtf::kNoticeLanguageIdFieldNumber;
const int MsgSystemHintNtf::kShowPostionFieldNumber;
const int MsgSystemHintNtf::kParametersFieldNumber;
#endif  // !_MSC_VER

MsgSystemHintNtf::MsgSystemHintNtf() {
  SharedCtor();
}

void MsgSystemHintNtf::InitAsDefaultInstance() {
}

MsgSystemHintNtf::MsgSystemHintNtf(const MsgSystemHintNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSystemHintNtf::SharedCtor() {
  _cached_size_ = 0;
  proir_ = 0;
  notice_language_id_ = const_cast< ::std::string*>(&_default_notice_language_id_);
  showpostion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSystemHintNtf::~MsgSystemHintNtf() {
  SharedDtor();
}

void MsgSystemHintNtf::SharedDtor() {
  if (notice_language_id_ != &_default_notice_language_id_) {
    delete notice_language_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgSystemHintNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSystemHintNtf_descriptor_;
}

const MsgSystemHintNtf& MsgSystemHintNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgSystemHintNtf* MsgSystemHintNtf::default_instance_ = NULL;

MsgSystemHintNtf* MsgSystemHintNtf::New() const {
  return new MsgSystemHintNtf;
}

void MsgSystemHintNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proir_ = 0;
    if (_has_bit(1)) {
      if (notice_language_id_ != &_default_notice_language_id_) {
        notice_language_id_->clear();
      }
    }
    showpostion_ = 0;
  }
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSystemHintNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &proir_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_notice_language_id;
        break;
      }
      
      // optional string notice_language_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_notice_language_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_notice_language_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->notice_language_id().data(), this->notice_language_id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_showPostion;
        break;
      }
      
      // optional int32 showPostion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_showPostion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &showpostion_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_parameters;
        break;
      }
      
      // repeated string parameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_parameters:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_parameters()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->parameters(0).data(), this->parameters(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_parameters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSystemHintNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSystemHintNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 proir = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proir(), output);
  }
  
  // optional string notice_language_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_language_id().data(), this->notice_language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notice_language_id(), output);
  }
  
  // optional int32 showPostion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->showpostion(), output);
  }
  
  // repeated string parameters = 4;
  for (int i = 0; i < this->parameters_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->parameters(i).data(), this->parameters(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parameters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSystemHintNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 proir = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proir(), target);
  }
  
  // optional string notice_language_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_language_id().data(), this->notice_language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice_language_id(), target);
  }
  
  // optional int32 showPostion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->showpostion(), target);
  }
  
  // repeated string parameters = 4;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameters(i).data(), this->parameters(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->parameters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSystemHintNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 proir = 1;
    if (has_proir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proir());
    }
    
    // optional string notice_language_id = 2;
    if (has_notice_language_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice_language_id());
    }
    
    // optional int32 showPostion = 3;
    if (has_showpostion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showpostion());
    }
    
  }
  // repeated string parameters = 4;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parameters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSystemHintNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSystemHintNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSystemHintNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSystemHintNtf::MergeFrom(const MsgSystemHintNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_proir(from.proir());
    }
    if (from._has_bit(1)) {
      set_notice_language_id(from.notice_language_id());
    }
    if (from._has_bit(2)) {
      set_showpostion(from.showpostion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSystemHintNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSystemHintNtf::CopyFrom(const MsgSystemHintNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSystemHintNtf::IsInitialized() const {
  
  return true;
}

void MsgSystemHintNtf::Swap(MsgSystemHintNtf* other) {
  if (other != this) {
    std::swap(proir_, other->proir_);
    std::swap(notice_language_id_, other->notice_language_id_);
    std::swap(showpostion_, other->showpostion_);
    parameters_.Swap(&other->parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSystemHintNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSystemHintNtf_descriptor_;
  metadata.reflection = MsgSystemHintNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReconnectReq::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgReconnectReq::MsgReconnectReq() {
  SharedCtor();
}

void MsgReconnectReq::InitAsDefaultInstance() {
}

MsgReconnectReq::MsgReconnectReq(const MsgReconnectReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReconnectReq::~MsgReconnectReq() {
  SharedDtor();
}

void MsgReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReconnectReq_descriptor_;
}

const MsgReconnectReq& MsgReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgReconnectReq* MsgReconnectReq::default_instance_ = NULL;

MsgReconnectReq* MsgReconnectReq::New() const {
  return new MsgReconnectReq;
}

void MsgReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReconnectReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReconnectReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReconnectReq::MergeFrom(const MsgReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReconnectReq::CopyFrom(const MsgReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReconnectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgReconnectReq::Swap(MsgReconnectReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReconnectReq_descriptor_;
  metadata.reflection = MsgReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReconnectAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgReconnectAck::MsgReconnectAck() {
  SharedCtor();
}

void MsgReconnectAck::InitAsDefaultInstance() {
}

MsgReconnectAck::MsgReconnectAck(const MsgReconnectAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReconnectAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReconnectAck::~MsgReconnectAck() {
  SharedDtor();
}

void MsgReconnectAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgReconnectAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReconnectAck_descriptor_;
}

const MsgReconnectAck& MsgReconnectAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgReconnectAck* MsgReconnectAck::default_instance_ = NULL;

MsgReconnectAck* MsgReconnectAck::New() const {
  return new MsgReconnectAck;
}

void MsgReconnectAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReconnectAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReconnectAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReconnectAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReconnectAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReconnectAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReconnectAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReconnectAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReconnectAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReconnectAck::MergeFrom(const MsgReconnectAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReconnectAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReconnectAck::CopyFrom(const MsgReconnectAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReconnectAck::IsInitialized() const {
  
  return true;
}

void MsgReconnectAck::Swap(MsgReconnectAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReconnectAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReconnectAck_descriptor_;
  metadata.reflection = MsgReconnectAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgTransReq::MsgTransReq() {
  SharedCtor();
}

void MsgTransReq::InitAsDefaultInstance() {
}

MsgTransReq::MsgTransReq(const MsgTransReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTransReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransReq::~MsgTransReq() {
  SharedDtor();
}

void MsgTransReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgTransReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransReq_descriptor_;
}

const MsgTransReq& MsgTransReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgTransReq* MsgTransReq::default_instance_ = NULL;

MsgTransReq* MsgTransReq::New() const {
  return new MsgTransReq;
}

void MsgTransReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgTransReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTransReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTransReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTransReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTransReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransReq::MergeFrom(const MsgTransReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransReq::CopyFrom(const MsgTransReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransReq::IsInitialized() const {
  
  return true;
}

void MsgTransReq::Swap(MsgTransReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransReq_descriptor_;
  metadata.reflection = MsgTransReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransAck::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgTransAck::MsgTransAck() {
  SharedCtor();
}

void MsgTransAck::InitAsDefaultInstance() {
}

MsgTransAck::MsgTransAck(const MsgTransAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTransAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransAck::~MsgTransAck() {
  SharedDtor();
}

void MsgTransAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgTransAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransAck_descriptor_;
}

const MsgTransAck& MsgTransAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgTransAck* MsgTransAck::default_instance_ = NULL;

MsgTransAck* MsgTransAck::New() const {
  return new MsgTransAck;
}

void MsgTransAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTransAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTransAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTransAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTransAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTransAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransAck::MergeFrom(const MsgTransAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransAck::CopyFrom(const MsgTransAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransAck::IsInitialized() const {
  
  return true;
}

void MsgTransAck::Swap(MsgTransAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransAck_descriptor_;
  metadata.reflection = MsgTransAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTriggerMonsterNtf::kAgainstFormIdFieldNumber;
const int MsgTriggerMonsterNtf::kStatusFieldNumber;
const int MsgTriggerMonsterNtf::kFightIdFieldNumber;
const int MsgTriggerMonsterNtf::kEnemySideFieldNumber;
#endif  // !_MSC_VER

MsgTriggerMonsterNtf::MsgTriggerMonsterNtf() {
  SharedCtor();
}

void MsgTriggerMonsterNtf::InitAsDefaultInstance() {
  enemyside_ = const_cast< ::IGameProto::FightSide*>(&::IGameProto::FightSide::default_instance());
}

MsgTriggerMonsterNtf::MsgTriggerMonsterNtf(const MsgTriggerMonsterNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTriggerMonsterNtf::SharedCtor() {
  _cached_size_ = 0;
  againstformid_ = 0u;
  status_ = 0;
  fightid_ = GOOGLE_ULONGLONG(0);
  enemyside_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTriggerMonsterNtf::~MsgTriggerMonsterNtf() {
  SharedDtor();
}

void MsgTriggerMonsterNtf::SharedDtor() {
  if (this != default_instance_) {
    delete enemyside_;
  }
}

const ::google::protobuf::Descriptor* MsgTriggerMonsterNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTriggerMonsterNtf_descriptor_;
}

const MsgTriggerMonsterNtf& MsgTriggerMonsterNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgTriggerMonsterNtf* MsgTriggerMonsterNtf::default_instance_ = NULL;

MsgTriggerMonsterNtf* MsgTriggerMonsterNtf::New() const {
  return new MsgTriggerMonsterNtf;
}

void MsgTriggerMonsterNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    againstformid_ = 0u;
    status_ = 0;
    fightid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(3)) {
      if (enemyside_ != NULL) enemyside_->::IGameProto::FightSide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTriggerMonsterNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 againstFormId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &againstformid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_fightId;
        break;
      }
      
      // required uint64 fightId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fightId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &fightid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_enemySide;
        break;
      }
      
      // required .IGameProto.FightSide enemySide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_enemySide:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_enemyside()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTriggerMonsterNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTriggerMonsterNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 againstFormId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->againstformid(), output);
  }
  
  // required int32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // required uint64 fightId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightid(), output);
  }
  
  // required .IGameProto.FightSide enemySide = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->enemyside(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTriggerMonsterNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 againstFormId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->againstformid(), target);
  }
  
  // required int32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // required uint64 fightId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightid(), target);
  }
  
  // required .IGameProto.FightSide enemySide = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enemyside(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTriggerMonsterNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 againstFormId = 1;
    if (has_againstformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->againstformid());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required uint64 fightId = 3;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightid());
    }
    
    // required .IGameProto.FightSide enemySide = 4;
    if (has_enemyside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemyside());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTriggerMonsterNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTriggerMonsterNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTriggerMonsterNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTriggerMonsterNtf::MergeFrom(const MsgTriggerMonsterNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_againstformid(from.againstformid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_fightid(from.fightid());
    }
    if (from._has_bit(3)) {
      mutable_enemyside()->::IGameProto::FightSide::MergeFrom(from.enemyside());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTriggerMonsterNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTriggerMonsterNtf::CopyFrom(const MsgTriggerMonsterNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTriggerMonsterNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgTriggerMonsterNtf::Swap(MsgTriggerMonsterNtf* other) {
  if (other != this) {
    std::swap(againstformid_, other->againstformid_);
    std::swap(status_, other->status_);
    std::swap(fightid_, other->fightid_);
    std::swap(enemyside_, other->enemyside_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTriggerMonsterNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTriggerMonsterNtf_descriptor_;
  metadata.reflection = MsgTriggerMonsterNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeRoleModeReq::kRoleModeFieldNumber;
#endif  // !_MSC_VER

MsgChangeRoleModeReq::MsgChangeRoleModeReq() {
  SharedCtor();
}

void MsgChangeRoleModeReq::InitAsDefaultInstance() {
}

MsgChangeRoleModeReq::MsgChangeRoleModeReq(const MsgChangeRoleModeReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeRoleModeReq::SharedCtor() {
  _cached_size_ = 0;
  rolemode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeRoleModeReq::~MsgChangeRoleModeReq() {
  SharedDtor();
}

void MsgChangeRoleModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgChangeRoleModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeRoleModeReq_descriptor_;
}

const MsgChangeRoleModeReq& MsgChangeRoleModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgChangeRoleModeReq* MsgChangeRoleModeReq::default_instance_ = NULL;

MsgChangeRoleModeReq* MsgChangeRoleModeReq::New() const {
  return new MsgChangeRoleModeReq;
}

void MsgChangeRoleModeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rolemode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeRoleModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.ROLE_MODE roleMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ROLE_MODE_IsValid(value)) {
          set_rolemode(static_cast< IGameProto::ROLE_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeRoleModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChangeRoleModeReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.ROLE_MODE roleMode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rolemode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeRoleModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.ROLE_MODE roleMode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rolemode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeRoleModeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.ROLE_MODE roleMode = 1;
    if (has_rolemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rolemode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChangeRoleModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeRoleModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeRoleModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeRoleModeReq::MergeFrom(const MsgChangeRoleModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rolemode(from.rolemode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeRoleModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeRoleModeReq::CopyFrom(const MsgChangeRoleModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeRoleModeReq::IsInitialized() const {
  
  return true;
}

void MsgChangeRoleModeReq::Swap(MsgChangeRoleModeReq* other) {
  if (other != this) {
    std::swap(rolemode_, other->rolemode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeRoleModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeRoleModeReq_descriptor_;
  metadata.reflection = MsgChangeRoleModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleAttr::kAttrTypeFieldNumber;
const int RoleAttr::kAttrValFieldNumber;
const int RoleAttr::kRoleIdFieldNumber;
#endif  // !_MSC_VER

RoleAttr::RoleAttr() {
  SharedCtor();
}

void RoleAttr::InitAsDefaultInstance() {
}

RoleAttr::RoleAttr(const RoleAttr& from) {
  SharedCtor();
  MergeFrom(from);
}

void RoleAttr::SharedCtor() {
  _cached_size_ = 0;
  attrtype_ = 1;
  attrval_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleAttr::~RoleAttr() {
  SharedDtor();
}

void RoleAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RoleAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleAttr_descriptor_;
}

const RoleAttr& RoleAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

RoleAttr* RoleAttr::default_instance_ = NULL;

RoleAttr* RoleAttr::New() const {
  return new RoleAttr;
}

void RoleAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrtype_ = 1;
    attrval_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.ROLE_ATTR_TYPE attrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::ROLE_ATTR_TYPE_IsValid(value)) {
          set_attrtype(static_cast< IGameProto::ROLE_ATTR_TYPE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_attrVal;
        break;
      }
      
      // optional uint32 attrVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attrVal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &attrval_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_roleId;
        break;
      }
      
      // optional uint32 roleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RoleAttr::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.ROLE_ATTR_TYPE attrType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attrtype(), output);
  }
  
  // optional uint32 attrVal = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrval(), output);
  }
  
  // optional uint32 roleId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.ROLE_ATTR_TYPE attrType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attrtype(), target);
  }
  
  // optional uint32 attrVal = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrval(), target);
  }
  
  // optional uint32 roleId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.ROLE_ATTR_TYPE attrType = 1;
    if (has_attrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attrtype());
    }
    
    // optional uint32 attrVal = 2;
    if (has_attrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrval());
    }
    
    // optional uint32 roleId = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RoleAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleAttr::MergeFrom(const RoleAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attrtype(from.attrtype());
    }
    if (from._has_bit(1)) {
      set_attrval(from.attrval());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAttr::CopyFrom(const RoleAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAttr::IsInitialized() const {
  
  return true;
}

void RoleAttr::Swap(RoleAttr* other) {
  if (other != this) {
    std::swap(attrtype_, other->attrtype_);
    std::swap(attrval_, other->attrval_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleAttr_descriptor_;
  metadata.reflection = RoleAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleAttrChangeNtf::kAttrsFieldNumber;
#endif  // !_MSC_VER

MsgRoleAttrChangeNtf::MsgRoleAttrChangeNtf() {
  SharedCtor();
}

void MsgRoleAttrChangeNtf::InitAsDefaultInstance() {
}

MsgRoleAttrChangeNtf::MsgRoleAttrChangeNtf(const MsgRoleAttrChangeNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoleAttrChangeNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleAttrChangeNtf::~MsgRoleAttrChangeNtf() {
  SharedDtor();
}

void MsgRoleAttrChangeNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRoleAttrChangeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleAttrChangeNtf_descriptor_;
}

const MsgRoleAttrChangeNtf& MsgRoleAttrChangeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRoleAttrChangeNtf* MsgRoleAttrChangeNtf::default_instance_ = NULL;

MsgRoleAttrChangeNtf* MsgRoleAttrChangeNtf::New() const {
  return new MsgRoleAttrChangeNtf;
}

void MsgRoleAttrChangeNtf::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleAttrChangeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.RoleAttr attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attrs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_attrs()));
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoleAttrChangeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRoleAttrChangeNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.RoleAttr attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->attrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRoleAttrChangeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.RoleAttr attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRoleAttrChangeNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.RoleAttr attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRoleAttrChangeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleAttrChangeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleAttrChangeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleAttrChangeNtf::MergeFrom(const MsgRoleAttrChangeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleAttrChangeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleAttrChangeNtf::CopyFrom(const MsgRoleAttrChangeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleAttrChangeNtf::IsInitialized() const {
  
  return true;
}

void MsgRoleAttrChangeNtf::Swap(MsgRoleAttrChangeNtf* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleAttrChangeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleAttrChangeNtf_descriptor_;
  metadata.reflection = MsgRoleAttrChangeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterId::kCreatureIdFieldNumber;
const int MonsterId::kNpcIdFieldNumber;
#endif  // !_MSC_VER

MonsterId::MonsterId() {
  SharedCtor();
}

void MonsterId::InitAsDefaultInstance() {
}

MonsterId::MonsterId(const MonsterId& from) {
  SharedCtor();
  MergeFrom(from);
}

void MonsterId::SharedCtor() {
  _cached_size_ = 0;
  creatureid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterId::~MonsterId() {
  SharedDtor();
}

void MonsterId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MonsterId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterId_descriptor_;
}

const MonsterId& MonsterId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MonsterId* MonsterId::default_instance_ = NULL;

MonsterId* MonsterId::New() const {
  return new MonsterId;
}

void MonsterId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creatureid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 creatureId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &creatureid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcId;
        break;
      }
      
      // optional uint32 NpcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MonsterId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 creatureId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creatureid(), output);
  }
  
  // optional uint32 NpcId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 creatureId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->creatureid(), target);
  }
  
  // optional uint32 NpcId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 creatureId = 1;
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creatureid());
    }
    
    // optional uint32 NpcId = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MonsterId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterId::MergeFrom(const MonsterId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_creatureid(from.creatureid());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterId::CopyFrom(const MonsterId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterId::IsInitialized() const {
  
  return true;
}

void MonsterId::Swap(MonsterId* other) {
  if (other != this) {
    std::swap(creatureid_, other->creatureid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterId_descriptor_;
  metadata.reflection = MonsterId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMonsterListNtf::kMonsterArrayFieldNumber;
#endif  // !_MSC_VER

MsgMonsterListNtf::MsgMonsterListNtf() {
  SharedCtor();
}

void MsgMonsterListNtf::InitAsDefaultInstance() {
}

MsgMonsterListNtf::MsgMonsterListNtf(const MsgMonsterListNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMonsterListNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMonsterListNtf::~MsgMonsterListNtf() {
  SharedDtor();
}

void MsgMonsterListNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgMonsterListNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMonsterListNtf_descriptor_;
}

const MsgMonsterListNtf& MsgMonsterListNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgMonsterListNtf* MsgMonsterListNtf::default_instance_ = NULL;

MsgMonsterListNtf* MsgMonsterListNtf::New() const {
  return new MsgMonsterListNtf;
}

void MsgMonsterListNtf::Clear() {
  monsterarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMonsterListNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IGameProto.MonsterId monsterArray = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_monsterArray:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_monsterarray()));
        if (input->ExpectTag(10)) goto parse_monsterArray;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMonsterListNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMonsterListNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .IGameProto.MonsterId monsterArray = 1;
  for (int i = 0; i < this->monsterarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->monsterarray(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMonsterListNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .IGameProto.MonsterId monsterArray = 1;
  for (int i = 0; i < this->monsterarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterarray(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMonsterListNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .IGameProto.MonsterId monsterArray = 1;
  total_size += 1 * this->monsterarray_size();
  for (int i = 0; i < this->monsterarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterarray(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMonsterListNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMonsterListNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMonsterListNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMonsterListNtf::MergeFrom(const MsgMonsterListNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterarray_.MergeFrom(from.monsterarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMonsterListNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMonsterListNtf::CopyFrom(const MsgMonsterListNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMonsterListNtf::IsInitialized() const {
  
  return true;
}

void MsgMonsterListNtf::Swap(MsgMonsterListNtf* other) {
  if (other != this) {
    monsterarray_.Swap(&other->monsterarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMonsterListNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMonsterListNtf_descriptor_;
  metadata.reflection = MsgMonsterListNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReleaseSkillReq::kSkillIdFieldNumber;
const int MsgReleaseSkillReq::kTargetPosXFieldNumber;
const int MsgReleaseSkillReq::kTargetPosYFieldNumber;
const int MsgReleaseSkillReq::kTargetIdFieldNumber;
const int MsgReleaseSkillReq::kTargetTypeFieldNumber;
const int MsgReleaseSkillReq::kParamFieldNumber;
#endif  // !_MSC_VER

MsgReleaseSkillReq::MsgReleaseSkillReq() {
  SharedCtor();
}

void MsgReleaseSkillReq::InitAsDefaultInstance() {
}

MsgReleaseSkillReq::MsgReleaseSkillReq(const MsgReleaseSkillReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReleaseSkillReq::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  target_pos_x_ = 0;
  target_pos_y_ = 0;
  target_id_ = 0u;
  target_type_ = 1;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReleaseSkillReq::~MsgReleaseSkillReq() {
  SharedDtor();
}

void MsgReleaseSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgReleaseSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReleaseSkillReq_descriptor_;
}

const MsgReleaseSkillReq& MsgReleaseSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgReleaseSkillReq* MsgReleaseSkillReq::default_instance_ = NULL;

MsgReleaseSkillReq* MsgReleaseSkillReq::New() const {
  return new MsgReleaseSkillReq;
}

void MsgReleaseSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    target_pos_x_ = 0;
    target_pos_y_ = 0;
    target_id_ = 0u;
    target_type_ = 1;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReleaseSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_target_pos_x;
        break;
      }
      
      // optional float target_pos_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_target_pos_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &target_pos_x_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_target_pos_y;
        break;
      }
      
      // optional float target_pos_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_target_pos_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &target_pos_y_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }
      
      // optional uint32 target_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_target_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &target_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_target_type;
        break;
      }
      
      // optional .IGameProto.TARGET_TYPE target_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_target_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::TARGET_TYPE_IsValid(value)) {
          set_target_type(static_cast< IGameProto::TARGET_TYPE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_param;
        break;
      }
      
      // optional uint32 param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_param:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &param_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReleaseSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReleaseSkillReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 skillId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional float target_pos_x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->target_pos_x(), output);
  }
  
  // optional float target_pos_y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->target_pos_y(), output);
  }
  
  // optional uint32 target_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_id(), output);
  }
  
  // optional .IGameProto.TARGET_TYPE target_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->target_type(), output);
  }
  
  // optional uint32 param = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReleaseSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional float target_pos_x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->target_pos_x(), target);
  }
  
  // optional float target_pos_y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->target_pos_y(), target);
  }
  
  // optional uint32 target_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_id(), target);
  }
  
  // optional .IGameProto.TARGET_TYPE target_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->target_type(), target);
  }
  
  // optional uint32 param = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReleaseSkillReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional float target_pos_x = 2;
    if (has_target_pos_x()) {
      total_size += 1 + 4;
    }
    
    // optional float target_pos_y = 3;
    if (has_target_pos_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 target_id = 4;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }
    
    // optional .IGameProto.TARGET_TYPE target_type = 5;
    if (has_target_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_type());
    }
    
    // optional uint32 param = 6;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReleaseSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReleaseSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReleaseSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReleaseSkillReq::MergeFrom(const MsgReleaseSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_target_pos_x(from.target_pos_x());
    }
    if (from._has_bit(2)) {
      set_target_pos_y(from.target_pos_y());
    }
    if (from._has_bit(3)) {
      set_target_id(from.target_id());
    }
    if (from._has_bit(4)) {
      set_target_type(from.target_type());
    }
    if (from._has_bit(5)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReleaseSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReleaseSkillReq::CopyFrom(const MsgReleaseSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReleaseSkillReq::IsInitialized() const {
  
  return true;
}

void MsgReleaseSkillReq::Swap(MsgReleaseSkillReq* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(target_pos_x_, other->target_pos_x_);
    std::swap(target_pos_y_, other->target_pos_y_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_type_, other->target_type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReleaseSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReleaseSkillReq_descriptor_;
  metadata.reflection = MsgReleaseSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReleaseSkillAck::kSkillIdFieldNumber;
const int MsgReleaseSkillAck::kResultFieldNumber;
#endif  // !_MSC_VER

MsgReleaseSkillAck::MsgReleaseSkillAck() {
  SharedCtor();
}

void MsgReleaseSkillAck::InitAsDefaultInstance() {
}

MsgReleaseSkillAck::MsgReleaseSkillAck(const MsgReleaseSkillAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReleaseSkillAck::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReleaseSkillAck::~MsgReleaseSkillAck() {
  SharedDtor();
}

void MsgReleaseSkillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgReleaseSkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReleaseSkillAck_descriptor_;
}

const MsgReleaseSkillAck& MsgReleaseSkillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgReleaseSkillAck* MsgReleaseSkillAck::default_instance_ = NULL;

MsgReleaseSkillAck* MsgReleaseSkillAck::New() const {
  return new MsgReleaseSkillAck;
}

void MsgReleaseSkillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReleaseSkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReleaseSkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReleaseSkillAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 skillId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReleaseSkillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReleaseSkillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReleaseSkillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReleaseSkillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReleaseSkillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReleaseSkillAck::MergeFrom(const MsgReleaseSkillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReleaseSkillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReleaseSkillAck::CopyFrom(const MsgReleaseSkillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReleaseSkillAck::IsInitialized() const {
  
  return true;
}

void MsgReleaseSkillAck::Swap(MsgReleaseSkillAck* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReleaseSkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReleaseSkillAck_descriptor_;
  metadata.reflection = MsgReleaseSkillAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReleaseSkillNtf::kSkillIdFieldNumber;
const int MsgReleaseSkillNtf::kReleaserRoleIdFieldNumber;
const int MsgReleaseSkillNtf::kTargetPosXFieldNumber;
const int MsgReleaseSkillNtf::kTargetPosYFieldNumber;
const int MsgReleaseSkillNtf::kTargetIdFieldNumber;
const int MsgReleaseSkillNtf::kTargetTypeFieldNumber;
const int MsgReleaseSkillNtf::kParamFieldNumber;
#endif  // !_MSC_VER

MsgReleaseSkillNtf::MsgReleaseSkillNtf() {
  SharedCtor();
}

void MsgReleaseSkillNtf::InitAsDefaultInstance() {
}

MsgReleaseSkillNtf::MsgReleaseSkillNtf(const MsgReleaseSkillNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReleaseSkillNtf::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  releaser_role_id_ = 0u;
  target_pos_x_ = 0;
  target_pos_y_ = 0;
  target_id_ = 0u;
  target_type_ = 1;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReleaseSkillNtf::~MsgReleaseSkillNtf() {
  SharedDtor();
}

void MsgReleaseSkillNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgReleaseSkillNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReleaseSkillNtf_descriptor_;
}

const MsgReleaseSkillNtf& MsgReleaseSkillNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgReleaseSkillNtf* MsgReleaseSkillNtf::default_instance_ = NULL;

MsgReleaseSkillNtf* MsgReleaseSkillNtf::New() const {
  return new MsgReleaseSkillNtf;
}

void MsgReleaseSkillNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    releaser_role_id_ = 0u;
    target_pos_x_ = 0;
    target_pos_y_ = 0;
    target_id_ = 0u;
    target_type_ = 1;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReleaseSkillNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_releaser_role_id;
        break;
      }
      
      // optional uint32 releaser_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_releaser_role_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &releaser_role_id_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_target_pos_x;
        break;
      }
      
      // optional float target_pos_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_target_pos_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &target_pos_x_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_target_pos_y;
        break;
      }
      
      // optional float target_pos_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_target_pos_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &target_pos_y_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_target_id;
        break;
      }
      
      // optional uint32 target_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_target_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &target_id_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_target_type;
        break;
      }
      
      // optional .IGameProto.TARGET_TYPE target_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_target_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::TARGET_TYPE_IsValid(value)) {
          set_target_type(static_cast< IGameProto::TARGET_TYPE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectTag(56)) goto parse_param;
        break;
      }
      
      // optional uint32 param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_param:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &param_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReleaseSkillNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReleaseSkillNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 skillId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 releaser_role_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->releaser_role_id(), output);
  }
  
  // optional float target_pos_x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->target_pos_x(), output);
  }
  
  // optional float target_pos_y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->target_pos_y(), output);
  }
  
  // optional uint32 target_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_id(), output);
  }
  
  // optional .IGameProto.TARGET_TYPE target_type = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->target_type(), output);
  }
  
  // optional uint32 param = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReleaseSkillNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 releaser_role_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->releaser_role_id(), target);
  }
  
  // optional float target_pos_x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->target_pos_x(), target);
  }
  
  // optional float target_pos_y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->target_pos_y(), target);
  }
  
  // optional uint32 target_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_id(), target);
  }
  
  // optional .IGameProto.TARGET_TYPE target_type = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->target_type(), target);
  }
  
  // optional uint32 param = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReleaseSkillNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 releaser_role_id = 2;
    if (has_releaser_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->releaser_role_id());
    }
    
    // optional float target_pos_x = 3;
    if (has_target_pos_x()) {
      total_size += 1 + 4;
    }
    
    // optional float target_pos_y = 4;
    if (has_target_pos_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 target_id = 5;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }
    
    // optional .IGameProto.TARGET_TYPE target_type = 6;
    if (has_target_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_type());
    }
    
    // optional uint32 param = 7;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReleaseSkillNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReleaseSkillNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReleaseSkillNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReleaseSkillNtf::MergeFrom(const MsgReleaseSkillNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_releaser_role_id(from.releaser_role_id());
    }
    if (from._has_bit(2)) {
      set_target_pos_x(from.target_pos_x());
    }
    if (from._has_bit(3)) {
      set_target_pos_y(from.target_pos_y());
    }
    if (from._has_bit(4)) {
      set_target_id(from.target_id());
    }
    if (from._has_bit(5)) {
      set_target_type(from.target_type());
    }
    if (from._has_bit(6)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReleaseSkillNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReleaseSkillNtf::CopyFrom(const MsgReleaseSkillNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReleaseSkillNtf::IsInitialized() const {
  
  return true;
}

void MsgReleaseSkillNtf::Swap(MsgReleaseSkillNtf* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(releaser_role_id_, other->releaser_role_id_);
    std::swap(target_pos_x_, other->target_pos_x_);
    std::swap(target_pos_y_, other->target_pos_y_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_type_, other->target_type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReleaseSkillNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReleaseSkillNtf_descriptor_;
  metadata.reflection = MsgReleaseSkillNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeModeReq::kModeFieldNumber;
#endif  // !_MSC_VER

MsgChangeModeReq::MsgChangeModeReq() {
  SharedCtor();
}

void MsgChangeModeReq::InitAsDefaultInstance() {
}

MsgChangeModeReq::MsgChangeModeReq(const MsgChangeModeReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeModeReq::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeModeReq::~MsgChangeModeReq() {
  SharedDtor();
}

void MsgChangeModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgChangeModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeModeReq_descriptor_;
}

const MsgChangeModeReq& MsgChangeModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgChangeModeReq* MsgChangeModeReq::default_instance_ = NULL;

MsgChangeModeReq* MsgChangeModeReq::New() const {
  return new MsgChangeModeReq;
}

void MsgChangeModeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.EM_PK_MODE mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChangeModeReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.EM_PK_MODE mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeModeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.EM_PK_MODE mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChangeModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeModeReq::MergeFrom(const MsgChangeModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeModeReq::CopyFrom(const MsgChangeModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeModeReq::IsInitialized() const {
  
  return true;
}

void MsgChangeModeReq::Swap(MsgChangeModeReq* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeModeReq_descriptor_;
  metadata.reflection = MsgChangeModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeModeAck::kResultFieldNumber;
#endif  // !_MSC_VER

MsgChangeModeAck::MsgChangeModeAck() {
  SharedCtor();
}

void MsgChangeModeAck::InitAsDefaultInstance() {
}

MsgChangeModeAck::MsgChangeModeAck(const MsgChangeModeAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeModeAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeModeAck::~MsgChangeModeAck() {
  SharedDtor();
}

void MsgChangeModeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgChangeModeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeModeAck_descriptor_;
}

const MsgChangeModeAck& MsgChangeModeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgChangeModeAck* MsgChangeModeAck::default_instance_ = NULL;

MsgChangeModeAck* MsgChangeModeAck::New() const {
  return new MsgChangeModeAck;
}

void MsgChangeModeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeModeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeModeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChangeModeAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeModeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeModeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChangeModeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeModeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeModeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeModeAck::MergeFrom(const MsgChangeModeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeModeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeModeAck::CopyFrom(const MsgChangeModeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeModeAck::IsInitialized() const {
  
  return true;
}

void MsgChangeModeAck::Swap(MsgChangeModeAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeModeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeModeAck_descriptor_;
  metadata.reflection = MsgChangeModeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeModeNtf::kModeFieldNumber;
#endif  // !_MSC_VER

MsgChangeModeNtf::MsgChangeModeNtf() {
  SharedCtor();
}

void MsgChangeModeNtf::InitAsDefaultInstance() {
}

MsgChangeModeNtf::MsgChangeModeNtf(const MsgChangeModeNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeModeNtf::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeModeNtf::~MsgChangeModeNtf() {
  SharedDtor();
}

void MsgChangeModeNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgChangeModeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeModeNtf_descriptor_;
}

const MsgChangeModeNtf& MsgChangeModeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgChangeModeNtf* MsgChangeModeNtf::default_instance_ = NULL;

MsgChangeModeNtf* MsgChangeModeNtf::New() const {
  return new MsgChangeModeNtf;
}

void MsgChangeModeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeModeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.EM_PK_MODE mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeModeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChangeModeNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeModeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.EM_PK_MODE mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeModeNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.EM_PK_MODE mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChangeModeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeModeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeModeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeModeNtf::MergeFrom(const MsgChangeModeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeModeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeModeNtf::CopyFrom(const MsgChangeModeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeModeNtf::IsInitialized() const {
  
  return true;
}

void MsgChangeModeNtf::Swap(MsgChangeModeNtf* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeModeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeModeNtf_descriptor_;
  metadata.reflection = MsgChangeModeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerKillReq::kRoleIdFieldNumber;
const int MsgPlayerKillReq::kModeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKillReq::MsgPlayerKillReq() {
  SharedCtor();
}

void MsgPlayerKillReq::InitAsDefaultInstance() {
}

MsgPlayerKillReq::MsgPlayerKillReq(const MsgPlayerKillReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerKillReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKillReq::~MsgPlayerKillReq() {
  SharedDtor();
}

void MsgPlayerKillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlayerKillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKillReq_descriptor_;
}

const MsgPlayerKillReq& MsgPlayerKillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPlayerKillReq* MsgPlayerKillReq::default_instance_ = NULL;

MsgPlayerKillReq* MsgPlayerKillReq::New() const {
  return new MsgPlayerKillReq;
}

void MsgPlayerKillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // optional .IGameProto.EM_PK_MODE mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerKillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlayerKillReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerKillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerKillReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional .IGameProto.EM_PK_MODE mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlayerKillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKillReq::MergeFrom(const MsgPlayerKillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKillReq::CopyFrom(const MsgPlayerKillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKillReq::IsInitialized() const {
  
  return true;
}

void MsgPlayerKillReq::Swap(MsgPlayerKillReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKillReq_descriptor_;
  metadata.reflection = MsgPlayerKillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerKillAck::kResultFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKillAck::MsgPlayerKillAck() {
  SharedCtor();
}

void MsgPlayerKillAck::InitAsDefaultInstance() {
}

MsgPlayerKillAck::MsgPlayerKillAck(const MsgPlayerKillAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerKillAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKillAck::~MsgPlayerKillAck() {
  SharedDtor();
}

void MsgPlayerKillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlayerKillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKillAck_descriptor_;
}

const MsgPlayerKillAck& MsgPlayerKillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPlayerKillAck* MsgPlayerKillAck::default_instance_ = NULL;

MsgPlayerKillAck* MsgPlayerKillAck::New() const {
  return new MsgPlayerKillAck;
}

void MsgPlayerKillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerKillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlayerKillAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerKillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerKillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlayerKillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKillAck::MergeFrom(const MsgPlayerKillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKillAck::CopyFrom(const MsgPlayerKillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKillAck::IsInitialized() const {
  
  return true;
}

void MsgPlayerKillAck::Swap(MsgPlayerKillAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKillAck_descriptor_;
  metadata.reflection = MsgPlayerKillAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgPlayerKillNtf::_default_name_;
#ifndef _MSC_VER
const int MsgPlayerKillNtf::kRoleIdFieldNumber;
const int MsgPlayerKillNtf::kNameFieldNumber;
const int MsgPlayerKillNtf::kModeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKillNtf::MsgPlayerKillNtf() {
  SharedCtor();
}

void MsgPlayerKillNtf::InitAsDefaultInstance() {
}

MsgPlayerKillNtf::MsgPlayerKillNtf(const MsgPlayerKillNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerKillNtf::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKillNtf::~MsgPlayerKillNtf() {
  SharedDtor();
}

void MsgPlayerKillNtf::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlayerKillNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKillNtf_descriptor_;
}

const MsgPlayerKillNtf& MsgPlayerKillNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPlayerKillNtf* MsgPlayerKillNtf::default_instance_ = NULL;

MsgPlayerKillNtf* MsgPlayerKillNtf::New() const {
  return new MsgPlayerKillNtf;
}

void MsgPlayerKillNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKillNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // optional .IGameProto.EM_PK_MODE mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerKillNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlayerKillNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerKillNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerKillNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .IGameProto.EM_PK_MODE mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlayerKillNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKillNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKillNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKillNtf::MergeFrom(const MsgPlayerKillNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKillNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKillNtf::CopyFrom(const MsgPlayerKillNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKillNtf::IsInitialized() const {
  
  return true;
}

void MsgPlayerKillNtf::Swap(MsgPlayerKillNtf* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKillNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKillNtf_descriptor_;
  metadata.reflection = MsgPlayerKillNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCancelPlayerKillReq::_default_name_;
#ifndef _MSC_VER
const int MsgCancelPlayerKillReq::kRoleIdFieldNumber;
const int MsgCancelPlayerKillReq::kNameFieldNumber;
const int MsgCancelPlayerKillReq::kModeFieldNumber;
#endif  // !_MSC_VER

MsgCancelPlayerKillReq::MsgCancelPlayerKillReq() {
  SharedCtor();
}

void MsgCancelPlayerKillReq::InitAsDefaultInstance() {
}

MsgCancelPlayerKillReq::MsgCancelPlayerKillReq(const MsgCancelPlayerKillReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCancelPlayerKillReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCancelPlayerKillReq::~MsgCancelPlayerKillReq() {
  SharedDtor();
}

void MsgCancelPlayerKillReq::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCancelPlayerKillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCancelPlayerKillReq_descriptor_;
}

const MsgCancelPlayerKillReq& MsgCancelPlayerKillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCancelPlayerKillReq* MsgCancelPlayerKillReq::default_instance_ = NULL;

MsgCancelPlayerKillReq* MsgCancelPlayerKillReq::New() const {
  return new MsgCancelPlayerKillReq;
}

void MsgCancelPlayerKillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCancelPlayerKillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // optional .IGameProto.EM_PK_MODE mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCancelPlayerKillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCancelPlayerKillReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCancelPlayerKillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCancelPlayerKillReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .IGameProto.EM_PK_MODE mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCancelPlayerKillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCancelPlayerKillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCancelPlayerKillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCancelPlayerKillReq::MergeFrom(const MsgCancelPlayerKillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCancelPlayerKillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCancelPlayerKillReq::CopyFrom(const MsgCancelPlayerKillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelPlayerKillReq::IsInitialized() const {
  
  return true;
}

void MsgCancelPlayerKillReq::Swap(MsgCancelPlayerKillReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCancelPlayerKillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCancelPlayerKillReq_descriptor_;
  metadata.reflection = MsgCancelPlayerKillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCancelPlayerKillAck::kResultFieldNumber;
#endif  // !_MSC_VER

MsgCancelPlayerKillAck::MsgCancelPlayerKillAck() {
  SharedCtor();
}

void MsgCancelPlayerKillAck::InitAsDefaultInstance() {
}

MsgCancelPlayerKillAck::MsgCancelPlayerKillAck(const MsgCancelPlayerKillAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCancelPlayerKillAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCancelPlayerKillAck::~MsgCancelPlayerKillAck() {
  SharedDtor();
}

void MsgCancelPlayerKillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCancelPlayerKillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCancelPlayerKillAck_descriptor_;
}

const MsgCancelPlayerKillAck& MsgCancelPlayerKillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCancelPlayerKillAck* MsgCancelPlayerKillAck::default_instance_ = NULL;

MsgCancelPlayerKillAck* MsgCancelPlayerKillAck::New() const {
  return new MsgCancelPlayerKillAck;
}

void MsgCancelPlayerKillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCancelPlayerKillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCancelPlayerKillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCancelPlayerKillAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCancelPlayerKillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCancelPlayerKillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCancelPlayerKillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCancelPlayerKillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCancelPlayerKillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCancelPlayerKillAck::MergeFrom(const MsgCancelPlayerKillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCancelPlayerKillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCancelPlayerKillAck::CopyFrom(const MsgCancelPlayerKillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelPlayerKillAck::IsInitialized() const {
  
  return true;
}

void MsgCancelPlayerKillAck::Swap(MsgCancelPlayerKillAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCancelPlayerKillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCancelPlayerKillAck_descriptor_;
  metadata.reflection = MsgCancelPlayerKillAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCancelPlayerKillNtf::_default_name_;
#ifndef _MSC_VER
const int MsgCancelPlayerKillNtf::kRoleIdFieldNumber;
const int MsgCancelPlayerKillNtf::kNameFieldNumber;
const int MsgCancelPlayerKillNtf::kModeFieldNumber;
#endif  // !_MSC_VER

MsgCancelPlayerKillNtf::MsgCancelPlayerKillNtf() {
  SharedCtor();
}

void MsgCancelPlayerKillNtf::InitAsDefaultInstance() {
}

MsgCancelPlayerKillNtf::MsgCancelPlayerKillNtf(const MsgCancelPlayerKillNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCancelPlayerKillNtf::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCancelPlayerKillNtf::~MsgCancelPlayerKillNtf() {
  SharedDtor();
}

void MsgCancelPlayerKillNtf::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCancelPlayerKillNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCancelPlayerKillNtf_descriptor_;
}

const MsgCancelPlayerKillNtf& MsgCancelPlayerKillNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgCancelPlayerKillNtf* MsgCancelPlayerKillNtf::default_instance_ = NULL;

MsgCancelPlayerKillNtf* MsgCancelPlayerKillNtf::New() const {
  return new MsgCancelPlayerKillNtf;
}

void MsgCancelPlayerKillNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCancelPlayerKillNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // optional .IGameProto.EM_PK_MODE mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCancelPlayerKillNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCancelPlayerKillNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCancelPlayerKillNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCancelPlayerKillNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .IGameProto.EM_PK_MODE mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCancelPlayerKillNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCancelPlayerKillNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCancelPlayerKillNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCancelPlayerKillNtf::MergeFrom(const MsgCancelPlayerKillNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCancelPlayerKillNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCancelPlayerKillNtf::CopyFrom(const MsgCancelPlayerKillNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelPlayerKillNtf::IsInitialized() const {
  
  return true;
}

void MsgCancelPlayerKillNtf::Swap(MsgCancelPlayerKillNtf* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCancelPlayerKillNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCancelPlayerKillNtf_descriptor_;
  metadata.reflection = MsgCancelPlayerKillNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerKillAnswerReq::kRoleIdFieldNumber;
const int MsgPlayerKillAnswerReq::kAnswerTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKillAnswerReq::MsgPlayerKillAnswerReq() {
  SharedCtor();
}

void MsgPlayerKillAnswerReq::InitAsDefaultInstance() {
}

MsgPlayerKillAnswerReq::MsgPlayerKillAnswerReq(const MsgPlayerKillAnswerReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerKillAnswerReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  answer_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKillAnswerReq::~MsgPlayerKillAnswerReq() {
  SharedDtor();
}

void MsgPlayerKillAnswerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlayerKillAnswerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKillAnswerReq_descriptor_;
}

const MsgPlayerKillAnswerReq& MsgPlayerKillAnswerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPlayerKillAnswerReq* MsgPlayerKillAnswerReq::default_instance_ = NULL;

MsgPlayerKillAnswerReq* MsgPlayerKillAnswerReq::New() const {
  return new MsgPlayerKillAnswerReq;
}

void MsgPlayerKillAnswerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    answer_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKillAnswerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_answer_type;
        break;
      }
      
      // optional uint32 answer_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_answer_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &answer_type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerKillAnswerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlayerKillAnswerReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 answer_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->answer_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerKillAnswerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 answer_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->answer_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerKillAnswerReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 answer_type = 2;
    if (has_answer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlayerKillAnswerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKillAnswerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKillAnswerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKillAnswerReq::MergeFrom(const MsgPlayerKillAnswerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_answer_type(from.answer_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKillAnswerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKillAnswerReq::CopyFrom(const MsgPlayerKillAnswerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKillAnswerReq::IsInitialized() const {
  
  return true;
}

void MsgPlayerKillAnswerReq::Swap(MsgPlayerKillAnswerReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(answer_type_, other->answer_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKillAnswerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKillAnswerReq_descriptor_;
  metadata.reflection = MsgPlayerKillAnswerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerKillAnswerAck::kResultFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKillAnswerAck::MsgPlayerKillAnswerAck() {
  SharedCtor();
}

void MsgPlayerKillAnswerAck::InitAsDefaultInstance() {
}

MsgPlayerKillAnswerAck::MsgPlayerKillAnswerAck(const MsgPlayerKillAnswerAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerKillAnswerAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKillAnswerAck::~MsgPlayerKillAnswerAck() {
  SharedDtor();
}

void MsgPlayerKillAnswerAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlayerKillAnswerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKillAnswerAck_descriptor_;
}

const MsgPlayerKillAnswerAck& MsgPlayerKillAnswerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPlayerKillAnswerAck* MsgPlayerKillAnswerAck::default_instance_ = NULL;

MsgPlayerKillAnswerAck* MsgPlayerKillAnswerAck::New() const {
  return new MsgPlayerKillAnswerAck;
}

void MsgPlayerKillAnswerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKillAnswerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerKillAnswerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlayerKillAnswerAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerKillAnswerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerKillAnswerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlayerKillAnswerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKillAnswerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKillAnswerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKillAnswerAck::MergeFrom(const MsgPlayerKillAnswerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKillAnswerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKillAnswerAck::CopyFrom(const MsgPlayerKillAnswerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKillAnswerAck::IsInitialized() const {
  
  return true;
}

void MsgPlayerKillAnswerAck::Swap(MsgPlayerKillAnswerAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKillAnswerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKillAnswerAck_descriptor_;
  metadata.reflection = MsgPlayerKillAnswerAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgPlayerKillAnswerNtf::_default_name_;
#ifndef _MSC_VER
const int MsgPlayerKillAnswerNtf::kNameFieldNumber;
const int MsgPlayerKillAnswerNtf::kAnswerTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKillAnswerNtf::MsgPlayerKillAnswerNtf() {
  SharedCtor();
}

void MsgPlayerKillAnswerNtf::InitAsDefaultInstance() {
}

MsgPlayerKillAnswerNtf::MsgPlayerKillAnswerNtf(const MsgPlayerKillAnswerNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerKillAnswerNtf::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  answer_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKillAnswerNtf::~MsgPlayerKillAnswerNtf() {
  SharedDtor();
}

void MsgPlayerKillAnswerNtf::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlayerKillAnswerNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKillAnswerNtf_descriptor_;
}

const MsgPlayerKillAnswerNtf& MsgPlayerKillAnswerNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgPlayerKillAnswerNtf* MsgPlayerKillAnswerNtf::default_instance_ = NULL;

MsgPlayerKillAnswerNtf* MsgPlayerKillAnswerNtf::New() const {
  return new MsgPlayerKillAnswerNtf;
}

void MsgPlayerKillAnswerNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    answer_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKillAnswerNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_answer_type;
        break;
      }
      
      // optional uint32 answer_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_answer_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &answer_type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerKillAnswerNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlayerKillAnswerNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 answer_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->answer_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerKillAnswerNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 answer_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->answer_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerKillAnswerNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 answer_type = 2;
    if (has_answer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlayerKillAnswerNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKillAnswerNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKillAnswerNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKillAnswerNtf::MergeFrom(const MsgPlayerKillAnswerNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_answer_type(from.answer_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKillAnswerNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKillAnswerNtf::CopyFrom(const MsgPlayerKillAnswerNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKillAnswerNtf::IsInitialized() const {
  
  return true;
}

void MsgPlayerKillAnswerNtf::Swap(MsgPlayerKillAnswerNtf* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(answer_type_, other->answer_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKillAnswerNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKillAnswerNtf_descriptor_;
  metadata.reflection = MsgPlayerKillAnswerNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterFightReq::kRoleIdFieldNumber;
const int MsgEnterFightReq::kModeFieldNumber;
#endif  // !_MSC_VER

MsgEnterFightReq::MsgEnterFightReq() {
  SharedCtor();
}

void MsgEnterFightReq::InitAsDefaultInstance() {
}

MsgEnterFightReq::MsgEnterFightReq(const MsgEnterFightReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterFightReq::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterFightReq::~MsgEnterFightReq() {
  SharedDtor();
}

void MsgEnterFightReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgEnterFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterFightReq_descriptor_;
}

const MsgEnterFightReq& MsgEnterFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterFightReq* MsgEnterFightReq::default_instance_ = NULL;

MsgEnterFightReq* MsgEnterFightReq::New() const {
  return new MsgEnterFightReq;
}

void MsgEnterFightReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // optional .IGameProto.EM_PK_MODE mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::EM_PK_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::EM_PK_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterFightReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional .IGameProto.EM_PK_MODE mode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterFightReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional .IGameProto.EM_PK_MODE mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterFightReq::MergeFrom(const MsgEnterFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterFightReq::CopyFrom(const MsgEnterFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterFightReq::IsInitialized() const {
  
  return true;
}

void MsgEnterFightReq::Swap(MsgEnterFightReq* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterFightReq_descriptor_;
  metadata.reflection = MsgEnterFightReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterFightAck::kResultFieldNumber;
#endif  // !_MSC_VER

MsgEnterFightAck::MsgEnterFightAck() {
  SharedCtor();
}

void MsgEnterFightAck::InitAsDefaultInstance() {
}

MsgEnterFightAck::MsgEnterFightAck(const MsgEnterFightAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterFightAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterFightAck::~MsgEnterFightAck() {
  SharedDtor();
}

void MsgEnterFightAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgEnterFightAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterFightAck_descriptor_;
}

const MsgEnterFightAck& MsgEnterFightAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgEnterFightAck* MsgEnterFightAck::default_instance_ = NULL;

MsgEnterFightAck* MsgEnterFightAck::New() const {
  return new MsgEnterFightAck;
}

void MsgEnterFightAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterFightAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgEnterFightAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgEnterFightAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterFightAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterFightAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgEnterFightAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterFightAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterFightAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterFightAck::MergeFrom(const MsgEnterFightAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterFightAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterFightAck::CopyFrom(const MsgEnterFightAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterFightAck::IsInitialized() const {
  
  return true;
}

void MsgEnterFightAck::Swap(MsgEnterFightAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterFightAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterFightAck_descriptor_;
  metadata.reflection = MsgEnterFightAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryAgainstReq::kCreatureIdFieldNumber;
#endif  // !_MSC_VER

MsgQueryAgainstReq::MsgQueryAgainstReq() {
  SharedCtor();
}

void MsgQueryAgainstReq::InitAsDefaultInstance() {
}

MsgQueryAgainstReq::MsgQueryAgainstReq(const MsgQueryAgainstReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryAgainstReq::SharedCtor() {
  _cached_size_ = 0;
  creatureid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryAgainstReq::~MsgQueryAgainstReq() {
  SharedDtor();
}

void MsgQueryAgainstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgQueryAgainstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryAgainstReq_descriptor_;
}

const MsgQueryAgainstReq& MsgQueryAgainstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgQueryAgainstReq* MsgQueryAgainstReq::default_instance_ = NULL;

MsgQueryAgainstReq* MsgQueryAgainstReq::New() const {
  return new MsgQueryAgainstReq;
}

void MsgQueryAgainstReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creatureid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryAgainstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 creatureId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &creatureid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryAgainstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgQueryAgainstReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 creatureId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creatureid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryAgainstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 creatureId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->creatureid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryAgainstReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 creatureId = 1;
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creatureid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgQueryAgainstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryAgainstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryAgainstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryAgainstReq::MergeFrom(const MsgQueryAgainstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_creatureid(from.creatureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryAgainstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryAgainstReq::CopyFrom(const MsgQueryAgainstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryAgainstReq::IsInitialized() const {
  
  return true;
}

void MsgQueryAgainstReq::Swap(MsgQueryAgainstReq* other) {
  if (other != this) {
    std::swap(creatureid_, other->creatureid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryAgainstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryAgainstReq_descriptor_;
  metadata.reflection = MsgQueryAgainstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryAgainstAck::kAgainstFormIdFieldNumber;
const int MsgQueryAgainstAck::kEnemySideFieldNumber;
#endif  // !_MSC_VER

MsgQueryAgainstAck::MsgQueryAgainstAck() {
  SharedCtor();
}

void MsgQueryAgainstAck::InitAsDefaultInstance() {
  enemyside_ = const_cast< ::IGameProto::FightSide*>(&::IGameProto::FightSide::default_instance());
}

MsgQueryAgainstAck::MsgQueryAgainstAck(const MsgQueryAgainstAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryAgainstAck::SharedCtor() {
  _cached_size_ = 0;
  againstformid_ = 0u;
  enemyside_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryAgainstAck::~MsgQueryAgainstAck() {
  SharedDtor();
}

void MsgQueryAgainstAck::SharedDtor() {
  if (this != default_instance_) {
    delete enemyside_;
  }
}

const ::google::protobuf::Descriptor* MsgQueryAgainstAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryAgainstAck_descriptor_;
}

const MsgQueryAgainstAck& MsgQueryAgainstAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgQueryAgainstAck* MsgQueryAgainstAck::default_instance_ = NULL;

MsgQueryAgainstAck* MsgQueryAgainstAck::New() const {
  return new MsgQueryAgainstAck;
}

void MsgQueryAgainstAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    againstformid_ = 0u;
    if (_has_bit(1)) {
      if (enemyside_ != NULL) enemyside_->::IGameProto::FightSide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryAgainstAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 againstFormId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &againstformid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_enemySide;
        break;
      }
      
      // optional .IGameProto.FightSide enemySide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_enemySide:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_enemyside()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryAgainstAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgQueryAgainstAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 againstFormId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->againstformid(), output);
  }
  
  // optional .IGameProto.FightSide enemySide = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->enemyside(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryAgainstAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 againstFormId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->againstformid(), target);
  }
  
  // optional .IGameProto.FightSide enemySide = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemyside(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryAgainstAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 againstFormId = 1;
    if (has_againstformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->againstformid());
    }
    
    // optional .IGameProto.FightSide enemySide = 2;
    if (has_enemyside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemyside());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgQueryAgainstAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryAgainstAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryAgainstAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryAgainstAck::MergeFrom(const MsgQueryAgainstAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_againstformid(from.againstformid());
    }
    if (from._has_bit(1)) {
      mutable_enemyside()->::IGameProto::FightSide::MergeFrom(from.enemyside());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryAgainstAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryAgainstAck::CopyFrom(const MsgQueryAgainstAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryAgainstAck::IsInitialized() const {
  
  return true;
}

void MsgQueryAgainstAck::Swap(MsgQueryAgainstAck* other) {
  if (other != this) {
    std::swap(againstformid_, other->againstformid_);
    std::swap(enemyside_, other->enemyside_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryAgainstAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryAgainstAck_descriptor_;
  metadata.reflection = MsgQueryAgainstAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAreaIdNtf::kAreaIdFieldNumber;
#endif  // !_MSC_VER

MsgAreaIdNtf::MsgAreaIdNtf() {
  SharedCtor();
}

void MsgAreaIdNtf::InitAsDefaultInstance() {
}

MsgAreaIdNtf::MsgAreaIdNtf(const MsgAreaIdNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAreaIdNtf::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAreaIdNtf::~MsgAreaIdNtf() {
  SharedDtor();
}

void MsgAreaIdNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAreaIdNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAreaIdNtf_descriptor_;
}

const MsgAreaIdNtf& MsgAreaIdNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgAreaIdNtf* MsgAreaIdNtf::default_instance_ = NULL;

MsgAreaIdNtf* MsgAreaIdNtf::New() const {
  return new MsgAreaIdNtf;
}

void MsgAreaIdNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAreaIdNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 areaId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &areaid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAreaIdNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAreaIdNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 areaId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->areaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAreaIdNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 areaId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->areaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAreaIdNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 areaId = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAreaIdNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAreaIdNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAreaIdNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAreaIdNtf::MergeFrom(const MsgAreaIdNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAreaIdNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAreaIdNtf::CopyFrom(const MsgAreaIdNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAreaIdNtf::IsInitialized() const {
  
  return true;
}

void MsgAreaIdNtf::Swap(MsgAreaIdNtf* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAreaIdNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAreaIdNtf_descriptor_;
  metadata.reflection = MsgAreaIdNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgMonsterLanguageNtf::_default_notice_language_id_;
#ifndef _MSC_VER
const int MsgMonsterLanguageNtf::kCreatureIdFieldNumber;
const int MsgMonsterLanguageNtf::kProirFieldNumber;
const int MsgMonsterLanguageNtf::kNoticeLanguageIdFieldNumber;
#endif  // !_MSC_VER

MsgMonsterLanguageNtf::MsgMonsterLanguageNtf() {
  SharedCtor();
}

void MsgMonsterLanguageNtf::InitAsDefaultInstance() {
}

MsgMonsterLanguageNtf::MsgMonsterLanguageNtf(const MsgMonsterLanguageNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMonsterLanguageNtf::SharedCtor() {
  _cached_size_ = 0;
  creatureid_ = 0;
  proir_ = 0;
  notice_language_id_ = const_cast< ::std::string*>(&_default_notice_language_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMonsterLanguageNtf::~MsgMonsterLanguageNtf() {
  SharedDtor();
}

void MsgMonsterLanguageNtf::SharedDtor() {
  if (notice_language_id_ != &_default_notice_language_id_) {
    delete notice_language_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgMonsterLanguageNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMonsterLanguageNtf_descriptor_;
}

const MsgMonsterLanguageNtf& MsgMonsterLanguageNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgMonsterLanguageNtf* MsgMonsterLanguageNtf::default_instance_ = NULL;

MsgMonsterLanguageNtf* MsgMonsterLanguageNtf::New() const {
  return new MsgMonsterLanguageNtf;
}

void MsgMonsterLanguageNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creatureid_ = 0;
    proir_ = 0;
    if (_has_bit(2)) {
      if (notice_language_id_ != &_default_notice_language_id_) {
        notice_language_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMonsterLanguageNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &proir_));
        _set_bit(1);
        if (input->ExpectTag(18)) goto parse_notice_language_id;
        break;
      }
      
      // optional string notice_language_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_notice_language_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_notice_language_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->notice_language_id().data(), this->notice_language_id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_creatureId;
        break;
      }
      
      // optional int32 creatureId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_creatureId:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &creatureid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMonsterLanguageNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMonsterLanguageNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 proir = 1;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proir(), output);
  }
  
  // optional string notice_language_id = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_language_id().data(), this->notice_language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notice_language_id(), output);
  }
  
  // optional int32 creatureId = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->creatureid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMonsterLanguageNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 proir = 1;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proir(), target);
  }
  
  // optional string notice_language_id = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_language_id().data(), this->notice_language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice_language_id(), target);
  }
  
  // optional int32 creatureId = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->creatureid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMonsterLanguageNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 creatureId = 3;
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatureid());
    }
    
    // optional int32 proir = 1;
    if (has_proir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proir());
    }
    
    // optional string notice_language_id = 2;
    if (has_notice_language_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice_language_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMonsterLanguageNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMonsterLanguageNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMonsterLanguageNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMonsterLanguageNtf::MergeFrom(const MsgMonsterLanguageNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_creatureid(from.creatureid());
    }
    if (from._has_bit(1)) {
      set_proir(from.proir());
    }
    if (from._has_bit(2)) {
      set_notice_language_id(from.notice_language_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMonsterLanguageNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMonsterLanguageNtf::CopyFrom(const MsgMonsterLanguageNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMonsterLanguageNtf::IsInitialized() const {
  
  return true;
}

void MsgMonsterLanguageNtf::Swap(MsgMonsterLanguageNtf* other) {
  if (other != this) {
    std::swap(creatureid_, other->creatureid_);
    std::swap(proir_, other->proir_);
    std::swap(notice_language_id_, other->notice_language_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMonsterLanguageNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMonsterLanguageNtf_descriptor_;
  metadata.reflection = MsgMonsterLanguageNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDeadNtf::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgDeadNtf::MsgDeadNtf() {
  SharedCtor();
}

void MsgDeadNtf::InitAsDefaultInstance() {
}

MsgDeadNtf::MsgDeadNtf(const MsgDeadNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDeadNtf::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDeadNtf::~MsgDeadNtf() {
  SharedDtor();
}

void MsgDeadNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDeadNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDeadNtf_descriptor_;
}

const MsgDeadNtf& MsgDeadNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgDeadNtf* MsgDeadNtf::default_instance_ = NULL;

MsgDeadNtf* MsgDeadNtf::New() const {
  return new MsgDeadNtf;
}

void MsgDeadNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDeadNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDeadNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDeadNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDeadNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDeadNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDeadNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDeadNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDeadNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDeadNtf::MergeFrom(const MsgDeadNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDeadNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDeadNtf::CopyFrom(const MsgDeadNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDeadNtf::IsInitialized() const {
  
  return true;
}

void MsgDeadNtf::Swap(MsgDeadNtf* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDeadNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDeadNtf_descriptor_;
  metadata.reflection = MsgDeadNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRiviveReq::kModeFieldNumber;
const int MsgRiviveReq::kCountryIdFieldNumber;
#endif  // !_MSC_VER

MsgRiviveReq::MsgRiviveReq() {
  SharedCtor();
}

void MsgRiviveReq::InitAsDefaultInstance() {
}

MsgRiviveReq::MsgRiviveReq(const MsgRiviveReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRiviveReq::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRiviveReq::~MsgRiviveReq() {
  SharedDtor();
}

void MsgRiviveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRiviveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRiviveReq_descriptor_;
}

const MsgRiviveReq& MsgRiviveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRiviveReq* MsgRiviveReq::default_instance_ = NULL;

MsgRiviveReq* MsgRiviveReq::New() const {
  return new MsgRiviveReq;
}

void MsgRiviveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
    country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRiviveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IGameProto.RIVIVE_MODE mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (IGameProto::RIVIVE_MODE_IsValid(value)) {
          set_mode(static_cast< IGameProto::RIVIVE_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_country_id;
        break;
      }
      
      // optional uint32 country_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_country_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &country_id_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRiviveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRiviveReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .IGameProto.RIVIVE_MODE mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }
  
  // optional uint32 country_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRiviveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IGameProto.RIVIVE_MODE mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }
  
  // optional uint32 country_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRiviveReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IGameProto.RIVIVE_MODE mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // optional uint32 country_id = 2;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRiviveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRiviveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRiviveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRiviveReq::MergeFrom(const MsgRiviveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode(from.mode());
    }
    if (from._has_bit(1)) {
      set_country_id(from.country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRiviveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRiviveReq::CopyFrom(const MsgRiviveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRiviveReq::IsInitialized() const {
  
  return true;
}

void MsgRiviveReq::Swap(MsgRiviveReq* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(country_id_, other->country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRiviveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRiviveReq_descriptor_;
  metadata.reflection = MsgRiviveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRiviveNtf::kRoleIdFieldNumber;
const int MsgRiviveNtf::kXFieldNumber;
const int MsgRiviveNtf::kYFieldNumber;
#endif  // !_MSC_VER

MsgRiviveNtf::MsgRiviveNtf() {
  SharedCtor();
}

void MsgRiviveNtf::InitAsDefaultInstance() {
}

MsgRiviveNtf::MsgRiviveNtf(const MsgRiviveNtf& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgRiviveNtf::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRiviveNtf::~MsgRiviveNtf() {
  SharedDtor();
}

void MsgRiviveNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgRiviveNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRiviveNtf_descriptor_;
}

const MsgRiviveNtf& MsgRiviveNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IGame_2eproto();  return *default_instance_;
}

MsgRiviveNtf* MsgRiviveNtf::default_instance_ = NULL;

MsgRiviveNtf* MsgRiviveNtf::New() const {
  return new MsgRiviveNtf;
}

void MsgRiviveNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRiviveNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &x_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &y_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRiviveNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgRiviveNtf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional float x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // optional float y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRiviveNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional float x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  // optional float y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRiviveNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }
    
    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgRiviveNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRiviveNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRiviveNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRiviveNtf::MergeFrom(const MsgRiviveNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRiviveNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRiviveNtf::CopyFrom(const MsgRiviveNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRiviveNtf::IsInitialized() const {
  
  return true;
}

void MsgRiviveNtf::Swap(MsgRiviveNtf* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRiviveNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRiviveNtf_descriptor_;
  metadata.reflection = MsgRiviveNtf_reflection_;
  return metadata;
}


}  // namespace IGameProto
