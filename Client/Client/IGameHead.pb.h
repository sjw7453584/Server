// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_IGameHead_2eproto__INCLUDED
#define PROTOBUF_IGameHead_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace IGameProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IGameHead_2eproto();
void protobuf_AssignDesc_IGameHead_2eproto();
void protobuf_ShutdownFile_IGameHead_2eproto();

class MsgHead;

enum ErrorCode {
  SUCCEED = 0,
  FAIL = 1
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCEED;
const ErrorCode ErrorCode_MAX = FAIL;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class MsgHead : public ::google::protobuf::Message {
 public:
  MsgHead();
  virtual ~MsgHead();
  
  MsgHead(const MsgHead& from);
  
  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHead& default_instance();
  void Swap(MsgHead* other);
  
  // implements Message ----------------------------------------------
  
  MsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string msgTypeName = 1;
  inline bool has_msgtypename() const;
  inline void clear_msgtypename();
  static const int kMsgTypeNameFieldNumber = 1;
  inline const ::std::string& msgtypename() const;
  inline void set_msgtypename(const ::std::string& value);
  inline void set_msgtypename(const char* value);
  inline void set_msgtypename(const char* value, size_t size);
  inline ::std::string* mutable_msgtypename();
  
  // optional int32 errorCode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msgtypename_;
  static const ::std::string _default_msgtypename_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_IGameHead_2eproto();
  friend void protobuf_AssignDesc_IGameHead_2eproto();
  friend void protobuf_ShutdownFile_IGameHead_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgHead* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgHead

// required string msgTypeName = 1;
inline bool MsgHead::has_msgtypename() const {
  return _has_bit(0);
}
inline void MsgHead::clear_msgtypename() {
  if (msgtypename_ != &_default_msgtypename_) {
    msgtypename_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgHead::msgtypename() const {
  return *msgtypename_;
}
inline void MsgHead::set_msgtypename(const ::std::string& value) {
  _set_bit(0);
  if (msgtypename_ == &_default_msgtypename_) {
    msgtypename_ = new ::std::string;
  }
  msgtypename_->assign(value);
}
inline void MsgHead::set_msgtypename(const char* value) {
  _set_bit(0);
  if (msgtypename_ == &_default_msgtypename_) {
    msgtypename_ = new ::std::string;
  }
  msgtypename_->assign(value);
}
inline void MsgHead::set_msgtypename(const char* value, size_t size) {
  _set_bit(0);
  if (msgtypename_ == &_default_msgtypename_) {
    msgtypename_ = new ::std::string;
  }
  msgtypename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgHead::mutable_msgtypename() {
  _set_bit(0);
  if (msgtypename_ == &_default_msgtypename_) {
    msgtypename_ = new ::std::string;
  }
  return msgtypename_;
}

// optional int32 errorCode = 2;
inline bool MsgHead::has_errorcode() const {
  return _has_bit(1);
}
inline void MsgHead::clear_errorcode() {
  errorcode_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MsgHead::errorcode() const {
  return errorcode_;
}
inline void MsgHead::set_errorcode(::google::protobuf::int32 value) {
  _set_bit(1);
  errorcode_ = value;
}


}  // namespace IGameProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< IGameProto::ErrorCode>() {
  return IGameProto::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_IGameHead_2eproto__INCLUDED
